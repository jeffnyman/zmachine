! Output of: /home/agarvin/ztool/ztool.pike '-TuXgCRx' '/usr/games/infocom/z3/zork1-r88.z3'

! Story file is /usr/games/infocom/z3/zork1-r88.z3

Constant M_END 0;
Constant M_HANDLED 1;
Constant M_ENTER 2;
Constant M_LOOK 3;
Constant M_WAKE 4;
Constant M_FIGHT 5;
Constant M_BEFORE 6;


Release 88;
Serial "840726";

Constant true  1;
Constant false 0;

Global location;
Global score;
Global turns;
Array Villains --> [ ! 4 elements
  3
  [ ! 5 elements
    troll
    sword
    1
    0
    Troll_melee
  ]
  [ ! 5 elements
    thief
    nasty_knife
    1
    0
    Thief_melee
  ]
  [ ! 5 elements
    cyclops
    0
    0
    0
    Cyclops_melee
  ]
];
Array Thief_melee --> [ ! 9 elements
  [ ! 5 elements
    4
    [ ! 2 elements
      1
      "The thief stabs nonchalantly with his stiletto and misses."
    ]
    [ ! 2 elements
      1
      "You dodge as the thief comes in low."
    ]
    [ ! 2 elements
      1
      "You parry a lightning thrust, and the thief salutes you with a grim nod."
    ]
    [ ! 2 elements
      1
      "The thief tries to sneak past your guard, but you twist away."
    ]
  ]
  [ ! 3 elements
    2
    [ ! 2 elements
      1
      "Shifting in the midst of a thrust, the thief knocks you unconscious with the haft of his stiletto."
    ]
    [ ! 2 elements
      1
      "The thief knocks you out."
    ]
  ]
  [ ! 4 elements
    3
    [ ! 2 elements
      1
      "Finishing you off, the thief inserts his blade into your heart."
    ]
    [ ! 2 elements
      1
      "The thief comes in from the side, feints, and inserts the blade into your ribs."
    ]
    [ ! 2 elements
      1
      "The thief bows formally, raises his stiletto, and with a wry grin, ends the battle and your life."
    ]
  ]
  [ ! 5 elements
    4
    [ ! 2 elements
      1
      "A quick thrust pinks your left arm, and blood starts to trickle down."
    ]
    [ ! 2 elements
      1
      "The thief draws blood, raking his stiletto across your arm."
    ]
    [ ! 2 elements
      1
      "The stiletto flashes faster than you can follow, and blood wells from your leg."
    ]
    [ ! 2 elements
      1
      "The thief slowly approaches, strikes like a snake, and leaves you wounded."
    ]
  ]
  [ ! 5 elements
    4
    [ ! 2 elements
      1
      "The thief strikes like a snake! The resulting wound is serious."
    ]
    [ ! 2 elements
      1
      "The thief stabs a deep cut in your upper arm."
    ]
    [ ! 2 elements
      1
      "The stiletto touches your forehead, and the blood obscures your vision."
    ]
    [ ! 2 elements
      1
      "The thief strikes at your wrist, and suddenly your grip is slippery with blood."
    ]
  ]
  [ ! 4 elements
    3
    [ ! 2 elements
      1
      "The butt of his stiletto cracks you on the skull, and you stagger back."
    ]
    [ ! 2 elements
      1
      "The thief rams the haft of his blade into your stomach, leaving you out of breath."
    ]
    [ ! 2 elements
      1
      "The thief attacks, and you fall back desperately."
    ]
  ]
  [ ! 4 elements
    3
    [ ! 6 elements
      5
      "A long, theatrical slash. You catch it on your "
      0
      ", but the thief twists his knife, and the "
      0
      " goes flying."
    ]
    [ ! 4 elements
      3
      "The thief neatly flips your "
      0
      " out of your hands, and it drops to the floor."
    ]
    [ ! 4 elements
      3
      "You parry a low thrust, and your "
      0
      " slips out of your hand."
    ]
  ]
  [ ! 4 elements
    3
    [ ! 2 elements
      1
      "The thief, a man of superior breeding, pauses for a moment to consider the propriety of finishing you off."
    ]
    [ ! 2 elements
      1
      "The thief amuses himself by searching your pockets."
    ]
    [ ! 2 elements
      1
      "The thief entertains himself by rifling your pack."
    ]
  ]
  [ ! 3 elements
    2
    [ ! 2 elements
      1
      "The thief, forgetting his essentially genteel upbringing, cuts your throat."
    ]
    [ ! 2 elements
      1
      "The thief, a pragmatist, dispatches you as a threat to his livelihood."
    ]
  ]
];
Array Troll_melee --> [ ! 9 elements
  [ ! 5 elements
    4
    [ ! 2 elements
      1
      "The troll swings his axe, but it misses."
    ]
    [ ! 2 elements
      1
      "The troll's axe barely misses your ear."
    ]
    [ ! 2 elements
      1
      "The axe sweeps past as you jump aside."
    ]
    [ ! 2 elements
      1
      "The axe crashes against the rock, throwing sparks!"
    ]
  ]
  [ ! 2 elements
    1
    [ ! 2 elements
      1
      "The flat of the troll's axe hits you delicately on the head, knocking you out."
    ]
  ]
  [ ! 4 elements
    3
    [ ! 2 elements
      1
      "The troll neatly removes your head."
    ]
    [ ! 2 elements
      1
      "The troll's axe stroke cleaves you from the nave to the chops."
    ]
    [ ! 2 elements
      1
      "The troll's axe removes your head."
    ]
  ]
  [ ! 5 elements
    4
    [ ! 2 elements
      1
      "The axe gets you right in the side. Ouch!"
    ]
    [ ! 2 elements
      1
      "The flat of the troll's axe skins across your forearm."
    ]
    [ ! 2 elements
      1
      "The troll's swing almost knocks you over as you barely parry in time."
    ]
    [ ! 2 elements
      1
      "The troll swings his axe, and it nicks your arm as you dodge."
    ]
  ]
  [ ! 4 elements
    3
    [ ! 4 elements
      3
      "The troll charges, and his axe slashes you on your "
      0
      " arm."
    ]
    [ ! 2 elements
      1
      "An axe stroke makes a deep wound in your leg."
    ]
    [ ! 2 elements
      1
      "The troll's axe swings down, gashing your shoulder."
    ]
  ]
  [ ! 5 elements
    4
    [ ! 2 elements
      1
      "The troll hits you with a glancing blow, and you are momentarily stunned."
    ]
    [ ! 2 elements
      1
      "The troll swings; the blade turns on your armor but crashes broadside into your head."
    ]
    [ ! 2 elements
      1
      "You stagger back under a hail of axe strokes."
    ]
    [ ! 2 elements
      1
      "The troll's mighty blow drops you to your knees."
    ]
  ]
  [ ! 4 elements
    3
    [ ! 4 elements
      3
      "The axe hits your "
      0
      " and knocks it spinning."
    ]
    [ ! 4 elements
      3
      "The troll swings, you parry, but the force of his blow knocks your "
      0
      " away."
    ]
    [ ! 4 elements
      3
      "The axe knocks your "
      0
      " out of your hand. It falls to the floor."
    ]
  ]
  [ ! 3 elements
    2
    [ ! 2 elements
      1
      "The troll hesitates, fingering his axe."
    ]
    [ ! 2 elements
      1
      "The troll scratches his head ruminatively:  Might you be magically protected, he wonders?"
    ]
  ]
  [ ! 2 elements
    1
    [ ! 2 elements
      1
      "Conquering his fears, the troll puts you to death."
    ]
  ]
];
Array Cyclops_melee --> [ ! 9 elements
  [ ! 3 elements
    2
    [ ! 2 elements
      1
      "The Cyclops misses, but the backwash almost knocks you over."
    ]
    [ ! 2 elements
      1
      "The Cyclops rushes you, but runs into the wall."
    ]
  ]
  [ ! 2 elements
    1
    [ ! 2 elements
      1
      "The Cyclops sends you crashing to the floor, unconscious."
    ]
  ]
  [ ! 2 elements
    1
    [ ! 2 elements
      1
      "The Cyclops breaks your neck with a massive smash."
    ]
  ]
  [ ! 3 elements
    2
    [ ! 2 elements
      1
      "A quick punch, but it was only a glancing blow."
    ]
    [ ! 2 elements
      1
      "A glancing blow from the Cyclops' fist."
    ]
  ]
  [ ! 3 elements
    2
    [ ! 2 elements
      1
      "The monster smashes his huge fist into your chest, breaking several ribs."
    ]
    [ ! 2 elements
      1
      "The Cyclops almost knocks the wind out of you with a quick punch."
    ]
  ]
  [ ! 3 elements
    2
    [ ! 2 elements
      1
      "The Cyclops lands a punch that knocks the wind out of you."
    ]
    [ ! 2 elements
      1
      "Heedless of your weapons, the Cyclops tosses you against the rock wall of the room."
    ]
  ]
  [ ! 3 elements
    2
    [ ! 4 elements
      3
      "The Cyclops grabs your "
      0
      ", tastes it, and throws it to the ground in disgust."
    ]
    [ ! 4 elements
      3
      "The monster grabs you on the wrist, squeezes, and you drop your "
      0
      " in pain."
    ]
  ]
  [ ! 2 elements
    1
    [ ! 2 elements
      1
      "The Cyclops seems unable to decide whether to broil or stew his dinner."
    ]
  ]
  [ ! 2 elements
    1
    [ ! 2 elements
      1
      "The Cyclops, no sportsman, dispatches his unconscious victim."
    ]
  ]
];
Array Hero_melee --> [ ! 7 elements
  [ ! 7 elements
    6
    [ ! 6 elements
      5
      "Your "
      0
      " misses the "
      1
      " by an inch."
    ]
    [ ! 4 elements
      3
      "A good slash, but it misses the "
      1
      " by a mile."
    ]
    [ ! 4 elements
      3
      "You charge, but the "
      1
      " jumps nimbly aside."
    ]
    [ ! 4 elements
      3
      "Clang! Crash! The "
      1
      " parries."
    ]
    [ ! 4 elements
      3
      "A quick stroke, but the "
      1
      " is on guard."
    ]
    [ ! 4 elements
      3
      "A good stroke, but it's too slow; the "
      1
      " dodges."
    ]
  ]
  [ ! 6 elements
    5
    [ ! 6 elements
      5
      "Your "
      0
      " crashes down, knocking the "
      1
      " into dreamland."
    ]
    [ ! 4 elements
      3
      "The "
      1
      " is battered into unconsciousness."
    ]
    [ ! 4 elements
      3
      "A furious exchange, and the "
      1
      " is knocked out!"
    ]
    [ ! 6 elements
      5
      "The haft of your "
      0
      " knocks out the "
      1
      "."
    ]
    [ ! 4 elements
      3
      "The "
      1
      " is knocked out!"
    ]
  ]
  [ ! 4 elements
    3
    [ ! 6 elements
      5
      "It's curtains for the "
      1
      " as your "
      0
      " removes his head."
    ]
    [ ! 4 elements
      3
      "The fatal blow strikes the "
      1
      " square in the heart:  He dies."
    ]
    [ ! 4 elements
      3
      "The "
      1
      " takes a fatal blow and slumps to the floor dead."
    ]
  ]
  [ ! 5 elements
    4
    [ ! 4 elements
      3
      "The "
      1
      " is struck on the arm; blood begins to trickle down."
    ]
    [ ! 6 elements
      5
      "Your "
      0
      " pinks the "
      1
      " on the wrist, but it's not serious."
    ]
    [ ! 2 elements
      1
      "Your stroke lands, but it was only the flat of the blade."
    ]
    [ ! 4 elements
      3
      "The blow lands, making a shallow gash in the "
      1
      "'s arm!"
    ]
  ]
  [ ! 5 elements
    4
    [ ! 4 elements
      3
      "The "
      1
      " receives a deep gash in his side."
    ]
    [ ! 4 elements
      3
      "A savage blow on the thigh! The "
      1
      " is stunned but can still fight!"
    ]
    [ ! 2 elements
      1
      "Slash! Your blow lands! That one hit an artery, it could be serious!"
    ]
    [ ! 2 elements
      1
      "Slash! Your stroke connects! This could be serious!"
    ]
  ]
  [ ! 6 elements
    5
    [ ! 4 elements
      3
      "The "
      1
      " is staggered, and drops to his knees."
    ]
    [ ! 4 elements
      3
      "The "
      1
      " is momentarily disoriented and can't fight back."
    ]
    [ ! 4 elements
      3
      "The force of your blow knocks the "
      1
      " back, stunned."
    ]
    [ ! 4 elements
      3
      "The "
      1
      " is confused and can't fight back."
    ]
    [ ! 4 elements
      3
      "The quickness of your thrust knocks the "
      1
      " back, stunned."
    ]
  ]
  [ ! 3 elements
    2
    [ ! 4 elements
      3
      "The "
      1
      "'s weapon is knocked to the floor, leaving him unarmed."
    ]
    [ ! 4 elements
      3
      "The "
      1
      " is disarmed by a subtle feint past his guard."
    ]
  ]
];
Array Def3_res --> [ ! 5 elements
  Def3a
  0
  Def3b
  0
  Def3c
];
Array Def2_res --> [ ! 4 elements
  Def2a
  Def2b
  0
  0
];
Array Def1_res --> [ ! 3 elements
  Def1
  0
  0
];
Array Def3c --> [ ! 10 elements
  1
  6
  6
  4
  4
  4
  4
  5
  5
  5
];
Array Def3b --> [ ! 11 elements
  1
  1
  1
  6
  6
  4
  4
  4
  5
  5
  5
];
Array Def3a --> [ ! 11 elements
  1
  1
  1
  1
  1
  6
  6
  4
  4
  5
  5
];
Array Def2b --> [ ! 12 elements
  1
  1
  1
  6
  6
  4
  4
  4
  2
  3
  3
  3
];
Array Def2a --> [ ! 10 elements
  1
  1
  1
  1
  1
  6
  6
  4
  4
  2
];
Array Def1 --> [ ! 13 elements
  1
  1
  1
  1
  6
  6
  2
  2
  3
  3
  3
  3
  3
];
Global Sing_song;
Array Bdigs --> [ ! 3 elements
  "You seem to be digging a hole here."
  "The hole is getting deeper, but that's about it."
  "You are surrounded by a wall of sand on all sides."
];
Global Beach_dig = -1;
Global Buoy_flag =  1;
Array Near_water --> [ ! 17 elements
  16
  dam_base
  river4
  beach2
  river2
  beach1
  frigid_river
  shore
  river1
  sandy_beach
  frigid_river
  reservoir_south
  reservoir
  reservoir_north
  reservoir
  stream_view
  stream
];
Array River_next --> [ ! 6 elements
  5
  river4
  river3
  river2
  frigid_river
  river1
];
Array River_speeds --> [ ! 11 elements
  10
  river4
  4
  river3
  4
  river2
  3
  frigid_river
  2
  river1
  1
];
Global Light_shaft = 13;
Array Candle_table --> [ ! 6 elements
  20
  "The candles grow shorter."
  10
  "The candles are becoming quite short."
  5
  "The candles won't last long now."
];
Global Matches_count = 6;
Array Lamp_table --> [ ! 6 elements
  100
  "The lamp appears a bit dimmer."
  70
  "The lamp is definitely dimmer now."
  15
  "The lamp is nearly out."
];
Global Thief_out_desc = "There is a suspicious-looking individual lying unconscious on the ground.";
Global Thief_desc = "There is a suspicious-looking individual, holding a bag, leaning against one wall. He is armed with a vicious-looking stiletto.";
Global Thief_engrossed;
Global Thief_here;
Global Egg_solve;
Global Echo_flag;
Array Cyclo_messages --> [ ! 6 elements
  "The cyclops seems somewhat agitated."
  "The cyclops appears to be getting more agitated."
  "The cyclops is moving about the room, looking for something."
  "The cyclops was looking for salt and pepper. No doubt they are condiments for his upcoming snack."
  "The cyclops is moving toward you in an unfriendly manner."
  "You have two choices: 1. Leave  2. Become dinner."
];
Global Cyclowrath;
Global Leak_sprung;
Array LeakLevel --> [ ! 9 elements
  "up to your ankles."
  "up to your shin."
  "up to your knees."
  "up to your hips."
  "up to your waist."
  "up to your chest."
  "up to your neck."
  "over your head."
  "high in your lungs."
];
Array Near_loudroom --> [ ! 5 elements
  4
  0
  damp_cave
  round_room
  deep_canyon
];
Global Dam_open;
Global Gate_flag;
Global Exorcism_candle;
Global Exorcism_bell;
Global Mirror_flag;
Global Grate_unlocked;
Global Leaves_moved;
Global Rug_moved;
Array coalmine_rooms --> [ ! 10 elements
  9
  0
  mine4
  mine3
  mine2
  mine1
  ladder_top
  ladder_bottom
  squeaky_room
  mine_entrance
];
Global Basket_up =  1;
Global Window_munged;
Array Dummy_table --> [ ! 5 elements
  4
  0
  "Look around."
  "Too late for that."
  "Have your eyes checked."
];
Array Yuks_table --> [ ! 6 elements
  5
  0
  "A valiant attempt."
  "You can't be serious."
  "An interesting idea..."
  "What a concept!"
];
Array Hello_table --> [ ! 6 elements
  5
  0
  "Hello."
  "Good day."
  "Nice weather we've been having lately."
  "Goodbye."
];
Array Noswim_table --> [ ! 3 elements
  2
  0
  "You can't swim in the dungeon."
];
Array Ho_hum_table --> [ ! 5 elements
  4
  0
  " doesn't seem to work."
  " isn't notably helpful."
  " has no effect."
];
Array Indents --> [ ! 6 elements
  "  "
  "  "
  "    "
  "      "
  "        "
  "          "
];
Global Max_held_mult = 8;
Global Maximum_held = 7;
Global Goodluck_Flag =  1;
Global Deaths;
Global Dead;
Global Base_score;
Global Last_ob_longdesc;
Global Grue_Repellent;
Global Lit;
Array Hop_msg --> [ ! 6 elements
  5
  0
  "Very good. Now you can go to the second grade."
  "Are you enjoying yourself?"
  "Wheeeeeeeeee!!!!!"
  "Do you expect me to applaud?"
];
Array Dive_msg --> [ ! 5 elements
  4
  0
  "You should have looked before you leaped."
  "In the movies, your life would be passing before your eyes."
  "Geronimo..."
];
Global HS_count;
Global superbrief;
Global verbose;
Global Always_lit;
Global Tmp_p_adjn;
Global Tmp_p_adj;
Global Tmp_p_name;
Global P_object;
Global SnarfFlag;
Global SN_tmpptr;
Global SN_tmpptr2;
Global P_getflags;
Global P_matchlen;
Global sentence =  10441;
Global P_merge --> 50;
Global P_buts --> 50;
Global P_prsi --> 50;
Global P_prso --> 50;
Global P_adjn;
Global P_adj;
Global P_name;
Global P_gwimbit;
Global P_slocbits;
Global second_intnum;
Global Direction;
Global P_unknown1;
Global P_ncn;
Global P_itbl_2 =  10013;
Global P_itbl =  9993;
Global P_tmp_adj;
Global P_select_adj;
Global LastNounPlace;
Global LastNoun;
Global P_cont;
Global P_inbuf --> 60;
Global P_lexv --> 60;
Global player;
Global P_dir;
Global P_len;
Global P_syntax;
Global P_tmp_name;
Global P_table;
Global noun;
Global second;
Global Verb;
Global Obs_not_here;
Global prev_indirect;
Global prev_direct;
Global prev_verb;
Global P_won;
Global actor;
Global Clock_wait;
Global C_ints =  180;
Global C_ints2 =  180;
Global C_table =  9193;
Global Load_max = 100;
Global Load_allowed = 100;
Array Above_ground --> [ ! 12 elements
  11
  west_of_house
  north_of_house
  east_of_house
  south_of_house
  forest1
  forest2
  forest4
  forest_path
  clearing2
  clearing1
  canyon_view
];
Array In_house --> [ ! 5 elements
  4
  living_room
  kitchen
  attic
  kitchen
];
Array Forest_around --> [ ! 7 elements
  6
  forest1
  forest2
  forest4
  forest_path
  clearing2
  forest1
];
Array House_around --> [ ! 6 elements
  5
  west_of_house
  north_of_house
  east_of_house
  south_of_house
  west_of_house
];
Global SnarfFlag;
Global Won_flag;
Global Troll_flag;
Global Rainbow_flag;
Global Magic_flag;
Global Low_tide;
Global LLD_flag;
Global Empty_handed;
Global Dome_flag;
Global Deflated;
Global Cyclops_flag;
Global Chimney_flag;
Global Max_Score = 350;
Global Low_direction =  19;
Array Prepositions --> [ ! 18 elements
  17
  'behind'
  239
  'under'
  240
  'around'
  241
  'for'
  242
  'at'
  243
  'off'
  244
  'across'
  245
  'over'
  246
  'away'
];
Global Preactions =  14775;
Global Verbs =  11859;

! unknown globals: 
Global g62 = 10033	! word at 10033 = 0 0;
Global g99 = 10000	! word at 10000 = 0 0;
Global g9b = 14483	! word at 14483 = 14005 36b5;
Global g9e = 5	! word at 5 = 14159 374f;
Global g9f = 180	! word at 180 = 19671 4cd7;
Global ga0 = 81	! word at 81 = 1467 5bb;
Global ga1 = 79	! word at 79 = 39644 9adc;
Global ga2 = 80	! word at 80 = 56325 dc05;
Global ga3 = 180	! word at 180 = 19671 4cd7;
Global ga4 = 6	! word at 6 = 20229 4f05;
Global ga5 = 78	! word at 78 = 31386 7a9a;
Global ga6 = 77	! word at 77 = 24698 607a;
Global ga7 = 76	! word at 76 = 38496 9660;
Global ga8 = 75	! word at 75 = 1430 596;
Global ga9 = 74	! word at 74 = 59397 e805;
Global gaa = 78	! word at 78 = 31386 7a9a;
Global gab = 4	! word at 4 = 20023 4e37;
Global gac = 193	! word at 193 = 18118 46c6;
Global gad = 203	! word at 203 = 38368 95e0;
Global gae = 201	! word at 201 = 51270 c846;
Global gaf = 203	! word at 203 = 38368 95e0;
Global gb0 = 11	! word at 11 = 45090 b022;
Global gb1 = 180	! word at 180 = 19671 4cd7;
Global gb2 = 81	! word at 81 = 1467 5bb;
Global gb3 = 79	! word at 79 = 39644 9adc;
Global gb4 = 80	! word at 80 = 56325 dc05;
Global gb5 = 78	! word at 78 = 31386 7a9a;
Global gb6 = 77	! word at 77 = 24698 607a;
Global gb7 = 76	! word at 76 = 38496 9660;
Global gb8 = 75	! word at 75 = 1430 596;
Global gb9 = 74	! word at 74 = 59397 e805;
Global gba = 143	! word at 143 = 46931 b753;
Global gbb = 25	! word at 25 = 61605 f0a5;


[ ComplexPickOne tbl len offset ndx choice msg_tbl ;
     len = tbl-->0;
     offset = tbl-->1;
     len--;
     tbl = tbl + 2;
     msg_tbl = tbl + offset * 2;
     ndx = random((len - offset));
     choice = msg_tbl-->ndx;
     msg_tbl-->ndx = (msg_tbl-->1);
     msg_tbl-->1 = choice;
     offset++;
     if( offset ~= len ) ?label1;
     offset = 0;
  .label1;
     tbl-->0 = offset;
     return choice;
]

! [ 75 bytes missing between routines ]

[ Main ;
  .label2;
     Queue(FightDaemon, -1)-->0 = 1;
     Queue(SwordDaemon, -1);
     Queue(ThiefDaemon, -1)-->0 = 1;
     Queue(CandleDaemon, 40);
     Queue(LampDaemon, 200);
     magic_boat.vtype = 8;
     Def1_res-->1 = (Def1 + 2);
     Def1_res-->2 = (Def1 + 4);
     Def2_res-->2 = (Def2b + 2);
     Def2_res-->3 = (Def2b + 4);
     Def3_res-->1 = (Def3a + 2);
     Def3_res-->3 = (Def3b + 2);
     location = west_of_house;
     SetLastObject(small_mailbox);
     if( location has visited ) ?label1;
     VersionSub();
     new_line;
  .label1;
     Lit = true;
     player = cretin;
     actor = player;
     move player to location;
     LookSub();
     CommandLoop();
     jump label2;
]

[ ThingAction obj ind_obj=1 UNUSED ;
     if( noun ~= no_such_thing || second ~= no_such_thing ) ?label1;
     print_ret "Those things aren't here!";
  .label1;
     if( noun ~= no_such_thing ) ?label2;
     obj = P_prso;
     jump label3;
  .label2;
     obj = P_prsi;
     ind_obj = 0;
  .label3;
     P_cont = 0;
     P_unknown1 = 0;
     if( player ~= actor ) ?label4;
     print "You can't see any";
     Print_no_see(ind_obj);
     print_ret " here!";
  .label4;
     print "The ";
     print (object) player;
     print " seems confused. ~I don't see any";
     Print_no_see(ind_obj);
     print_ret " here!~";
]

! [ 122 bytes missing between routines ]

[ Print_no_see lv0 ptr ;
     if( ~~g69 ) ?label1;
     if( ~~Tmp_p_adj ) ?label2;
     print " ";
     print (string) Tmp_p_adjn;
  .label2;
     if( ~~Tmp_p_name ) rfalse;
     print " ";
     print (string) Tmp_p_name;
     rtrue;
  .label1;
     if( ~~lv0 ) ?label3;
     ptr = P_itbl-->6;
     return UNKNOWN_R3(ptr, P_itbl-->7, 0);
  .label3;
     ptr = P_itbl-->8;
     return UNKNOWN_R3(ptr, P_itbl-->9, 0);
]

[ Zork2_deletion UNUSED UNUSED2 ;
     rfalse;
]

! [ 924 bytes missing between routines ]

[ Queue rtn ticks cint ;
     cint = QueueInterrupt(rtn);
     cint-->1 = ticks;
     return cint;
]

[ QueueInterrupt rtn int2flag end c int ;
     end = C_table + 180;
     c = C_table + C_ints;
  .label4;
     if( c ~= end ) ?label1;
     C_ints = C_ints - 6;
     if( ~~int2flag ) ?label2;
     C_ints2 = C_ints2 - 6;
  .label2;
     int = C_table + C_ints;
     int-->2 = rtn;
     return int;
  .label1;
     if( (c-->2) ~= rtn ) ?label3;
     return c;
  .label3;
     c = c + 6;
     jump label4;
]

[ Clocker c end tick flag ;
     if( ~~Clock_wait ) ?label1;
     Clock_wait = 0;
     rfalse;
  .label1;
     c = C_table + (~~P_won ? C_ints2 : C_ints);
     end = C_table + 180;
  .label8;
     if( c ~= end ) ?label4;
     if( ++turns <= 999 ) ?label5;
     turns = 0;
  .label5;
     return flag;
  .label4;
     if( ~~(c-->0) ) ?label6;
     tick = c-->1;
     if( tick ) ?label7;
     jump label6;
  .label7;
     c-->1 = (tick - 1);
     if( tick > 1 || ~~(c-->2)() ) ?label6;
     flag = 1;
  .label6;
     c = c + 6;
     jump label8;
]

[ CommandLoop icnt ocnt num cnt obj tbl v ptbl obj1 tmp ;
  .label40;
     cnt = 0;
     obj = 0;
     ptbl = 1;
     P_won = Parser();
     if( ~~P_won ) ?label1;
     icnt = P_prsi-->P_matchlen;
     ocnt = P_prso-->P_matchlen;
     if( ocnt ) ?label2;
    @push            ocnt
     jump label3;
  .label2;
     if( ocnt <= 1 ) ?label4;
     tbl = P_prso;
     if( icnt ) ?label5;
     obj = 0;
     jump label6;
  .label5;
     obj = P_prsi-->1;
  .label6;
    @push            ocnt
     jump label3;
  .label4;
     if( icnt <= 1 ) ?label7;
     ptbl = 0;
     tbl = P_prsi;
     obj = P_prso-->1;
    @push            icnt
     jump label3;
  .label7;
    @push            1
  .label3;
     num = [UNDERFLOW];
     if( obj || icnt ~= 1 ) ?label8;
     obj = P_prsi-->1;
  .label8;
     if( Verb ~= ##Walk ) ?label9;
     v = Perform(Verb, noun);
     jump label10;
  .label9;
     if( num ) ?label11;
     if( (P_syntax->0 & 3) ) ?label12;
     v = Perform(Verb);
     noun = 0;
     jump label10;
  .label12;
     if( Lit ) ?label13;
     print "It's too dark to see.";
     new_line;
     jump label10;
  .label13;
     print "It's not clear what you're referring to.";
     new_line;
     v = 0;
     jump label10;
  .label11;
     Obs_not_here = 0;
     g7b = 0;
     if( num <= 1 ) ?label14;
     g7b = 1;
  .label14;
     tmp = 0;
  .label30;
     if( ++cnt <= num ) ?label15;
     if( Obs_not_here <= 0 ) ?label16;
     print "The ";
     if( Obs_not_here == num ) ?label17;
     print "other ";
  .label17;
     print "object";
     if( Obs_not_here == 1 ) ?label18;
     print "s";
  .label18;
     print " that you mentioned ";
     if( Obs_not_here == 1 ) ?label19;
     print "are";
     jump label20;
  .label19;
     print "is";
  .label20;
     print "n't here.";
     new_line;
     jump label10;
  .label16;
     if( tmp ) ?label10;
     print "There's nothing here you can take.";
     new_line;
     jump label10;
  .label15;
     if( ~~ptbl ) ?label21;
     obj1 = P_prso-->cnt;
     jump label22;
  .label21;
     obj1 = P_prsi-->cnt;
  .label22;
     noun = ((~~ptbl ? obj : obj1));
     second = ((~~ptbl ? obj1 : obj));
     if( num > 1 ) ?label27;
     if( (P_itbl-->6-->0) ~= 'all' ) ?label28;
  .label27;
     if( obj1 ~= 11 ) ?label29;
     Obs_not_here++;
     jump label30;
  .label29;
     if( Verb ~= ##Take || ~~second || (P_itbl-->6-->0) ~= 'all' || noun in second ) ?label31;
     jump label30;
  .label31;
     if( P_getflags ~= 1 || Verb ~= ##Take ) ?label32;
     if( parent(obj1) == player or location ) ?label33;
     if( parent(obj1) hasnt supporter ) ?label30;
  .label33;
     if( obj1 has takeable || obj1 has trytakebit ) ?label32;
     jump label30;
  .label32;
     if( obj1 ~= 12 ) ?label34;
     print (object) LastNoun;
     jump label35;
  .label34;
     print (object) obj1;
  .label35;
     print ": ";
  .label28;
     tmp = 1;
     v = Perform(Verb, noun, second);
     if( v ~= 2 ) ?label30;
     jump label10;
  .label10;
     if( v == 2 ) ?label36;
     v = (parent(player).action)(6);
  .label36;
     if( Verb == ##Save or ##Walk or ##Again ) ?label37;
     if( Verb ~= ##Version and ##Score and ##Restore ) ?label38;
     jump label37;
  .label38;
     prev_verb = Verb;
     prev_direct = noun;
     prev_indirect = second;
  .label37;
     if( v ~= 2 ) ?label39;
     P_cont = 0;
     jump label39;
  .label1;
     P_cont = 0;
  .label39;
     if( ~~P_won || Verb == ##Superbrief or ##Brief or ##TalkTo || Verb == ##Version or ##Save or ##Verbose || Verb == ##Score or ##Restart or ##Quit ) ?label40;
     if( Verb ~= ##Restore and ##Unscript and ##Script ) ?label41;
     jump label40;
  .label41;
     v = Clocker();
     jump label40;
]

[ Perform act obj ind_obj v verbtmp objtmp indtmp ;
     verbtmp = Verb;
     objtmp = noun;
     indtmp = second;
     if( 12 ~= ind_obj and obj || LastNounPlace == location ) ?label1;
     print "I don't see what you are referring to.";
     new_line;
     return 2;
  .label1;
     if( obj ~= it_object ) ?label2;
     obj = LastNoun;
  .label2;
     if( ind_obj ~= 12 ) ?label3;
     ind_obj = LastNoun;
  .label3;
     Verb = act;
     noun = obj;
     if( ~~noun || second == it_object || Verb == ##Walk ) ?label4;
     LastNoun = noun;
     LastNounPlace = location;
  .label4;
     second = ind_obj;
     if( 11 ~= noun and second ) ?label5;
     v = ThingAction();
     if( ~~v ) ?label5;
     jump label6;
  .label5;
     obj = noun;
     ind_obj = second;
     v = (player.action)();
     if( ~~v ) ?label7;
     jump label6;
  .label7;
     v = (parent(player).action)(1);
     if( ~~v ) ?label8;
     jump label6;
  .label8;
     v = (Preactions-->act)();
     if( ~~v ) ?label9;
     jump label6;
  .label9;
     if( ~~ind_obj ) ?label10;
     v = (ind_obj.action)();
     if( ~~v ) ?label10;
     jump label6;
  .label10;
     if( ~~obj || act == 137 || ~~parent(obj) ) ?label11;
     v = (parent(obj).property2)();
     if( ~~v ) ?label11;
     jump label6;
  .label11;
     if( ~~obj || act == 137 ) ?label12;
     v = (obj.action)();
     if( ~~v ) ?label12;
     jump label6;
  .label12;
     v = (g9b-->act)();
     if( ~~v ) ?label6;
  .label6;
     Verb = verbtmp;
     noun = objtmp;
     second = indtmp;
     return v;
]

[ Parser ptr=1 word val vrb len dir nw tmpword num UNUSED cnt=65535 ;
  .label3;
     if( ++cnt <= 9 ) ?label1;
     jump label2;
  .label1;
     P_itbl-->cnt = 0;
     jump label3;
  .label2;
     g58 = 0;
     g68 = 0;
     P_prso-->P_matchlen = 0;
     P_prsi-->P_matchlen = 0;
     P_buts-->P_matchlen = 0;
     if( P_unknown1 || player == actor ) ?label4;
     player = actor;
     if( parent(player) has vehicle ) ?label5;
     location = parent(player);
  .label5;
     Lit = QueryLight(location);
  .label4;
     if( ~~P_cont ) ?label6;
     ptr = P_cont;
     if( superbrief || actor ~= player || Verb == ##Say ) ?label7;
     new_line;
  .label7;
     P_cont = 0;
     jump label8;
  .label6;
     player = actor;
     P_unknown1 = 0;
     if( parent(player) has vehicle ) ?label9;
     location = parent(player);
  .label9;
     Lit = QueryLight(location);
     if( superbrief ) ?label10;
     new_line;
  .label10;
     print ">";
     read P_inbuf P_lexv;
  .label8;
     P_len = P_lexv->1;
     if( P_len ) ?label11;
     print "I beg your pardon?";
     new_line;
     rfalse;
  .label11;
     len = P_len;
     P_dir = 0;
     P_ncn = 0;
     P_getflags = 0;
  .label40;
     if( --P_len >= 0 ) ?label12;
     P_unknown1 = 0;
     jump label13;
  .label12;
     word = P_lexv-->ptr;
     if( word ) ?label14;
     word = ParseNumber(ptr);
     if( ~~word ) ?label15;
  .label14;
     if( word ~= 'to' || vrb ~= ##verb239 ) ?label16;
     word = '"';
     jump label17;
  .label16;
     if( word ~= 'then' || vrb || P_unknown1 ) ?label17;
     P_itbl-->0 = 239;
     P_itbl-->1 = 0;
     word = '"';
  .label17;
     if( word == 'then' or '.' ) ?label18;
     if( word ~= '"' ) ?label19;
  .label18;
     if( word ~= '"' ) ?label20;
     if( ~~P_unknown1 ) ?label21;
     P_unknown1 = 0;
     jump label20;
  .label21;
     P_unknown1 = 1;
  .label20;
     if( ~~P_len ) ?label22;
     P_cont = ptr + 2;
  .label22;
     P_lexv->1 = P_len;
     jump label13;
  .label19;
     val = Wt(word, 16, 3);
     if( ~~val || vrb ~= ##Verbose and ##verb248 ) ?label23;
     if( len == 1 ) ?label24;
     if( len ~= 2 ) ?label25;
     if( vrb == ##verb248 ) ?label24;
  .label25;
     nw = P_lexv-->(ptr + 2);
     if( nw ~= 'then' and '.' and '"' ) ?label26;
     if( len >= 2 ) ?label24;
  .label26;
     if( ~~P_unknown1 || len ~= 2 ) ?label27;
     if( nw == '"' ) ?label24;
  .label27;
     if( len <= 2 || nw ~= ',' and 'and' ) ?label23;
  .label24;
     dir = val;
     if( nw ~= ',' and 'and' ) ?label28;
     P_lexv-->(ptr + 2) = 'then';
  .label28;
     if( len > 2 ) ?label29;
     P_unknown1 = 0;
     jump label13;
  .label23;
     val = Wt(word, 64, 1);
     if( ~~val || vrb ) ?label30;
     vrb = val;
     P_itbl-->0 = val;
     P_itbl-->1 = g62;
     g62-->0 = word;
     num = ptr * 2 + 2;
     g62->2 = (P_lexv->num);
     g62->3 = (P_lexv->(num + 1));
     jump label29;
  .label30;
     val = Wt(word, 8, 0);
     if( val ) ?label31;
     if( word == 'all' or 'one' || Wt(word, 32) ) ?label32;
     if( ~~Wt(word, 128) ) ?label33;
  .label32;
     val = 0;
  .label31;
     if( P_len <= 0 || (P_lexv-->(ptr + 2)) ~= 'of' || val || word == 'all' or 'one' or 'a' ) ?label34;
     jump label29;
  .label34;
     if( ~~val ) ?label35;
     if( ~~P_len ) ?label36;
     if( (P_lexv-->(ptr + 2)) ~= 'then' and '.' ) ?label35;
  .label36;
     if( P_ncn >= 2 ) ?label29;
     P_itbl-->2 = val;
     P_itbl-->3 = word;
     jump label29;
  .label35;
     if( P_ncn ~= 2 ) ?label37;
     print "There were too many nouns in that sentence.";
     new_line;
     rfalse;
  .label37;
     P_ncn++;
     ptr = Clause(ptr, val, word);
     if( ~~ptr ) rfalse;
     if( ptr >= 0 ) ?label29;
     P_unknown1 = 0;
     jump label13;
  .label33;
     if( ~~Wt(word, 4) ) ?label38;
     jump label29;
  .label38;
     if( vrb ~= ##verb239 || ~~Wt(word, 64, 1) ) ?label39;
     print "Please consult your manual for the correct way to talk to other people or creatures.";
     new_line;
     rfalse;
  .label39;
     WrongUsage(ptr);
     rfalse;
  .label15;
     UnknownWord(ptr);
     rfalse;
  .label29;
     tmpword = word;
     ptr = ptr + 2;
     jump label40;
  .label13;
     if( ~~dir ) ?label41;
     Verb = 137;
     noun = dir;
     Direction = dir;
     return 1;
  .label41;
     Direction = 0;
     if( ~~g69 ) ?label42;
     UNKNOWN_R1();
  .label42;
     if( ~~SyntaxCheck() ) rfalse;
     if( ~~SnarfObjects() ) rfalse;
     if( ~~ManyCheck() ) rfalse;
     if( ~~TakeCheck() ) rfalse;
     rtrue;
]

[ Wt ptr bit b1=5 offset=5 type ;
     type = ptr->4;
     if( (type & bit) ~= bit ) rfalse;
     if( b1 > 4 ) rtrue;
     type = type & 3;
     if( type == b1 ) ?label1;
     offset++;
  .label1;
     return ptr->offset;
]

[ Clause ptr val word off num lv5 lv6=1 lv7 tmpword lv9 ;
     off = (P_ncn - 1) * 2;
     if( ~~val ) ?label1;
     num = 2 + off;
     P_itbl-->num = val;
     P_itbl-->(num + 1) = word;
     ptr = ptr + 2;
     jump label2;
  .label1;
     P_len++;
  .label2;
     if( P_len ) ?label3;
     P_ncn--;
     return -1;
  .label3;
     num = 6 + off;
     P_itbl-->num = (P_lexv + ptr * 2);
     if( (P_lexv-->ptr) ~= 'the' and 'a' and 'an' ) ?label4;
     P_itbl-->num = (P_itbl-->num + 4);
  .label4;
     if( --P_len >= 0 ) ?label5;
     lv9 = num + 1;
     P_itbl-->lv9 = (P_lexv + ptr * 2);
     return -1;
  .label5;
     word = P_lexv-->ptr;
     if( word ) ?label6;
     word = ParseNumber(ptr);
     if( ~~word ) ?label7;
  .label6;
     if( P_len ) ?label8;
     lv7 = 0;
     jump label9;
  .label8;
     lv7 = P_lexv-->(ptr + 2);
  .label9;
     if( word ~= 'and' and ',' ) ?label10;
     lv5 = 1;
     jump label11;
  .label10;
     if( word ~= 'all' and 'one' ) ?label12;
     if( lv7 ~= 'of' ) ?label11;
     P_len--;
     ptr = ptr + 2;
     jump label11;
  .label12;
     if( word == 'then' or '.' ) ?label13;
     if( ~~Wt(word, 8) || ~~(P_itbl-->0) || lv6 ) ?label14;
  .label13;
     P_len++;
     lv9 = num + 1;
     P_itbl-->lv9 = (P_lexv + ptr * 2);
     return (ptr - 2);
  .label14;
     if( ~~Wt(word, 128) ) ?label15;
     if( P_len <= 0 || lv7 ~= 'of' || word == 'all' or 'one' ) ?label16;
     jump label11;
  .label16;
     if( ~~Wt(word, 32, 2) || ~~lv7 || ~~Wt(lv7, 128) ) ?label17;
     jump label11;
  .label17;
     if( lv5 || lv7 == 'but' or 'except' || lv7 == 'and' or ',' ) ?label18;
     lv9 = num + 1;
     P_itbl-->lv9 = (P_lexv + (ptr + 2) * 2);
     return ptr;
  .label18;
     lv5 = 0;
     jump label11;
  .label15;
     if( g68 || g69 ) ?label19;
     if( ~~(P_itbl-->0) ) ?label20;
  .label19;
     if( Wt(word, 32) ) ?label11;
     if( ~~Wt(word, 4) ) ?label20;
     jump label11;
  .label20;
     if( ~~lv5 ) ?label21;
     if( Wt(word, 16) ) ?label22;
     if( ~~Wt(word, 64) ) ?label21;
  .label22;
     ptr = ptr - 4;
     P_lexv-->(ptr + 2) = 'then';
     P_len = P_len + 2;
     jump label11;
  .label21;
     if( ~~Wt(word, 8) ) ?label23;
     jump label11;
  .label23;
     WrongUsage(ptr);
     rfalse;
  .label7;
     UnknownWord(ptr);
     rfalse;
  .label11;
     tmpword = word;
     lv6 = 0;
     ptr = ptr + 2;
     jump label4;
]

[ ParseNumber ptr len nptr digit num clocknum mult ;
     len = (P_lexv + ptr * 2)->2;
     nptr = (P_lexv + ptr * 2)->3;
  .label5;
     if( --len >= 0 ) ?label1;
     jump label2;
  .label1;
     digit = P_inbuf->nptr;
     if( digit ~= 58 ) ?label3;
     clocknum = num;
     num = 0;
     jump label4;
  .label3;
     if( num > 10000 ) rfalse;
     if( digit >= 58 ) rfalse;
     if( digit <= 47 ) rfalse;
     mult = num * 10;
     num = mult + digit - 48;
  .label4;
     nptr++;
     jump label5;
  .label2;
     P_lexv-->ptr = 'intnum';
     if( num > 1000 ) rfalse;
     if( ~~clocknum ) ?label6;
     if( clocknum >= 8 ) ?label7;
     clocknum = clocknum + 12;
     jump label8;
  .label7;
     if( clocknum > 23 ) rfalse;
  .label8;
     num = num + clocknum * 60;
  .label6;
     second_intnum = num;
     return 'intnum';
]

[ UNKNOWN_R1 cnt=65535 lv1 lv2 lv3 lv4 lv5 word UNUSED ;
     g69 = 0;
     if( ~~Wt(P_itbl-->1-->0, 32, 2) ) ?label1;
     lv5 = 1;
  .label1;
     lv2 = P_itbl-->0;
     if( ~~lv2 || lv5 ) ?label2;
     if( lv2 ~= (P_itbl_2-->0) ) rfalse;
  .label2;
     if( P_ncn == 2 ) rfalse;
     if( (P_itbl_2-->6) ~= 1 ) ?label3;
     lv1 = P_itbl-->2;
     if( lv1 == (P_itbl_2-->2) ) ?label4;
     if( lv1 ) rfalse;
  .label4;
     if( ~~lv5 ) ?label5;
     P_itbl_2-->6 = (P_lexv + 2);
     P_itbl_2-->7 = (P_lexv + 6);
     jump label6;
  .label5;
     P_itbl_2-->6 = (P_itbl-->6);
     P_itbl_2-->7 = (P_itbl-->7);
     jump label6;
  .label3;
     if( (P_itbl_2-->8) ~= 1 ) ?label7;
     lv1 = P_itbl-->2;
     if( lv1 == (P_itbl_2-->4) ) ?label8;
     if( lv1 ) rfalse;
  .label8;
     if( ~~lv5 ) ?label9;
     P_itbl-->6 = (P_lexv + 2);
     P_itbl-->7 = (P_lexv + 6);
  .label9;
     P_itbl_2-->8 = (P_itbl-->6);
     P_itbl_2-->9 = (P_itbl-->7);
     P_ncn = 2;
     jump label6;
  .label7;
     if( ~~g67 ) ?label6;
     if( P_ncn == 1 || lv5 ) ?label10;
     g67 = 0;
     rfalse;
  .label10;
     lv3 = P_itbl-->6;
     if( ~~lv5 ) ?label11;
     lv3 = P_lexv + 2;
     lv5 = 0;
  .label11;
     lv4 = P_itbl-->7;
  .label18;
     word = lv3-->0;
     if( lv3 ~= lv4 ) ?label12;
     if( ~~lv5 ) ?label13;
     UNKNOWN_R2(lv5);
     jump label6;
  .label13;
     g67 = 0;
     rfalse;
  .label12;
     if( lv5 ) ?label14;
     if( ((word->4) & 32) == 32 ) ?label15;
     if( word ~= 'all' and 'one' ) ?label14;
  .label15;
     lv5 = word;
     jump label16;
  .label14;
     if( ((word->4) & 128) == 128 ) ?label17;
     if( word ~= 'one' ) ?label16;
  .label17;
     if( word ~= P_select_adj and 'one' ) rfalse;
     UNKNOWN_R2(lv5);
     jump label6;
  .label16;
     lv3 = lv3 + 4;
     if( lv4 ) ?label18;
     lv4 = lv3;
     P_ncn = 1;
     P_itbl-->6 = (lv3 - 4);
     P_itbl-->7 = lv3;
     jump label18;
  .label6;
     if( ++cnt <= 9 ) ?label19;
     g68 = 1;
     rtrue;
  .label19;
     P_itbl-->cnt = (P_itbl_2-->cnt);
     jump label6;
]

[ UNKNOWN_R2 lv0 ;
     P_itbl-->0 = (P_itbl_2-->0);
     g72 = P_itbl_2;
     UNKNOWN_R5(g67, g67 + 1, lv0);
     if( ~~(P_itbl_2-->8) ) ?label1;
     P_ncn = 2;
  .label1;
     g67 = 0;
     rtrue;
]

[ WordPrint cnt buf ;
  .label1;
     if( --cnt < 0 ) rtrue;
     print (char) (P_inbuf->buf);
     buf++;
     jump label1;
]

[ UnknownWord ptr buf word ;
     if( Verb ~= ##Say ) ?label1;
     print "Nothing happens.";
     new_line;
     rfalse;
  .label1;
     print "I don't know the word ~";
     buf = ptr * 2;
     word = (P_lexv + buf)->2;
     WordPrint(word, (P_lexv + buf)->3);
     print "~.";
     new_line;
     P_unknown1 = 0;
     g69 = 0;
     return g69;
]

[ WrongUsage ptr buf word ;
     if( Verb ~= ##Say ) ?label1;
     print "Nothing happens.";
     new_line;
     rfalse;
  .label1;
     print "You used the word ~";
     buf = ptr * 2;
     word = (P_lexv + buf)->2;
     WordPrint(word, (P_lexv + buf)->3);
     print "~ in a way that I don't understand.";
     new_line;
     P_unknown1 = 0;
     g69 = 0;
     return g69;
]

[ SyntaxCheck grammar num_obs lv2 lv3 lv4 lv5 lv6 vrb lv8 lv9 lv10 ;
     vrb = P_itbl-->0;
     if( vrb ) ?label1;
     print "There was no verb in that sentence!";
     new_line;
     rfalse;
  .label1;
     grammar = Verbs-->(255 - vrb);
     num_obs = grammar->0;
     grammar = 1 + grammar;
  .label10;
     lv2 = grammar->0 & 3;
     if( P_ncn <= lv2 ) ?label2;
     jump label3;
  .label2;
     if( lv2 < 1 || P_ncn ) ?label4;
     lv6 = P_itbl-->2;
     if( ~~lv6 ) ?label5;
     if( lv6 ~= (grammar->1) ) ?label4;
  .label5;
     lv4 = grammar;
     jump label3;
  .label4;
     lv10 = grammar->1;
     if( lv10 ~= (P_itbl-->2) ) ?label3;
     if( lv2 ~= 2 || P_ncn ~= 1 ) ?label6;
     lv5 = grammar;
     jump label3;
  .label6;
     lv10 = grammar->2;
     if( lv10 ~= (P_itbl-->4) ) ?label3;
     SyntaxFound(grammar);
     rtrue;
  .label3;
     if( --num_obs >= 1 ) ?label7;
     if( lv4 ) ?label8;
     if( ~~lv5 ) ?label9;
     jump label8;
  .label9;
     print "That sentence isn't one I recognize.";
     new_line;
     rfalse;
  .label7;
     grammar = grammar + 8;
     jump label10;
  .label8;
     if( ~~lv4 ) ?label11;
     lv9 = lv4->3;
     lv10 = lv4->5;
     lv3 = GWim(lv9, lv10, lv4->1);
     if( ~~lv3 ) ?label11;
     P_prso-->P_matchlen = 1;
     P_prso-->1 = lv3;
     return SyntaxFound(lv4);
  .label11;
     if( ~~lv5 ) ?label12;
     lv9 = lv5->4;
     lv10 = lv5->6;
     lv3 = GWim(lv9, lv10, lv5->2);
     if( ~~lv3 ) ?label12;
     P_prsi-->P_matchlen = 1;
     P_prsi-->1 = lv3;
     return SyntaxFound(lv5);
  .label12;
     if( vrb ~= ##verb172 ) ?label13;
     print "That question can't be answered.";
     new_line;
     rfalse;
  .label13;
     if( player == actor ) ?label14;
     return NoRefer();
  .label14;
     Clear_itbl(lv4, lv5);
     print "What do you want to ";
     lv8 = P_itbl_2-->1;
     if( lv8 ) ?label15;
     print "tell";
     jump label16;
  .label15;
     if( (g62->2) ) ?label17;
     print (string) (lv8-->0);
     jump label16;
  .label17;
     lv10 = lv8->2;
     WordPrint(lv10, lv8->3);
     g62->2 = 0;
  .label16;
     if( ~~lv5 ) ?label18;
     Print_which(6, 7);
  .label18;
     g69 = 1;
     if( ~~lv4 ) ?label19;
     lv4->1;
     jump label20;
  .label20;
     PrepPrint(lv5->2);
     print "?";
     new_line;
     rfalse;
]

[ NoRefer ;
     print "~I don't understand! What are you referring to?~";
     new_line;
     rfalse;
]

[ Clear_itbl lv0 lv1 cnt=65535 ;
     sentence-->P_matchlen = 0;
     g72 = P_itbl;
  .label3;
     if( ++cnt <= 9 ) ?label1;
     jump label2;
  .label1;
     P_itbl_2-->cnt = (P_itbl-->cnt);
     jump label3;
  .label2;
     if( P_ncn ~= 2 ) ?label4;
     UNKNOWN_R5(8, 9);
  .label4;
     if( P_ncn < 1 ) ?label5;
     UNKNOWN_R5(6, 7);
  .label5;
     if( ~~lv0 ) ?label6;
     P_itbl_2-->2 = (lv0->1);
     P_itbl_2-->6 = 1;
     rtrue;
  .label6;
     if( ~~lv1 ) rfalse;
     P_itbl_2-->4 = (lv1->2);
     P_itbl_2-->8 = 1;
     rtrue;
]

[ Print_which ndx lv1 lv2=1 lv3 ;
     lv3 = P_itbl-->ndx;
     return UNKNOWN_R3(lv3, P_itbl-->lv1, lv2);
]

[ UNKNOWN_R3 lv0 lv1 lv2 lv3 lv4 lv5=1 lv6 lv7 ;
  .label10;
     if( lv0 == lv1 ) rtrue;
     if( ~~lv3 ) ?label1;
     lv3 = 0;
     jump label2;
  .label1;
     print " ";
  .label2;
     lv4 = lv0-->0;
     if( lv4 ~= '.' ) ?label3;
     lv3 = 1;
     jump label4;
  .label3;
     if( ~~lv5 || lv6 || ~~lv2 ) ?label5;
     print "the ";
  .label5;
     if( g69 ) ?label6;
     if( ~~g68 ) ?label7;
  .label6;
     print (string) lv4;
     jump label8;
  .label7;
     if( lv4 ~= 'it' || LastNounPlace ~= location ) ?label9;
     print (object) LastNoun;
     jump label8;
  .label9;
     lv7 = lv0->2;
     WordPrint(lv7, lv0->3);
  .label8;
     lv5 = 0;
  .label4;
     lv0 = lv0 + 4;
     jump label10;
]

! [ 44 bytes missing between routines ]

[ PrepPrint ndx prep ;
     if( ~~ndx ) rfalse;
     print " ";
     prep = PrepositionFind(ndx);
     print (string) prep;
     rtrue;
]

[ UNKNOWN_R5 lv0 lv1 lv2 lv3 lv4 ;
     lv3 = g72-->lv0;
     lv4 = g72-->lv1;
     P_itbl_2-->lv0 = (sentence + sentence-->P_matchlen * 2 + 2);
  .label3;
     if( lv3 ~= lv4 ) ?label1;
     P_itbl_2-->lv1 = (sentence + sentence-->P_matchlen * 2 + 2);
     rtrue;
  .label1;
     if( ~~lv2 || P_select_adj ~= (lv3-->0) ) ?label2;
     Backup(lv2);
  .label2;
     Backup(lv3-->0);
     lv3 = lv3 + 4;
     jump label3;
]

[ Backup word len ;
     len = sentence-->P_matchlen + 2;
     sentence-->(len - 1) = word;
     sentence-->len = 0;
     sentence-->P_matchlen = len;
     rtrue;
]

[ PrepositionFind prep cnt len ;
     len = Prepositions-->0 * 2;
  .label1;
     if( ++cnt > len ) rfalse;
     if( (Prepositions-->cnt) ~= prep ) ?label1;
     return (Prepositions-->(cnt - 1));
]

[ SyntaxFound syn ;
     P_syntax = syn;
     Verb = syn->7;
     return Verb;
]

[ GWim gbit lbit prep obj ;
     if( gbit ~= 18 ) ?label1;
     return 82;
  .label1;
     P_gwimbit = gbit;
     P_slocbits = lbit;
     P_merge-->P_matchlen = 0;
     if( ~~GetDirectObject(P_merge, 0) ) ?label2;
     P_gwimbit = 0;
     if( (P_merge-->P_matchlen) ~= 1 ) rfalse;
     obj = P_merge-->1;
     if( obj == you ) rfalse;
     print "(";
     if( ~~prep ) ?label3;
     prep = PrepositionFind(prep);
     print (string) prep;
     if( prep ~= 'out' ) ?label4;
     print " of";
  .label4;
     if( obj ~= pair_of_hands ) ?label5;
     print " your hands)";
     new_line;
     jump label3;
  .label5;
     print " the ";
  .label3;
     if( obj == pair_of_hands ) ?label6;
     print (object) obj;
     print ")";
     new_line;
  .label6;
     return obj;
  .label2;
     P_gwimbit = 0;
     rfalse;
]

[ SnarfObjects ptr ;
     ptr = P_itbl-->6;
     if( ~~ptr ) ?label1;
     P_slocbits = P_syntax->5;
     if( ~~Snarfem(ptr, P_itbl-->7, P_prso) ) rfalse;
     if( ~~(P_buts-->P_matchlen) ) ?label1;
     P_prso = ButMerge(P_prso);
  .label1;
     ptr = P_itbl-->8;
     if( ~~ptr ) rtrue;
     P_slocbits = P_syntax->6;
     if( ~~Snarfem(ptr, P_itbl-->9, P_prsi) ) rfalse;
     if( ~~(P_buts-->P_matchlen) ) rtrue;
     if( (P_prsi-->P_matchlen) ~= 1 ) ?label2;
     P_prso = ButMerge(P_prso);
     rtrue;
  .label2;
     P_prsi = ButMerge(P_prsi);
     rtrue;
]

[ ButMerge tbl len butlen cnt=1 matches obj ntbl ;
     len = tbl-->P_matchlen;
     P_merge-->P_matchlen = 0;
  .label5;
     if( --len >= 0 ) ?label1;
     jump label2;
  .label1;
     obj = tbl-->cnt;
     if( ~~ZMemQ(obj, P_buts) ) ?label3;
     jump label4;
  .label3;
     P_merge-->(matches + 1) = obj;
     matches++;
  .label4;
     cnt++;
     jump label5;
  .label2;
     P_merge-->P_matchlen = matches;
     ntbl = P_merge;
     P_merge = tbl;
     return ntbl;
]

[ Snarfem ptr eptr tbl but UNUSED wv word nw ;
     P_getflags = 0;
     SN_tmpptr2 = ptr;
     SN_tmpptr = eptr;
     SnarfFlag = 0;
     P_buts-->P_matchlen = 0;
     tbl-->P_matchlen = 0;
     word = ptr-->0;
  .label20;
     if( ptr ~= eptr ) ?label1;
     return GetDirectObject((~~but ? tbl : but));
  .label1;
     nw = ptr-->2;
     if( word ~= 'all' ) ?label4;
     P_getflags = 1;
     if( nw ~= 'of' ) ?label5;
     ptr = ptr + 4;
     jump label5;
  .label4;
     if( word ~= 'but' and 'except' ) ?label6;
     if( ~~GetDirectObject((~~but ? tbl : but)) ) rfalse;
     but = P_buts;
     but-->P_matchlen = 0;
     jump label5;
  .label6;
     if( word ~= 'a' and 'one' ) ?label9;
     if( P_adj ) ?label10;
     P_getflags = 2;
     if( nw ~= 'of' ) ?label5;
     ptr = ptr + 4;
     jump label5;
  .label10;
     P_name = P_tmp_name;
     if( ~~GetDirectObject((~~but ? tbl : but)) ) rfalse;
     if( ~~nw ) rtrue;
     jump label5;
  .label9;
     if( word ~= 'and' and ',' || nw == 'and' or ',' ) ?label13;
     SnarfFlag = 1;
     if( GetDirectObject((~~but ? tbl : but)) ) ?label5;
     rfalse;
  .label13;
     if( ~~Wt(word, 4) ) ?label16;
     jump label5;
  .label16;
     if( word ~= 'and' and ',' ) ?label17;
     jump label5;
  .label17;
     if( word ~= 'of' ) ?label18;
     if( P_getflags ) ?label5;
     P_getflags = 4;
     jump label5;
  .label18;
     wv = Wt(word, 32, 2);
     if( ~~wv || P_adj ) ?label19;
     P_adj = wv;
     P_adjn = word;
     jump label5;
  .label19;
     if( ~~Wt(word, 128, 0) ) ?label5;
     P_name = word;
     P_tmp_name = word;
  .label5;
     if( ptr == eptr ) ?label20;
     ptr = ptr + 4;
     word = nw;
     jump label20;
]

[ GetDirectObject tbl vrb=1 bits len xbits tlen gcheck tmp UNUSED ;
     xbits = P_slocbits;
     tlen = tbl-->P_matchlen;
     if( (P_getflags & 4) == 4 ) rtrue;
     if( P_name || ~~P_adj || ~~Wt(P_adjn, 128, 0) ) ?label1;
     P_name = P_adjn;
     P_adj = 0;
  .label1;
     if( P_name || P_adj || P_getflags == 1 || P_gwimbit ) ?label2;
     if( ~~vrb ) rfalse;
     print "There seems to be a noun missing in that sentence!";
     new_line;
     rfalse;
  .label2;
     if( P_getflags ~= 1 ) ?label3;
     if( P_slocbits ) ?label4;
  .label3;
     P_slocbits = -1;
  .label4;
     P_table = tbl;
  .label15;
     if( ~~gcheck ) ?label5;
     GlobalCheck(tbl);
     jump label6;
  .label5;
     if( ~~Lit ) ?label7;
     give actor ~transparent;
     DoSL(location, 16, 32);
     give actor transparent;
  .label7;
     DoSL(actor, 128, 64);
  .label6;
     len = tbl-->P_matchlen - tlen;
     if( (P_getflags & 1) ~= 1 ) ?label8;
     jump label9;
  .label8;
     if( (P_getflags & 2) ~= 2 || ~~len ) ?label10;
     if( len == 1 ) ?label11;
     tbl-->1 = (tbl-->random(len));
     print "(How about the ";
     print (object) (tbl-->1);
     print "?)";
     new_line;
  .label11;
     tbl-->P_matchlen = 1;
     jump label9;
  .label10;
     if( len > 1 ) ?label12;
     if( len || P_slocbits == -1 ) ?label13;
  .label12;
     if( P_slocbits ~= -1 ) ?label14;
     P_slocbits = xbits;
     tmp = len;
     tbl-->P_matchlen = (tbl-->P_matchlen - len);
     jump label15;
  .label14;
     if( len ) ?label16;
     len = tmp;
  .label16;
     if( player == actor ) ?label17;
     NoRefer();
     rfalse;
  .label17;
     if( ~~vrb || ~~P_name ) ?label18;
     ClarifyWhich(tlen, len, tbl);
     g67 = ((tbl ~= P_prso ? 6 : 8));
     P_tmp_adj = P_adj;
     P_select_adj = P_name;
     Clear_itbl(0, 0);
     g69 = 1;
     jump label21;
  .label18;
     if( ~~vrb ) ?label21;
     print "There seems to be a noun missing in that sentence!";
     new_line;
  .label21;
     P_name = 0;
     P_adj = 0;
     rfalse;
  .label13;
     if( len || ~~gcheck ) ?label22;
     if( ~~vrb ) ?label23;
     if( ~~Lit ) ?label24;
     ObjFound(no_such_thing, tbl);
     Tmp_p_name = P_name;
     Tmp_p_adj = P_adj;
     Tmp_p_adjn = P_adjn;
     P_name = 0;
     P_adj = 0;
     P_adjn = 0;
     rtrue;
  .label24;
     print "It's too dark to see!";
     new_line;
  .label23;
     P_name = 0;
     P_adj = 0;
     rfalse;
  .label22;
     if( len ) ?label9;
     gcheck = 1;
     jump label15;
  .label9;
     P_slocbits = xbits;
     P_name = 0;
     P_adj = 0;
     rtrue;
]

! [ 98 bytes missing between routines ]

[ ClarifyWhich num cnt list obj lv4 ;
     lv4 = cnt;
     print "Which";
     if( g69 || g68 ) ?label1;
     if( ~~SnarfFlag ) ?label2;
  .label1;
     print " ";
     print (string) P_name;
     jump label3;
  .label2;
     if( list ~= P_prso ) ?label4;
     Print_which(6, 7, 0);
     jump label3;
  .label4;
     Print_which(8, 9, 0);
  .label3;
     print " do you mean, ";
  .label8;
     num++;
     obj = list-->num;
     print "the ";
     print (object) obj;
     if( cnt ~= 2 ) ?label5;
     if( lv4 == 2 ) ?label6;
     print ",";
  .label6;
     print " or ";
     jump label7;
  .label5;
     if( cnt <= 2 ) ?label7;
     print ", ";
  .label7;
     if( --cnt >= 1 ) ?label8;
     print_ret "?";
]

[ GlobalCheck tbl ptr rmg rmg_len cnt obj obits foo ;
     ptr = tbl-->P_matchlen;
     obits = P_slocbits;
     rmg = location.contains.&;
     if( ~~rmg ) ?label1;
     rmg_len = rmg.# - 1;
  .label3;
     obj = rmg->cnt;
     if( ~~ThisIt(obj, tbl) ) ?label2;
     ObjFound(obj, tbl);
  .label2;
     if( ++cnt <= rmg_len ) ?label3;
  .label1;
     rmg = location.pseudo.&;
     if( ~~rmg ) ?label4;
     rmg_len = rmg.# / 4 - 1;
     cnt = 0;
  .label6;
     if( P_name ~= (rmg-->(cnt * 2)) ) ?label5;
     pseudo.action = rmg-->(cnt * 2 + 1);
     foo = pseudo.action.& - 5;
     foo-->0 = (P_name-->0);
     foo-->1 = (P_name-->1);
     ObjFound(pseudo, tbl);
     jump label4;
  .label5;
     if( ++cnt <= rmg_len ) ?label6;
  .label4;
     if( (tbl-->P_matchlen) ~= ptr ) rfalse;
     P_slocbits = -1;
     P_table = tbl;
     DoSL(global_objects, 1, 1);
     P_slocbits = obits;
     if( (tbl-->P_matchlen) ) rfalse;
     if( Verb ~= ##LookIn and ##Search and ##Examine ) rfalse;
     return DoSL(rooms, 1, 1);
]

[ DoSL obj bit1 bit2 bits ;
     if( (P_slocbits & (bit1 + bit2)) ~= (bit1 + bit2) ) ?label1;
     return SearchList(obj, P_table, 1);
  .label1;
     if( (P_slocbits & bit1) ~= bit1 ) ?label2;
     return SearchList(obj, P_table, 0);
  .label2;
     if( (P_slocbits & bit2) ~= bit2 ) rtrue;
     return SearchList(obj, P_table, 2);
]

[ SearchList obj tbl lvl fls nobj ;
     if( ~~(obj = child(obj)) ) rfalse;
  .label8;
     if( lvl == 2 || ~~(obj.name.&) || ~~ThisIt(obj, tbl) ) ?label1;
     ObjFound(obj, tbl);
  .label1;
     if( lvl ~= 0 || obj has magic ) ?label2;
     if( obj hasnt supporter || ~~(nobj = child(obj)) ) ?label3;
     if( obj has open ) ?label4;
     if( obj hasnt transparent ) ?label3;
  .label4;
     if( obj hasnt supporter ) ?label5;
    @push            1
     jump label6;
  .label5;
     fls = SearchList(obj, tbl, (obj hasnt magic ? 1 : 0));
  .label3;
     if( (obj = sibling(obj)) ) ?label8;
     rtrue;
]

[ ObjFound obj tbl ptr ;
     ptr = tbl-->P_matchlen;
     tbl-->(ptr + 1) = obj;
     tbl-->P_matchlen = (ptr + 1);
     rtrue;
]

[ TakeCheck ;
     if( ~~ITakeCheck(P_prso, P_syntax->5) ) rfalse;
     return ITakeCheck(P_prsi, P_syntax->6);
]

[ ITakeCheck tbl bits ptr obj taken ;
     ptr = tbl-->P_matchlen;
     if( ~~ptr ) rtrue;
     if( (bits & 2) == 2 ) ?label1;
     if( (bits & 8) ~= 8 ) rtrue;
  .label1;
     if( --ptr < 0 ) rtrue;
     obj = tbl-->(ptr + 1);
     if( obj ~= it_object ) ?label2;
     obj = LastNoun;
  .label2;
     if( InPlayer(obj) || obj == pair_of_hands ) ?label1;
     noun = obj;
     if( obj hasnt trytakebit ) ?label3;
     taken = 1;
     jump label4;
  .label3;
     if( player == cretin ) ?label5;
     taken = 0;
     jump label4;
  .label5;
     if( (bits & 8) ~= 8 || ITake(0) ~= 1 ) ?label6;
     taken = 0;
     jump label4;
  .label6;
     taken = 1;
  .label4;
     if( ~~taken || (bits & 2) ~= 2 ) ?label7;
     if( obj ~= no_such_thing ) ?label8;
     print "You don't have that!";
     new_line;
     rfalse;
  .label8;
     print "You don't have the ";
     print (object) obj;
     print ".";
     new_line;
     rfalse;
  .label7;
     if( taken || player ~= cretin ) ?label1;
     print "(Taken)";
     new_line;
     jump label1;
]

[ ManyCheck loss tmp word ;
     if( (P_prso-->P_matchlen) <= 1 || ((P_syntax->5) & 4) == 4 ) ?label1;
     loss = 1;
     jump label2;
  .label1;
     if( (P_prsi-->P_matchlen) <= 1 || ((P_syntax->6) & 4) == 4 ) ?label2;
     loss = 2;
  .label2;
     if( ~~loss ) rtrue;
     print "You can't use multiple ";
     if( loss ~= 2 ) ?label3;
     print "in";
  .label3;
     print "direct objects with ~";
     tmp = P_itbl-->1;
     if( tmp ) ?label4;
     print "tell";
     jump label5;
  .label4;
     if( g69 ) ?label6;
     if( ~~g68 ) ?label7;
  .label6;
     print (string) (tmp-->0);
     jump label5;
  .label7;
     word = tmp->2;
     WordPrint(word, tmp->3);
  .label5;
     print "~.";
     new_line;
     rfalse;
]

[ ZMemQ itm tbl size=65535 cnt=1 ;
     if( ~~tbl ) rfalse;
     if( size < 0 ) ?label1;
     cnt = 0;
     jump label2;
  .label1;
     size = tbl-->0;
  .label2;
     if( itm == (tbl-->cnt) ) rtrue;
     if( ++cnt <= size ) ?label2;
     rfalse;
]

[ ZMemQB itm tbl size cnt ;
  .label1;
     if( itm == (tbl->cnt) ) rtrue;
     if( ++cnt <= size ) ?label1;
     rfalse;
]

[ QueryLight room darkflag=1 oldroom islit ;
     if( ~~Always_lit ) ?label1;
     if( player == actor ) rtrue;
  .label1;
     P_gwimbit = 20;
     oldroom = location;
     location = room;
     if( ~~darkflag || room hasnt light ) ?label2;
     islit = 1;
     jump label3;
  .label2;
     P_merge-->P_matchlen = 0;
     P_table = P_merge;
     P_slocbits = -1;
     if( oldroom ~= room ) ?label4;
     DoSL(player, 1, 1);
     if( player == actor || actor notin room ) ?label4;
     DoSL(actor, 1, 1);
  .label4;
     DoSL(room, 1, 1);
     if( (P_table-->P_matchlen) <= 0 ) ?label3;
     islit = 1;
  .label3;
     location = oldroom;
     P_gwimbit = 0;
     return islit;
]

! [ 80 bytes missing between routines ]

[ ThisIt obj UNUSED syns UNUSED2 ;
     if( obj has concealed ) rfalse;
     if( ~~P_name ) ?label1;
     syns = obj.name.&;
     if( ~~ZMemQ(P_name, syns, syns.# / 2 - 1) ) rfalse;
  .label1;
     if( ~~P_adj ) ?label2;
     syns = obj.adjectives.&;
     if( ~~syns ) rfalse;
     if( ~~ZMemQB(P_adj, syns, syns.# - 1) ) rfalse;
  .label2;
     if( ~~P_gwimbit ) rtrue;
     if( obj has P_gwimbit ) rtrue;
     rfalse;
]

! [ 374 bytes missing between routines ]

[ VersionSub offset=17 ;
     print "ZORK I: The Great Underground Empire^Copyright (c) 1981, 1982, 1983 Infocom, Inc. ";
     print "All rights reserved.";
     new_line;
     if( ~~($0->1 & 8) ) ?label1;
     print "Licensed to Tandy Corporation.";
     new_line;
  .label1;
     print "ZORK is a registered trademark of Infocom, Inc.^Revision ";
     print (number) ($0-->1 & 2047);
     print " / Serial number ";
  .label4;
     if( ++offset <= 23 ) ?label2;
     jump label3;
  .label2;
     print (char) ($0->offset);
     jump label4;
  .label3;
     new_line;
     rtrue;
]

! [ 3660 bytes missing between routines ]

[ LookSub ;
     if( ~~DescribeRoom(1) ) rfalse;
     return DescribeObjects(1);
]

! [ 3716 bytes missing between routines ]

[ DescribeRoom look v text environment ;
     v = (~~look ? verbose : look);
     if( Lit ) ?label3;
     print "It is pitch black.";
     if( Grue_Repellent ) ?label4;
     print " You are likely to be eaten by a grue.";
  .label4;
     new_line;
     Zork2_deletion();
     return 0;
  .label3;
     if( location has visited ) ?label5;
     give location visited;
     v = 1;
  .label5;
     if( location hasnt maze_room ) ?label6;
     give location ~visited;
  .label6;
     if( location notin rooms ) ?label7;
     print (object) location;
     environment = parent(player);
     if( environment hasnt vehicle ) ?label8;
     print ", in the ";
     print (object) environment;
  .label8;
     new_line;
  .label7;
     if( look ) ?label9;
     if( superbrief ) rtrue;
  .label9;
     environment = parent(player);
     if( ~~v ) ?label10;
     if( (location.action)(3) ) rtrue;
  .label10;
     if( ~~v ) ?label11;
     text = location.description;
     if( ~~text ) ?label11;
     print (string) text;
     new_line;
     jump label12;
  .label11;
     (location.action)(4);
  .label12;
     if( location == environment ) rtrue;
     if( environment hasnt vehicle ) rtrue;
     (environment.action)(3);
     rtrue;
]

[ DescribeObjects v ;
     if( ~~Lit ) ?label1;
     if( ~~child(location) ) rfalse;
     v = (~~v ? verbose : v);
     return PrintCont(location, v, -1);
  .label1;
     print_ret "Only bats can see in the dark. And you're not one.";
]

[ DescribeOb obj v level text av ;
     Last_ob_longdesc = obj;
     if( level ) ?label1;
     if( (obj.initial2)(5) ) rtrue;
  .label1;
     if( level ) ?label2;
     if( obj has visited ) ?label3;
     text = obj.initial;
     if( text ) ?label4;
  .label3;
     text = obj.description;
     if( ~~text ) ?label2;
  .label4;
     print (string) text;
     jump label5;
  .label2;
     if( level ) ?label6;
     print "There is a ";
     print (object) obj;
     print " here";
     if( obj hasnt light ) ?label7;
     print " (providing light)";
  .label7;
     print ".";
     jump label5;
  .label6;
     print (string) (Indents-->level);
     print "A ";
     print (object) obj;
     if( obj hasnt light ) ?label8;
     print " (providing light)";
     jump label5;
  .label8;
     if( obj hasnt clothing ) ?label5;
     print " (being worn)";
  .label5;
     Zork2_deletion();
     if( level ) ?label9;
     av = parent(player);
     if( ~~av || av hasnt vehicle ) ?label9;
     print " (outside the ";
     print (object) av;
     print ")";
  .label9;
     new_line;
     if( ~~CanSeeContents(obj) ) rfalse;
     if( ~~child(obj) ) rfalse;
     return PrintCont(obj, v, level);
]

! [ 82 bytes missing between routines ]

[ PrintCont obj v level itm first av environment text pv inv ;
     if( ~~(itm = child(obj)) ) rtrue;
     environment = parent(player);
     if( ~~environment || environment hasnt vehicle ) ?label1;
     jump label2;
  .label1;
     environment = 0;
  .label2;
     first = 1;
     av = 1;
     if( player ~= obj and parent(obj) ) ?label3;
     inv = 1;
     jump label4;
  .label3;
     if( itm ) ?label5;
     jump label4;
  .label5;
     if( itm ~= environment ) ?label6;
     pv = 1;
     jump label7;
  .label6;
     if( itm ~= player ) ?label8;
     jump label7;
  .label8;
     if( itm has concealed || itm has visited ) ?label7;
     text = itm.initial;
     if( ~~text ) ?label7;
     if( itm has scenery ) ?label9;
     print (string) text;
     new_line;
     av = 0;
  .label9;
     if( ~~CanSeeContents(itm) || (parent(itm).initial2) || ~~child(itm) || ~~PrintCont(itm, v, 0) ) ?label7;
     first = 0;
  .label7;
     if( (itm = sibling(itm)) ) ?label10;
  .label10;
     jump label3;
  .label4;
     if( (itm = child(obj)) ) ?label11;
  .label11;
     if( itm ) ?label12;
     if( ~~pv || ~~environment || ~~child(environment) ) ?label13;
     level++;
     PrintCont(environment, v, level);
     jump label13;
  .label12;
     if( itm ~= environment and 4 ) ?label14;
     jump label15;
  .label14;
     if( itm has concealed ) ?label15;
     if( inv || itm has visited ) ?label16;
     if( (itm.initial) ) ?label15;
  .label16;
     if( itm has scenery ) ?label17;
     if( ~~first ) ?label18;
     if( ~~Firster(obj, level) || level >= 0 ) ?label19;
     level = 0;
  .label19;
     level++;
     first = 0;
  .label18;
     if( level >= 0 ) ?label20;
     level = 0;
  .label20;
     DescribeOb(itm, v, level);
     jump label15;
  .label17;
     if( ~~child(itm) || ~~CanSeeContents(itm) ) ?label15;
     level++;
     PrintCont(itm, v, level);
  .label15;
     if( (itm = sibling(itm)) ) ?label21;
  .label21;
     jump label11;
  .label13;
     if( ~~first ) rtrue;
     if( ~~av ) rtrue;
     rfalse;
]

[ Firster obj level ;
     if( obj ~= trophy_case ) ?label1;
     print_ret "Your collection of treasures consists of:";
  .label1;
     if( obj ~= player ) ?label2;
     print_ret "You are carrying:";
  .label2;
     if( obj in rooms ) rfalse;
     if( level <= 0 ) ?label3;
     print (string) (Indents-->level);
  .label3;
     if( obj hasnt supporter ) ?label4;
     print "Sitting on the ";
     print (object) obj;
     print_ret " is: ";
  .label4;
     if( obj hasnt animate ) ?label5;
     print "The ";
     print (object) obj;
     print_ret " is holding: ";
  .label5;
     print "The ";
     print (object) obj;
     print_ret " contains:";
]

[ CanSeeContents obj ;
     if( obj has concealed ) rfalse;
     if( obj has transparent ) rtrue;
     if( obj has open ) rtrue;
     rfalse;
]

[ ScoreUPD val ;
     Base_score = Base_score + val;
     score = score + val;
     if( score ~= 350 ) rtrue;
     if( Won_flag ) rtrue;
     Won_flag = true;
     give ancient_map ~concealed;
     give west_of_house ~visited;
     print_ret "An almost inaudible voice whispers in your ear, ~Look to your treasures for the final secret.~";
]

[ ScoreObj obj val ;
     val = obj.take_value;
     if( val <= 0 ) rfalse;
     ScoreUPD(val);
     obj.take_value = 0;
     rtrue;
]

! [ 32 bytes missing between routines ]

[ ITake vb=1 num_items UNUSED weight ;
     if( ~~Dead ) ?label1;
     if( ~~vb ) rfalse;
     print "Your hand passes through its object.";
     new_line;
     rfalse;
  .label1;
     if( noun has takeable ) ?label2;
     if( ~~vb ) rfalse;
     print (string) ComplexPickOne(Yuks_table);
     new_line;
     rfalse;
  .label2;
     if( Zork2_deletion() ) rfalse;
     if( parent(noun) hasnt container ) ?label3;
     if( parent(noun) hasnt open ) rfalse;
  .label3;
     if( parent(noun) in player ) ?label4;
     weight = QueryWeight(noun);
     if( (weight + QueryWeight(player)) <= Load_max ) ?label4;
     if( ~~vb ) ?label5;
     print "Your load is too heavy";
     if( Load_max >= Load_allowed ) ?label6;
     print ", especially in light of your condition.";
     jump label7;
  .label6;
     print ".";
  .label7;
     new_line;
  .label5;
     return 2;
  .label4;
     if( Verb ~= ##Take ) ?label8;
     num_items = CCount(player);
     if( num_items <= Maximum_held ) ?label8;
     weight = num_items * Max_held_mult;
     if( weight <= random(100) ) ?label8;
     print "You're holding too many things already!";
     new_line;
     rfalse;
  .label8;
     move noun to player;
     give noun visited;
     Zork2_deletion();
     ScoreObj(noun);
     rtrue;
]

! [ 62 bytes missing between routines ]

[ CCount obj cnt x ;
     if( ~~(x = child(obj)) ) ?label1;
  .label3;
     if( x has clothing ) ?label2;
     cnt++;
  .label2;
     if( (x = sibling(x)) ) ?label3;
  .label1;
     return cnt;
]

[ QueryWeight obj cont wt ;
     if( ~~(cont = child(obj)) ) ?label1;
  .label4;
     if( obj ~= actor || cont hasnt clothing ) ?label2;
     wt++;
     jump label3;
  .label2;
     wt = wt + QueryWeight(cont);
  .label3;
     if( (cont = sibling(cont)) ) ?label4;
  .label1;
     return wt + obj.size;
]

! [ 656 bytes missing between routines ]

[ InPlayer itm ;
  .label1;
     itm = parent(itm);
     if( ~~itm ) rfalse;
     if( itm ~= player ) ?label1;
     rtrue;
]

! [ 52 bytes missing between routines ]

[ SetLastObject it ;
     LastNoun = it;
     LastNounPlace = location;
     return LastNounPlace;
]

 ! ***** Core routines finished *****
Property pseudo;
Property contains;
Property vtype;
Property strength;
Property text_string;
Property initial2;
Property capacity;
Property description;
Property trophy_value;
Property take_value;
Property initial;
Property size = 5;
Property adjectives;
Property action;
Property name;
Property land_to;
Property out_to;
Property in_to;
Property d_to;
Property u_to;
Property sw_to;
Property se_to;
Property nw_to;
Property ne_to;
Property s_to;
Property w_to;
Property e_to;
Property n_to;

Object  cretin "cretin"
  with	action [; false_routine(); ],
	name 'adventurer',
	strength 0,
  has	animate concealed sacred scenery;

Object  no_such_thing "such thing"
  with	action ThingAction,
;

Object  rooms ""
  with	in_to rooms,
;

Object  -> west_of_house "West of House"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) rfalse;
	     print "You are standing in an open field west of a white house, with a boarded front door.";
	     if( ~~Won_flag ) ?label1;
	     print " A secret path leads southwest into the forest.";
	  .label1;
	     new_line;
	     rtrue;
	],
	contains white_house board,
	e_to "The door is boarded and you can't remove the boards.",
	in_to Won_flag stone_barrow 0,
	ne_to north_of_house,
	n_to north_of_house,
	se_to south_of_house,
	s_to south_of_house,
	sw_to Won_flag stone_barrow 0,
	w_to forest1,
  has	dry_land light sacred;

Object  -> -> front_door "door"
  with	action DoorAction,
	adjectives 'front' 'boarded',
	name 'door',
  has	door scenery;

Object  -> -> small_mailbox "small mailbox"
  with	action [ ;
	     if( Verb ~= ##Take ) rfalse;
	     if( noun ~= small_mailbox ) rfalse;
	     print_ret "It is securely anchored.";
	],
	adjectives 'small',
	capacity 10,
	name 'mailbox' 'box',
  has	container trytakebit;

Object  -> -> -> leaflet "leaflet"
  with	adjectives 'small',
	description "A small leaflet is on the ground.",
	name 'advertisement' 'leaflet' 'booklet' 'mail',
	size 2,
	text_string "~WELCOME TO ZORK!^^ZORK is a game of adventure, danger,  
          and low cunning. In it you will explore some of the most  
          amazing territory ever seen by mortals. No computer should
          be without one!~^",
  has	flammable readable takeable;

Object  -> slide_room "Slide Room"
  with	contains chute,
	description "This is a small chamber, which appears to have been part 
          of a coal mine. On the south wall of the chamber the      
          letters ~Granite Wall~ are etched in the rock. To the east
          is a long passage, and there is a steep metal slide       
          twisting downward. To the north is a small opening.",
	d_to cellar,
	e_to cold_passage,
	n_to mine_entrance,
  has	dry_land;

Object  -> mine1 "Coal Mine"
  with	description "This is a non-descript part of a coal mine.",
	d_to ladder_top,
	n_to mine2,
	w_to mine1,
  has	dry_land;

Object  -> mine2 "Coal Mine"
  with	description "This is a non-descript part of a coal mine.",
	e_to mine3,
	s_to mine2,
	sw_to mine1,
  has	dry_land;

Object  -> mine3 "Coal Mine"
  with	description "This is a non-descript part of a coal mine.",
	n_to mine3,
	se_to mine2,
	s_to mine4,
  has	dry_land;

Object  -> mine4 "Coal Mine"
  with	description "This is a non-descript part of a coal mine.",
	e_to mine4,
	ne_to mine3,
	n_to gas_room,
  has	dry_land;

Object  -> machine_room "Machine Room"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) rfalse;
	     print "This is a large, cold room whose sole exit is to the north. In one corner there is a machine which is reminiscent of a clothes dryer. On its face is a switch which is labelled ~START~. The switch does not appear to be manipulable by any human hand (unless the fingers are about 1/16 by 1/4 inch). On the front of the machine is a large lid, which is ";
	     if( machine hasnt open ) ?label1;
	     print "open.";
	     jump label2;
	  .label1;
	     print "closed.";
	  .label2;
	     new_line;
	     rtrue;
	],
	n_to drafty_room,
  has	dry_land;

Object  -> -> machine "machine"
  with	action [ ;
	     if( Verb ~= ##Take ) ?label1;
	     print_ret "It is far too large to carry.";
	  .label1;
	     if( Verb ~= ##Open ) ?label2;
	     if( machine hasnt open ) ?label3;
	     print (string) ComplexPickOne(Dummy_table);
	     new_line;
	     rtrue;
	  .label3;
	     if( ~~child(machine) ) ?label4;
	     print "The lid opens, revealing ";
	     PrintContents(machine);
	     print ".";
	     new_line;
	     give machine open;
	     rtrue;
	  .label4;
	     print "The lid opens.";
	     new_line;
	     give machine open;
	     rtrue;
	  .label2;
	     if( Verb ~= ##Close ) ?label5;
	     if( machine hasnt open ) ?label6;
	     print "The lid closes.";
	     new_line;
	     give machine ~open;
	     rtrue;
	  .label6;
	     print (string) ComplexPickOne(Dummy_table);
	     new_line;
	     rtrue;
	  .label5;
	     if( Verb ~= ##SwitchOn ) rfalse;
	     if( second ) ?label7;
	     print_ret "It's not clear how to turn it on with your bare hands.";
	  .label7;
	     Perform(MoveWith, switch, second);
	     rtrue;
	],
	capacity 50,
	name 'machine' 'pdp1  ' 'dryer' 'lid',
  has	container scenery trytakebit;

Object  -> -> switch "switch"
  with	action [ obj ;
	     if( Verb ~= ##MoveWith ) rfalse;
	     if( second ~= screwdriver ) ?label1;
	     if( machine hasnt open ) ?label2;
	     print_ret "The machine doesn't seem to want to do anything.";
	  .label2;
	     print "The machine comes to life (figuratively) with a dazzling display of colored lights and bizarre noises. After a few moments, the excitement abates.";
	     new_line;
	     if( pile_of_coal notin machine ) ?label3;
	     Remove(pile_of_coal);
	     move huge_diamond to machine;
	     rtrue;
	  .label3;
	     if( ~~(obj = child(machine)) ) ?label4;
	     Remove(obj);
	     jump label3;
	  .label4;
	     move vitreous_slag to machine;
	     rtrue;
	  .label1;
	     if( second ) ?label5;
	     print_ret "You can't turn it with your hands...";
	  .label5;
	     print "It seems that a ";
	     print (object) second;
	     print_ret " won't do.";
	],
	name 'switch',
  has	scenery turnable;

Object  -> drafty_room "Drafty Room"
  with	action DraftyRoomAction,
	description "This is a small drafty room in which is the bottom of a  
          long shaft. To the south is a passageway and to the east a
          very narrow passage. In the shaft can be seen a heavy iron
          chain.",
	e_to Empty_handed timber_room
	  "You cannot fit through this passage with that load.",
	out_to Empty_handed timber_room
	  "You cannot fit through this passage with that load.",
	pseudo [;
	  "chain": return PseudoChainAction();
	],
	s_to machine_room,
  has	dry_land sacred;

Object  -> -> basket2 "basket"
  with	action BasketAction,
	adjectives 'lowered',
	description "From the chain is suspended a basket.",
	name 'cage' 'dumbwaiter' 'basket',
  has	trytakebit;

Object  -> timber_room "Timber Room"
  with	action DraftyRoomAction,
	description "This is a long and narrow passage, which is cluttered    
          with broken timbers. A wide passage comes from the east   
          and turns at the west end of the room into a very narrow  
          passageway. From the west comes a strong draft.",
	e_to ladder_bottom,
	w_to Empty_handed drafty_room
	  "You cannot fit through this passage with that load.",
  has	dry_land sacred;

Object  -> -> broken_timber "broken timber"
  with	adjectives 'wooden' 'broken',
	name 'timber' 'pile',
	size 50,
  has	takeable;

Object  -> dead_end "Dead End"
  with	description "You have come to a dead end in the mine.",
	n_to ladder_bottom,
  has	dry_land;

Object  -> -> pile_of_coal "small pile of coal"
  with	adjectives 'small',
	name 'coal' 'pile' 'heap',
	size 20,
  has	flammable takeable;

Object  -> ladder_bottom "Ladder Bottom"
  with	contains wooden_ladder,
	description "This is a rather wide room. On one side is the bottom of 
          a narrow wooden ladder. To the west and the south are     
          passages leaving the room.",
	s_to dead_end,
	u_to ladder_top,
	w_to timber_room,
  has	dry_land;

Object  -> ladder_top "Ladder Top"
  with	contains wooden_ladder stairs,
	description "This is a very small room. In the corner is a rickety    
          wooden ladder, leading downward. It might be safe to      
          descend. There is also a staircase leading upward.",
	d_to ladder_bottom,
	u_to mine1,
  has	dry_land;

Object  -> gas_room "Gas Room"
  with	action [ rarg burn_flag UNUSED ;
	     if( rarg ~= M_BEFORE ) rfalse;
	     if( rarg ~= M_BEFORE || Verb ~= ##Burn and ##SwitchOn || noun ~= pair_of_candles and torch and matchbook ) ?label1;
	     burn_flag = 1;
	  .label1;
	     if( ~~InPlayer(pair_of_candles) ) ?label2;
	     if( pair_of_candles has light ) ?label3;
	  .label2;
	     if( ~~InPlayer(torch) ) ?label4;
	     if( torch has light ) ?label3;
	  .label4;
	     if( ~~InPlayer(matchbook) ) rfalse;
	     if( matchbook hasnt light ) rfalse;
	  .label3;
	     if( ~~burn_flag ) ?label5;
	     print "How sad for an aspiring adventurer to light a ";
	     print (object) noun;
	     print " in a room which reeks of gas. Fortunately, there is justice in the world.";
	     new_line;
	     jump label6;
	  .label5;
	     print "Oh dear. It appears that the smell coming from this room was coal gas. I would have thought twice about carrying flaming objects in here.";
	     new_line;
	  .label6;
	     return JigsUp("^      ** BOOOOOOOOOOOM **");
	],
	contains stairs,
	description "This is a small room which smells strongly of coal gas.  
          There is a short climb up some stairs and a narrow tunnel 
          leading east.",
	e_to mine4,
	pseudo [;
	  "gas": return PseudoGasAction();
	  "odor": return PseudoGasAction();
	],
	u_to smelly_room,
  has	dry_land sacred;

Object  -> -> bracelet "sapphire-encrusted bracelet"
  with	adjectives 'sapphire',
	name 'bracelet' 'jewel' 'sapphire' 'treasure',
	size 10,
	take_value 5,
	trophy_value 5,
  has	takeable;

Object  -> smelly_room "Smelly Room"
  with	contains stairs,
	description "This is a small non-descript room. However, from the     
          direction of a small descending staircase a foul odor can 
          be detected. To the south is a narrow tunnel.",
	d_to gas_room,
	pseudo [;
	  "odor": return PseudoGasAction();
	  "gas": return PseudoGasAction();
	],
	s_to shaft_room,
  has	dry_land;

Object  -> shaft_room "Shaft Room"
  with	description "This is a large room, in the middle of which is a small  
          shaft descending through the floor into darkness below. To
          the west and the north are exits from this room.          
          Constructed over the top of the shaft is a metal framework
          to which a heavy iron chain is attached.",
	d_to "You wouldn't fit and would die if you could.",
	n_to smelly_room,
	pseudo [;
	  "chain": return PseudoChainAction();
	],
	w_to bat_room,
  has	dry_land;

Object  -> -> basket1 "basket"
  with	action BasketAction,
	capacity 50,
	description "At the end of the chain is a basket.",
	name 'cage' 'dumbwaiter' 'basket',
  has	container open transparent trytakebit;

Object  -> bat_room "Bat Room"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) ?label1;
	     print_ret "You are in a small room which has doors only to the east and south.";
	  .label1;
	     if( rarg ~= M_ENTER ) rfalse;
	     if( Dead ) rfalse;
	     if( parent(clove_of_garlic) == player or location ) rfalse;
	     LookSub();
	     return BatMovesPlayer();
	],
	e_to shaft_room,
	s_to squeaky_room,
  has	dry_land sacred;

Object  -> -> bat "bat"
  with	action [ ;
	     if( Verb ~= ##TalkTo ) ?label1;
	     FweepFunc(6);
	     P_cont = 0;
	     return P_cont;
	  .label1;
	     if( Verb ~= ##Poke and ##Attack and ##Take ) rfalse;
	     if( parent(clove_of_garlic) ~= player and location ) ?label2;
	     print_ret "You can't reach him; he's on the ceiling.";
	  .label2;
	     return BatMovesPlayer();
	],
	adjectives 'vampire' 'deranged',
	initial2 [ UNUSED ;
	     if( parent(clove_of_garlic) ~= player and location ) ?label1;
	     print_ret "In the corner of the room on the ceiling is a large vampire bat who is obviously deranged and holding his nose.";
	  .label1;
	     print_ret "A large vampire bat, hanging from the ceiling, swoops down at you!";
	],
	name 'bat' 'vampire',
  has	animate trytakebit;

Object  -> -> jade_figurine "jade figurine"
  with	adjectives 'exquisite' 'jade',
	description "There is an exquisite jade figurine here.",
	name 'figurine' 'treasure',
	size 10,
	take_value 5,
	trophy_value 5,
  has	takeable;

Object  -> squeaky_room "Squeaky Room"
  with	description "You are in a small room. Strange squeaky sounds may be   
          heard coming from the passage at the north end. You may   
          also escape to the east.",
	e_to mine_entrance,
	n_to bat_room,
  has	dry_land;

Object  -> mine_entrance "Mine Entrance"
  with	description "You are standing at the entrance of what might have been 
          a coal mine. The shaft enters the west wall, and there is 
          another exit on the south end of the room.",
	in_to squeaky_room,
	s_to slide_room,
	w_to squeaky_room,
  has	dry_land;

Object  -> canyon_view "Canyon View"
  with	action [ rarg ;
	     if( rarg ~= M_HANDLED ) rfalse;
	     if( Verb ~= ##Dive ) rfalse;
	     if( noun ) rfalse;
	     JigsUp("Nice view, lousy place to jump.");
	     rtrue;
	],
	contains cliff river rainbow,
	description "You are at the top of the Great Canyon on its west wall. 
          From here there is a marvelous view of the canyon and     
          parts of the Frigid River upstream. Across the canyon, the
          walls of the White Cliffs join the mighty ramparts of the 
          Flathead Mountains to the east. Following the Canyon      
          upstream to the north, Aragain Falls may be seen, complete
          with rainbow. The mighty Frigid River flows out from a    
          great dark cavern. To the west and south can be seen an   
          immense forest, stretching for miles around. A path leads 
          northwest. It is possible to climb down into the canyon   
          from here.",
	d_to rocky_ledge,
	e_to rocky_ledge,
	nw_to clearing2,
	s_to "Storm-tossed trees block your way.",
	w_to forest4,
  has	dry_land light sacred;

Object  -> rocky_ledge "Rocky Ledge"
  with	contains cliff river,
	description "You are on a ledge about halfway up the wall of the river
          canyon. You can see from here that the main flow from     
          Aragain Falls twists along a passage which it is          
          impossible for you to enter. Below you is the canyon      
          bottom. Above you is more cliff, which appears climbable.",
	d_to canyon_bottom,
	u_to canyon_view,
  has	dry_land light sacred;

Object  -> canyon_bottom "Canyon Bottom"
  with	contains water cliff river,
	description "You are beneath the walls of the river canyon which may  
          be climbable here. The lesser part of the runoff of       
          Aragain Falls flows by below. To the north is a narrow    
          path.",
	n_to end_of_rainbow,
	u_to rocky_ledge,
  has	dry_land light sacred;

Object  -> end_of_rainbow "End of Rainbow"
  with	contains water rainbow river,
	description "You are on a small, rocky beach on the continuation of   
          the Frigid River past the Falls. The beach is narrow due  
          to the presence of the White Cliffs. The river canyon     
          opens here and sunlight shines in from above. A rainbow   
          crosses over the falls to the east and a narrow path      
          continues to the southwest.",
	e_to Rainbow_flag on_the_rainbow 0,
	ne_to Rainbow_flag on_the_rainbow 0,
	sw_to canyon_bottom,
	u_to Rainbow_flag on_the_rainbow 0,
  has	dry_land light;

Object  -> -> pot_of_gold "pot of gold"
  with	adjectives 'gold',
	initial "At the end of the rainbow is a pot of gold.",
	name 'pot' 'gold' 'treasure',
	size 15,
	take_value 10,
	trophy_value 10,
  has	concealed takeable;

Object  -> on_the_rainbow "On the Rainbow"
  with	contains rainbow,
	description "You are on top of a rainbow (I bet you never thought you 
          would walk on a rainbow), with a magnificent view of the  
          Falls. The rainbow travels east-west here.",
	e_to aragain_falls,
	w_to end_of_rainbow,
  has	dry_land light sacred;

Object  -> aragain_falls "Aragain Falls"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) rfalse;
	     print "You are at the top of Aragain Falls, an enormous waterfall with a drop of about 450 feet. The only path here is on the north end.";
	     new_line;
	     if( ~~Rainbow_flag ) ?label1;
	     print "A solid rainbow spans the falls.";
	     jump label2;
	  .label1;
	     print "A beautiful rainbow can be seen over the falls and to the west.";
	  .label2;
	     new_line;
	     rtrue;
	],
	contains water river rainbow,
	d_to "It's a long way...",
	n_to shore,
	u_to Rainbow_flag on_the_rainbow 0,
	w_to Rainbow_flag on_the_rainbow 0,
  has	dry_land light sacred;

Object  -> sandy_cave "Sandy Cave"
  with	description "This is a sand-filled cave whose exit is to the          
          southwest.",
	sw_to sandy_beach,
  has	dry_land;

Object  -> -> sand "sand"
  with	action [ ;
	     if( Verb ~= ##Dig ) rfalse;
	     if( second ~= shovel ) rfalse;
	     Beach_dig++;
	     if( Beach_dig <= 3 ) ?label1;
	     Beach_dig = -1;
	     if( scarab notin location ) ?label2;
	     give scarab concealed;
	  .label2;
	     return JigsUp("The hole collapses, smothering you.");
	  .label1;
	     if( Beach_dig ~= 3 ) ?label3;
	     if( scarab hasnt concealed ) rfalse;
	     print "You can see a scarab here in the sand.";
	     new_line;
	     SetLastObject(scarab);
	     give scarab ~concealed;
	     rtrue;
	  .label3;
	     print (string) (Bdigs-->Beach_dig);
	     new_line;
	     rtrue;
	],
	name 'sand',
  has	scenery;

Object  -> -> scarab "beautiful jeweled scarab"
  with	adjectives 'beautiful' 'carved' 'jeweled',
	name 'scarab' 'bug' 'beetle' 'treasure',
	size 8,
	take_value 5,
	trophy_value 5,
  has	concealed takeable;

Object  -> sandy_beach "Sandy Beach"
  with	contains water river,
	description "You are on a large sandy beach on the east shore of the  
          river, which is flowing quickly by. A path runs beside the
          river to the south here, and a passage is partially buried
          in sand to the northeast.",
	ne_to sandy_cave,
	s_to shore,
  has	dry_land sacred;

Object  -> -> shovel "shovel"
  with	name 'shovel' 'tool' 'tools',
	size 15,
  has	takeable toolbit;

Object  -> shore "Shore"
  with	contains water river,
	description "You are on the east shore of the river. The water here   
          seems somewhat treacherous. A path travels from north to  
          south here, the south end quickly turning around a sharp  
          corner.",
	n_to sandy_beach,
	s_to aragain_falls,
  has	dry_land light sacred;

Object  -> river1 "Frigid River"
  with	contains water river,
	description "The sound of rushing water is nearly unbearable here. On 
          the east shore is a large landing area.",
	e_to shore,
	land_to shore,
	u_to "You cannot go upstream due to strong currents.",
  has	light sacred water_room;

Object  -> frigid_river "Frigid River"
  with	action [ rarg ;
	     if( rarg ~= M_BEFORE ) rfalse;
	     if( red_buoy notin player ) rfalse;
	     if( ~~Buoy_flag ) rfalse;
	     print "You notice something funny about the feel of the buoy.";
	     new_line;
	     Buoy_flag = false;
	     return Buoy_flag;
	],
	contains water river,
	description "The river is running faster here and the sound ahead     
          appears to be that of rushing water. On the east shore is 
          a sandy beach. A small area of beach can also be seen     
          below the cliffs on the west shore.",
	d_to river1,
	e_to sandy_beach,
	land_to "You can land either to the east or the west.",
	u_to "You cannot go upstream due to strong currents.",
	w_to beach1,
  has	sacred water_room;

Object  -> -> red_buoy "red buoy"
  with	action [ ;
	     if( Verb ~= ##Open ) rfalse;
	     ScoreObj(large_emerald);
	     rfalse;
	],
	adjectives 'red',
	capacity 20,
	initial "There is a red buoy here (probably a warning).",
	name 'buoy',
	size 10,
  has	container takeable;

Object  -> -> -> large_emerald "large emerald"
  with	adjectives 'large',
	name 'emerald' 'treasure',
	take_value 5,
	trophy_value 10,
  has	takeable;

Object  -> beach1 "White Cliffs Beach"
  with	action [ rarg ;
	     if( rarg ~= M_BEFORE ) rfalse;
	     if( magic_boat notin player ) ?label1;
	     Deflated = false;
	     return Deflated;
	  .label1;
	     Deflated = true;
	     return Deflated;
	],
	contains water white_cliffs river,
	description "You are on a rocky, narrow strip of beach beside the     
          Cliffs. A narrow path leads north along the shore.",
	n_to Deflated beach2
	  "The path is too narrow.",
  has	dry_land sacred;

Object  -> beach2 "White Cliffs Beach"
  with	action BeachAction,
	contains water white_cliffs river,
	description "You are on a narrow strip of beach which runs along the  
          base of the White Cliffs. There is a narrow path heading  
          south along the Cliffs and a tight passage leading west   
          into the cliffs themselves.",
	s_to Deflated beach1
	  "The path is too narrow.",
	w_to Deflated damp_cave
	  "The path is too narrow.",
  has	dry_land sacred;

Object  -> river2 "Frigid River"
  with	contains water river,
	description "The river descends here into a valley. There is a narrow 
          beach on the west shore below the cliffs. In the distance 
          a faint rumbling can be heard.",
	d_to frigid_river,
	land_to beach2,
	u_to "You cannot go upstream due to strong currents.",
	w_to beach2,
  has	sacred water_room;

Object  -> river3 "Frigid River"
  with	contains water river,
	description "The river turns a corner here making it impossible to see
          the Dam. The White Cliffs loom on the east bank and large 
          rocks prevent landing on the west.",
	d_to river2,
	e_to "The White Cliffs prevent your landing here.",
	land_to "There is no safe landing spot here.",
	u_to "You cannot go upstream due to strong currents.",
	w_to "Just in time you steer away from the rocks.",
  has	sacred water_room;

Object  -> river4 "Frigid River"
  with	contains water river,
	description "You are on the Frigid River in the vicinity of the Dam.  
          The river flows quietly here. There is a landing on the   
          west shore.",
	d_to river3,
	e_to "The White Cliffs prevent your landing here.",
	land_to dam_base,
	u_to "You cannot go upstream due to strong currents.",
	w_to dam_base,
  has	light sacred water_room;

Object  -> dam_base "Dam Base"
  with	contains water river,
	description "You are at the base of Flood Control Dam #3, which looms 
          above you and to the north. The river Frigid is flowing by
          here. Along the river are the White Cliffs which seem to  
          form giant walls stretching from north to south along the 
          shores of the river as it winds its way downstream.",
	n_to dam,
	u_to dam,
  has	dry_land light sacred;

Object  -> -> pile_of_plastic "pile of plastic"
  with	action [ ;
	     if( Verb ~= ##Fill and ##Inflate ) rfalse;
	     if( pile_of_plastic in location ) ?label1;
	     print_ret "The boat must be on the ground to be inflated.";
	  .label1;
	     if( second ~= air_pump ) ?label2;
	     print "The boat inflates and appears seaworthy.";
	     new_line;
	     if( tan_label has visited ) ?label3;
	     print "A tan label is lying inside the boat.";
	     new_line;
	  .label3;
	     Deflated = false;
	     Remove(pile_of_plastic);
	     move magic_boat to location;
	     return SetLastObject(magic_boat);
	  .label2;
	     if( second ~= blast_of_air ) ?label4;
	     print_ret "You don't have enough lung power to inflate it.";
	  .label4;
	     print "With a ";
	     print (object) second;
	     print_ret "? Surely you jest!";
	],
	adjectives 'plastic' 'inflatable',
	description "There is a folded pile of plastic here which has a small 
          valve attached.",
	name 'boat' 'pile' 'plastic' 'valve',
	size 20,
  has	flammable takeable;

Object  -> maintenance_room "Maintenance Room"
  with	description "This is what appears to have been the maintenance room   
          for Flood Control Dam #3. Apparently, this room has been  
          ransacked recently, for most of the valuable equipment is 
          gone. On the wall in front of you is a group of buttons   
          colored blue, yellow, brown, and red. There are doorways  
          to the west and south.",
	s_to dam_lobby,
	w_to dam_lobby,
  has	dry_land;

Object  -> -> tool_chests "group of tool chests"
  with	action [ ;
	     if( Verb ~= ##Examine ) ?label1;
	     print_ret "The chests are all empty.";
	  .label1;
	     if( Verb ~= ##Insert and ##Open and ##Take ) ?label2;
	     Remove(tool_chests);
	     print_ret "The chests are so rusty and corroded that they crumble when you touch them.";
	  .label2;
	     if( Verb ~= ##Open ) rfalse;
	     print_ret "The chests are already open.";
	],
	adjectives 'tool',
	name 'chest' 'chests' 'group' 'toolchests',
  has	container open sacred trytakebit;

Object  -> -> wrench "wrench"
  with	name 'wrench' 'tool' 'tools',
	size 10,
  has	takeable toolbit;

Object  -> -> tube "tube"
  with	action [ ;
	     if( Verb ~= ##Insert || second ~= tube ) ?label1;
	     print_ret "The tube refuses to accept anything.";
	  .label1;
	     if( Verb ~= ##Squeeze ) rfalse;
	     if( noun hasnt open || viscous_material notin noun ) ?label2;
	     move viscous_material to player;
	     print_ret "The viscous material oozes into your hand.";
	  .label2;
	     if( noun hasnt open ) ?label3;
	     print_ret "The tube is apparently empty.";
	  .label3;
	     print_ret "The tube is closed.";
	],
	capacity 7,
	description "There is an object which looks like a tube of toothpaste 
          here.",
	name 'tube' 'tooth' 'paste',
	size 5,
	text_string "---> Frobozz Magic Gunk Company <---^	  All-Purpose Gunk",
  has	container readable takeable;

Object  -> -> -> viscous_material "viscous material"
  with	action [ ;
	     if( Verb ~= ##Grease ) ?label1;
	     if( second == viscous_material ) ?label2;
	  .label1;
	     if( Verb ~= ##Insert ) rfalse;
	     if( noun ~= viscous_material ) rfalse;
	  .label2;
	     print_ret "The all-purpose gunk isn't a lubricant.";
	],
	adjectives 'viscous',
	name 'material' 'gunk',
	size 6,
  has	takeable toolbit;

Object  -> -> screwdriver "screwdriver"
  with	adjectives 'screw',
	name 'screwdriver' 'tool' 'tools' 'driver',
  has	takeable toolbit;

Object  -> -> leak "leak"
  with	action [ ;
	     if( Leak_sprung <= 0 ) rfalse;
	     if( Verb ~= ##PutOn and ##Insert || noun ~= viscous_material ) ?label1;
	     return FixLeak();
	  .label1;
	     if( Verb ~= ##Fix ) rfalse;
	     if( second ~= viscous_material ) ?label2;
	     return FixLeak();
	  .label2;
	     return WithTell(second);
	],
	name 'leak' 'drip' 'pipe',
  has	concealed scenery;

Object  -> -> blue_button "blue button"
  with	action ButtonAction,
	adjectives 'blue',
	name 'button' 'switch',
  has	scenery;

Object  -> -> red_button "red button"
  with	action ButtonAction,
	adjectives 'red',
	name 'button' 'switch',
  has	scenery;

Object  -> -> brown_button "brown button"
  with	action ButtonAction,
	adjectives 'brown',
	name 'button' 'switch',
  has	scenery;

Object  -> -> yellow_button "yellow button"
  with	action ButtonAction,
	adjectives 'yellow',
	name 'button' 'switch',
  has	scenery;

Object  -> dam_lobby "Dam Lobby"
  with	description "This room appears to have been the waiting room for      
          groups touring the dam. There are open doorways here to   
          the north and east marked ~Private~, and there is a path  
          leading south over the top of the dam.",
	e_to maintenance_room,
	n_to maintenance_room,
	s_to dam,
  has	dry_land light;

Object  -> -> matchbook "matchbook"
  with	action [ mleft ;
	     if( Verb ~= ##Burn and ##SwitchOn || noun ~= matchbook ) ?label1;
	     if( Matches_count <= 0 ) ?label2;
	     Matches_count--;
	  .label2;
	     if( Matches_count > 0 ) ?label3;
	     print_ret "I'm afraid that you have run out of matches.";
	  .label3;
	     if( location ~= drafty_room and timber_room ) ?label4;
	     print_ret "This room is drafty, and the match goes out instantly.";
	  .label4;
	     give matchbook flame;
	     give matchbook light;
	     Queue(MatchDaemon, 2)-->0 = 1;
	     print "One of the matches starts to burn.";
	     new_line;
	     if( Lit ) rtrue;
	     Lit = true;
	     LookSub();
	     rtrue;
	  .label1;
	     if( Verb ~= ##SwitchOff || matchbook hasnt flame ) ?label5;
	     print "The match is out.";
	     new_line;
	     give matchbook ~flame;
	     give matchbook ~light;
	     Lit = QueryLight(location);
	     if( Lit ) ?label6;
	     print "It's pitch black in here!";
	     new_line;
	  .label6;
	     Queue(MatchDaemon, 0);
	     rtrue;
	  .label5;
	     if( Verb ~= ##Open and ##Count ) ?label7;
	     print "You have ";
	     mleft = Matches_count - 1;
	     if( mleft > 0 ) ?label8;
	     print "no";
	     jump label9;
	  .label8;
	     print (number) mleft;
	  .label9;
	     print " match";
	     if( mleft == 1 ) ?label10;
	     print "es.";
	     jump label11;
	  .label10;
	     print ".";
	  .label11;
	     new_line;
	     rtrue;
	  .label7;
	     if( Verb ~= ##Examine ) rfalse;
	     if( matchbook hasnt light ) ?label12;
	     print "The match is burning.";
	     jump label13;
	  .label12;
	     print "The matchbook isn't very interesting, except for what's written on it.";
	  .label13;
	     new_line;
	     rtrue;
	],
	adjectives 'match',
	description "There is a matchbook whose cover says ~Visit Beautiful   
          FCD#3~ here.",
	name 'match' 'matches' 'matchbook',
	size 2,
	text_string "^(Close cover before striking)^^YOU too can make BIG     
          MONEY in the exciting field of PAPER SHUFFLING!^^Mr.      
          Anderson of Muddle, Mass. says: ~Before I took this course
          I was a lowly bit twiddler. Now with what I learned at GUE
          Tech I feel really important and can obfuscate and confuse
          with the best.~^^Dr. Blank had this to say: ~Ten short    
          days ago all I could look forward to was a dead-end job as
          a doctor. Now I have a promising future and make really   
          big Zorkmids.~^^GUE Tech can't promise these fantastic    
          results to everyone. But when you earn your degree from   
          GUE Tech, your future will be brighter.^",
  has	readable takeable;

Object  -> -> tour_guidebook "tour guidebook"
  with	adjectives 'tour' 'guide',
	initial "Some guidebooks entitled ~Flood Control Dam #3~ are on   
          the reception desk.",
	name 'guide' 'book' 'books' 'guidebook',
	text_string "~	Flood Control Dam #3^^FCD#3 was constructed in year 783
          of the Great Underground Empire to harness the mighty     
          Frigid River. This work was supported by a grant of 37    
          million zorkmids from your omnipotent local tyrant Lord   
          Dimwit Flathead the Excessive. This impressive structure  
          is composed of 370,000 cubic feet of concrete, is 256 feet
          tall at the center, and 193 feet wide at the top. The lake
          created behind the dam has a volume of 1.7 billion cubic  
          feet, an area of 12 million square feet, and a shore line 
          of 36 thousand feet.^^We will now point out some of the   
          more interesting features of FCD#3 as we conduct you on a 
          guided tour of the facilities:^        1) You start your  
          tour here in the Dam Lobby. You will notice on your right 
          that....",
  has	flammable readable takeable;

Object  -> dam "Dam"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) rfalse;
	     print "You are standing on the top of the Flood Control Dam #3, which was quite a tourist attraction in times far distant. There are paths to the north, south, and west, and a scramble down.";
	     new_line;
	     if( ~~Low_tide || ~~Dam_open ) ?label1;
	     print "The water level behind the dam is low: The sluice gates have been opened. Water rushes through the dam and downstream.";
	     new_line;
	     jump label2;
	  .label1;
	     if( ~~Dam_open ) ?label3;
	     print "The sluice gates are open, and water rushes through the dam. The water level behind the dam is still high.";
	     new_line;
	     jump label2;
	  .label3;
	     if( ~~Low_tide ) ?label4;
	     print "The sluice gates are closed. The water level in the reservoir is quite low, but the level is rising quickly.";
	     new_line;
	     jump label2;
	  .label4;
	     print "The sluice gates on the dam are closed. Behind the dam, there can be seen a wide reservoir. Water is pouring over the top of the now abandoned dam.";
	     new_line;
	  .label2;
	     print "There is a control panel here, on which a large metal bolt is mounted. Directly above the bolt is a small green plastic bubble";
	     if( ~~Gate_flag ) ?label5;
	     print " which is glowing serenely";
	  .label5;
	     print_ret ".";
	],
	contains water,
	d_to dam_base,
	e_to dam_base,
	n_to dam_lobby,
	s_to deep_canyon,
	w_to reservoir_south,
  has	dry_land light;

Object  -> -> bolt "bolt"
  with	action [ ;
	     if( Verb ~= ##MoveWith ) ?label1;
	     if( second ~= wrench ) ?label2;
	     if( ~~Gate_flag ) ?label3;
	     give reservoir_south ~visited;
	     if( ~~Dam_open ) ?label4;
	     Dam_open = false;
	     give loud_room ~visited;
	     print "The sluice gates close and water starts to collect behind the dam.";
	     new_line;
	     Queue(RisingWaterDaemon, 8)-->0 = 1;
	     Queue(LowerWaterDaemon, 0);
	     rtrue;
	  .label4;
	     Dam_open = true;
	     print "The sluice gates open and water pours through the dam.";
	     new_line;
	     Queue(LowerWaterDaemon, 8)-->0 = 1;
	     Queue(RisingWaterDaemon, 0);
	     rtrue;
	  .label3;
	     print_ret "The bolt won't turn with your best effort.";
	  .label2;
	     if( ~~second ) ?label5;
	     print "The bolt won't turn using the ";
	     print (object) second;
	     print_ret ".";
	  .label5;
	     print_ret "You can't with your bare hands.";
	  .label1;
	     if( Verb ~= ##Take ) ?label6;
	     return IntegralMsg();
	  .label6;
	     if( Verb ~= ##Grease ) rfalse;
	     print_ret "Hmm. It appears the tube contained glue, not oil. Turning the bolt won't get any easier....";
	],
	adjectives 'metal' 'large',
	name 'bolt' 'nut',
  has	scenery trytakebit turnable;

Object  -> -> control_panel "control panel"
  with	adjectives 'contro',
	name 'panel',
  has	scenery;

Object  -> -> dam_scenery "dam"
  with	action [ ;
	     if( Verb ~= ##Close and ##Open ) ?label1;
	     print_ret "Sounds reasonable, but this isn't how.";
	  .label1;
	     if( Verb ~= ##Fix ) rfalse;
	     if( second ~= pair_of_hands ) ?label2;
	     print_ret "Are you the little Dutch boy, then? Sorry, this is a big dam.";
	  .label2;
	     print "With a ";
	     print (object) second;
	     print_ret "? Do you know how big this dam is? You could only stop a tiny leak with that.";
	],
	name 'dam' 'gate' 'gates' 'fcd#  ',
  has	scenery trytakebit;

Object  -> -> green_bubble "green bubble"
  with	action [ ;
	     if( Verb ~= ##Take ) rfalse;
	     return IntegralMsg();
	],
	adjectives 'small' 'green' 'plastic',
	name 'bubble',
  has	scenery trytakebit;

Object  -> altar "Altar"
  with	action [ rarg ;
	     if( rarg ~= M_HANDLED ) rfalse;
	     SnarfFlag = ((gold_coffin in player ? 0 : 1));
	     rfalse;
	],
	description "This is the south end of a large temple. In front of you 
          is what appears to be an altar. In one corner is a small  
          hole in the floor which leads into darkness. You probably 
          could not get back up it.",
	d_to SnarfFlag cave1
	  "You haven't a prayer of getting the coffin down there.",
	n_to temple,
  has	dry_land light sacred;

Object  -> -> altar_scenery "altar"
  with	capacity 50,
	name 'altar',
  has	container open scenery supporter;

Object  -> -> -> black_book "black book"
  with	action [ ;
	     if( Verb ~= ##Open ) ?label1;
	     print_ret "The book is already open to page 569.";
	  .label1;
	     if( Verb ~= ##Close ) ?label2;
	     print_ret "As hard as you try, the book cannot be closed.";
	  .label2;
	     if( Verb == ##MoveWith ) ?label3;
	     if( Verb ~= ##ReadObjObj || second ~= number_ob || second_intnum == 569 ) ?label4;
	  .label3;
	     print_ret "Beside page 569, there is only one other page with any legible printing on it. Most of it is unreadable, but the subject seems to be the banishment of evil. Apparently, certain noises, lights, and prayers are efficacious in this regard.";
	  .label4;
	     if( Verb ~= ##Burn ) rfalse;
	     Remove(noun);
	     return JigsUp("A booming voice says ~Wrong, cretin!~ and you notice that you have turned into a pile of dust. How, I can't imagine.");
	],
	adjectives 'large' 'black',
	initial "On the altar is a large black book, open to page 569.",
	name 'book' 'prayer' 'page' 'books',
	size 10,
	text_string "Commandment #12592^^Oh ye who go about saying unto each: 
          ~Hello sailor~:^Dost thou know the magnitude of thy sin   
          before the gods?^Yea, verily, thou shalt be ground between
          two stones.^Shall the angry gods cast thy body into the   
          whirlpool?^Surely, thy eye shall be put out with a sharp  
          stick!^Even unto the ends of the earth shalt thou wander  
          and^Unto the land of the dead shalt thou be sent at       
          last.^Surely thou shalt repent of thy cunning.",
  has	container flammable readable takeable turnable;

Object  -> -> pair_of_candles "pair of candles"
  with	action [ ;
	     if( pair_of_candles has visited ) ?label1;
	     QueueInterrupt(CandleDaemon)-->0 = 1;
	  .label1;
	     if( 147 == second ) rfalse;
	     if( Verb ~= ##Burn and ##SwitchOn ) ?label2;
	     if( pair_of_candles hasnt rmungbit ) ?label3;
	     print_ret "Alas, there's not much left of the candles. Certainly not enough to burn.";
	  .label3;
	     if( second ) ?label4;
	     if( matchbook hasnt flame ) ?label5;
	     print "(with the match)";
	     new_line;
	     Perform(SwitchOn, pair_of_candles, matchbook);
	     rtrue;
	  .label5;
	     print "You should say what to light them with.";
	     new_line;
	     return 2;
	  .label4;
	     if( second ~= matchbook || matchbook hasnt light ) ?label6;
	     print "The candles are ";
	     if( pair_of_candles hasnt light ) ?label7;
	     print_ret "already lit.";
	  .label7;
	     give pair_of_candles light;
	     print "lit.";
	     new_line;
	     QueueInterrupt(CandleDaemon)-->0 = 1;
	     rtrue;
	  .label6;
	     if( second ~= torch ) ?label8;
	     if( pair_of_candles hasnt light ) ?label9;
	     print_ret "You realize, just in time, that the candles are already lighted.";
	  .label9;
	     print "The heat from the torch is so intense that the candles are vaporized.";
	     new_line;
	     return Remove(pair_of_candles);
	  .label8;
	     print_ret "You have to light them with something that's burning, you know.";
	  .label2;
	     if( Verb ~= ##Count ) ?label10;
	     print_ret "Let's see, how many objects in a pair? Don't tell me, I'll get it.";
	  .label10;
	     if( Verb ~= ##SwitchOff ) ?label11;
	     QueueInterrupt(CandleDaemon)-->0 = 0;
	     if( pair_of_candles hasnt light ) ?label12;
	     print "The flame is extinguished.";
	     give pair_of_candles ~light;
	     Lit = QueryLight(location);
	     if( Lit ) ?label13;
	     print " It's really dark in here....";
	  .label13;
	     new_line;
	     rtrue;
	  .label12;
	     print_ret "The candles are not lighted.";
	  .label11;
	     if( Verb ~= ##Insert || second hasnt flammable ) ?label14;
	     print_ret "That wouldn't be smart.";
	  .label14;
	     if( Verb ~= ##Examine ) rfalse;
	     print "The candles are ";
	     if( pair_of_candles hasnt light ) ?label15;
	     print "burning.";
	     jump label16;
	  .label15;
	     print "out.";
	  .label16;
	     new_line;
	     rtrue;
	],
	adjectives 'burning',
	initial "On the two ends of the altar are burning candles.",
	name 'candle' 'pair',
	size 10,
  has	flame light on takeable;

Object  -> temple "Temple"
  with	contains stairs,
	description "This is the north end of a large temple. On the east wall
          is an ancient inscription, probably a prayer in a         
          long-forgotten language. Below the prayer is a staircase  
          leading down. The west wall is solid granite. The exit to 
          the north end of the room is through huge marble pillars.",
	d_to egyptian_room,
	e_to egyptian_room,
	n_to torch_room,
	out_to torch_room,
	s_to altar,
	u_to torch_room,
  has	dry_land light sacred;

Object  -> -> brass_bell "brass bell"
  with	action [ ;
	     if( Verb ~= ##Ring ) rfalse;
	     if( location ~= object23167 ) ?label1;
	     if( ~~LLD_flag ) rfalse;
	  .label1;
	     print_ret "Ding, dong.";
	],
	adjectives 'small' 'brass',
	name 'bell',
  has	takeable;

Object  -> -> prayer "prayer"
  with	adjectives 'ancient' 'old',
	name 'prayer' 'inscription',
	text_string "The prayer is inscribed in an ancient script, rarely used
          today. It seems to be a philippic against small insects,  
          absent-mindedness, and the picking up and dropping of     
          small objects. The final verse consigns trespassers to the
          land of the dead. All evidence indicates that the beliefs 
          of the ancient Zorkers were obscure.",
  has	readable sacred scenery;

Object  -> torch_room "Torch Room"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) rfalse;
	     print "This is a large room with a prominent doorway leading to a down staircase. Above you is a large dome. Up around the edge of the dome (20 feet up) is a wooden railing. In the center of the room sits a white marble pedestal.";
	     new_line;
	     if( ~~Dome_flag ) rfalse;
	     print_ret "A piece of rope descends from the railing above, ending some five feet above your head.";
	],
	contains stairs,
	d_to temple,
	pseudo [;
	  "dome": return PseudoDomeAction();
	],
	s_to temple,
	u_to "You cannot reach the rope.",
  has	dry_land;

Object  -> -> pedestal "pedestal"
  with	action [ ;
	     if( Verb ~= ##LookIn and ##Close and ##Open ) ?label1;
	     print_ret "You can't do that.";
	  .label1;
	     if( Verb ~= ##Examine ) rfalse;
	     print "It looks pretty much like a ";
	     print (object) noun;
	     print_ret ".";
	],
	adjectives 'white' 'marble',
	capacity 30,
	name 'pedestal',
  has	container open scenery supporter;

Object  -> -> -> torch "torch"
  with	action [ ;
	     if( Verb ~= ##Examine ) ?label1;
	     print_ret "The torch is burning.";
	  .label1;
	     if( Verb ~= ##Pour || second ~= torch ) ?label2;
	     print_ret "The water evaporates before it gets close.";
	  .label2;
	     if( Verb ~= ##SwitchOff ) rfalse;
	     if( noun hasnt light ) rfalse;
	     print_ret "You nearly burn your hand trying to extinguish the flame.";
	],
	adjectives 'flaming' 'ivory',
	initial "Sitting on the pedestal is a flaming torch, made of      
          ivory.",
	name 'torch' 'ivory' 'treasure',
	size 20,
	take_value 14,
	trophy_value 6,
  has	flame light on takeable;

Object  -> dome_room "Dome Room"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) ?label1;
	     print "You are at the periphery of a large dome, which forms the ceiling of another room below. Protecting you from a precipitous drop is a wooden railing which circles the dome.";
	     new_line;
	     if( ~~Dome_flag ) rfalse;
	     print_ret "Hanging down from the railing is a rope which ends about ten feet from the floor below.";
	  .label1;
	     if( rarg ~= M_ENTER ) rfalse;
	     if( ~~Dead ) ?label2;
	     print "As you enter the dome you feel a strong pull as if from a wind drawing you over the railing and down.";
	     new_line;
	     move player to torch_room;
	     location = torch_room;
	     rtrue;
	  .label2;
	     if( Verb ~= ##Dive ) rfalse;
	     return JigsUp("I'm afraid that the leap you attempted has done you in.");
	],
	d_to Dome_flag torch_room
	  "You cannot go down without fracturing many bones.",
	pseudo [;
	  "dome": return PseudoDomeAction();
	],
	w_to engravings_cave,
  has	dry_land;

Object  -> -> wooden_railing "wooden railing"
  with	adjectives 'wooden',
	name 'railing' 'rail',
  has	scenery;

Object  -> egyptian_room "Egyptian Room"
  with	contains stairs,
	description "This is a room which looks like an Egyptian tomb. There  
          is an ascending staircase to the west.",
	u_to temple,
	w_to temple,
  has	dry_land;

Object  -> -> gold_coffin "gold coffin"
  with	adjectives 'solid' 'gold',
	capacity 35,
	description "The solid-gold coffin used for the burial of Ramses II is
          here.",
	name 'coffin' 'casket' 'treasure',
	size 55,
	take_value 10,
	trophy_value 15,
  has	container magic sacred takeable;

Object  -> -> -> sceptre "sceptre"
  with	action [ ;
	     if( Verb ~= ##Raise and ##Wield ) rfalse;
	     if( location == aragain_falls ) ?label1;
	     if( location ~= end_of_rainbow ) ?label2;
	  .label1;
	     if( Rainbow_flag ) ?label3;
	     give pot_of_gold ~concealed;
	     print "Suddenly, the rainbow appears to become solid and, I venture, walkable (I think the giveaway was the stairs and bannister).";
	     new_line;
	     if( location ~= end_of_rainbow || pot_of_gold notin end_of_rainbow ) ?label4;
	     print "A shimmering pot of gold appears at the end of the rainbow.";
	     new_line;
	  .label4;
	     Rainbow_flag = true;
	     return Rainbow_flag;
	  .label3;
	     Rob(on_the_rainbow, surrounding_wall);
	     print "The rainbow seems to have become somewhat run-of-the-mill.";
	     new_line;
	     Rainbow_flag = false;
	     return Rainbow_flag;
	  .label2;
	     if( location ~= on_the_rainbow ) ?label5;
	     Rainbow_flag = false;
	     return JigsUp("The structural integrity of the rainbow is severely compromised, leaving you hanging in mid-air, supported only by water vapor. Bye.");
	  .label5;
	     print_ret "A dazzling display of color briefly emanates from the sceptre.";
	],
	adjectives 'sharp' 'egyptian' 'ancient' 'enamel',
	description "An ornamented sceptre, tapering to a sharp point, is     
          here.",
	initial "A sceptre, possibly that of ancient Egypt itself, is in  
          the coffin. The sceptre is ornamented with colored enamel,
          and tapers to a sharp point.",
	name 'sceptre' 'scepter' 'treasure',
	size 3,
	take_value 4,
	trophy_value 6,
  has	takeable weapon;

Object  -> engravings_cave "Engravings Cave"
  with	description "You have entered a low cave with passages leading        
          northwest and east.",
	e_to dome_room,
	nw_to round_room,
  has	dry_land;

Object  -> -> wall_with_engravings "wall with engravings"
  with	adjectives 'old' 'ancient',
	description "There are old engravings on the walls here.",
	name 'wall' 'engravings' 'inscription',
	text_string "The engravings were incised in the living rock of the    
          cave wall by an unknown hand. They depict, in symbolic    
          form, the beliefs of the ancient Zorkers. Skillfully      
          interwoven with the bas reliefs are excerpts illustrating 
          the major religious tenets of that time. Unfortunately, a 
          later age seems to have considered them blasphemous and   
          just as skillfully excised them.",
  has	readable sacred;

Object  -> land_of_the_dead "Land of the Dead"
  with	contains pile_of_bodies,
	description "You have entered the Land of the Living Dead. Thousands  
          of lost souls can be heard weeping and moaning. In the    
          corner are stacked the remains of dozens of previous      
          adventurers less fortunate than yourself. A passage exits 
          to the north.",
	n_to entrance_to_hades,
	out_to entrance_to_hades,
  has	dry_land light;

Object  -> -> crystal_skull "crystal skull"
  with	adjectives 'crystal',
	initial "Lying in one corner of the room is a beautifully carved  
          crystal skull. It appears to be grinning at you rather    
          nastily.",
	name 'skull' 'head' 'treasure',
	take_value 10,
	trophy_value 10,
  has	takeable;

Object  -> entrance_to_hades "Entrance to Hades"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) ?label1;
	     print "You are outside a large gateway, on which is inscribed^^  Abandon every hope all ye who enter here!^^The gate is open; through it you can see a desolation, with a pile of mangled bodies in one corner. Thousands of voices, lamenting some hideous fate, can be heard.";
	     new_line;
	     if( LLD_flag ) rfalse;
	     if( Dead ) rfalse;
	     print_ret "The way through the gate is barred by evil spirits, who jeer at your attempts to pass.";
	  .label1;
	     if( rarg ~= M_HANDLED ) ?label2;
	     if( Verb ~= ##Banish ) ?label3;
	     if( LLD_flag ) rfalse;
	     if( brass_bell notin player || black_book notin player || pair_of_candles notin player ) ?label4;
	     print_ret "You must perform the ceremony.";
	  .label4;
	     print_ret "You aren't equipped for an exorcism.";
	  .label3;
	     if( LLD_flag || Verb ~= ##Ring || noun ~= brass_bell ) ?label5;
	     Exorcism_bell = true;
	     Remove(brass_bell);
	     SetLastObject(red_hot_bell);
	     move red_hot_bell to location;
	     print "The bell suddenly becomes red hot and falls to the ground. The wraiths, as if paralyzed, stop their jeering and slowly turn to face you. On their ashen faces, the expression of a long-forgotten terror takes shape.";
	     new_line;
	     if( pair_of_candles notin player ) ?label6;
	     print "In your confusion, the candles drop to the ground (and they are out).";
	     new_line;
	     move pair_of_candles to location;
	     give pair_of_candles ~light;
	     QueueInterrupt(CandleDaemon)-->0 = 0;
	  .label6;
	     Queue(ExorcismDaemon, 6)-->0 = 1;
	     Queue(CoolBell, 20)-->0 = 1;
	     rtrue;
	  .label5;
	     if( ~~Exorcism_candle ) rfalse;
	     if( Verb ~= ##Read ) rfalse;
	     if( noun ~= black_book ) rfalse;
	     if( LLD_flag ) rfalse;
	     print "Each word of the prayer reverberates through the hall in a deafening confusion. As the last word fades, a voice, loud and commanding, speaks: ~Begone, fiends!~ A heart-stopping scream fills the cavern, and the spirits, sensing a greater power, flee through the walls.";
	     new_line;
	     Remove(number_of_ghosts);
	     LLD_flag = true;
	     QueueInterrupt(Exorcism2Daemon)-->0 = 0;
	     rtrue;
	  .label2;
	     if( rarg ~= M_BEFORE ) rfalse;
	     if( ~~Exorcism_bell ) rfalse;
	     if( pair_of_candles notin player ) rfalse;
	     if( pair_of_candles hasnt light ) rfalse;
	     if( Exorcism_candle ) rfalse;
	     Exorcism_candle = true;
	     print "The flames flicker wildly and appear to dance. The earth beneath your feet trembles, and your legs nearly buckle beneath you. The spirits cower at your unearthly power.";
	     new_line;
	     QueueInterrupt(ExorcismDaemon)-->0 = 0;
	     Queue(Exorcism2Daemon, 3)-->0 = 1;
	     rtrue;
	],
	contains pile_of_bodies,
	in_to LLD_flag land_of_the_dead
	  "Some invisible force prevents you from passing through the gate.",
	pseudo [;
	  "gate": return PseudoGateAction();
	  "gates": return PseudoGateAction();
	],
	s_to LLD_flag land_of_the_dead
	  "Some invisible force prevents you from passing through the gate.",
	u_to cave1,
  has	dry_land light;

Object  -> -> number_of_ghosts "number of ghosts"
  with	action [ ;
	     if( Verb ~= ##TalkTo ) ?label1;
	     print "The spirits jeer loudly and ignore you.";
	     new_line;
	     P_cont = 0;
	     return P_cont;
	  .label1;
	     if( Verb ~= ##Banish ) ?label2;
	     print_ret "Only the ceremony itself has any effect.";
	  .label2;
	     if( Verb ~= ##Poke and ##Attack || noun ~= number_of_ghosts ) ?label3;
	     print_ret "How can you attack a spirit with material objects?";
	  .label3;
	     print_ret "You seem unable to interact with these spirits.";
	],
	adjectives 'invisible' 'evil',
	name 'ghosts' 'spirit' 'fiends' 'force',
  has	animate scenery;

Object  -> chasm "Chasm"
  with	contains crack stairs,
	description "A chasm runs southwest to northeast and the path follows 
          it. You are on the south side of the chasm, where a crack 
          opens into a passage.",
	d_to "Are you out of your mind?",
	ne_to reservoir_south,
	pseudo [;
	  "chasm": return PseudoChasmAction();
	],
	s_to n_s_passage,
	sw_to e_w_passage,
	u_to e_w_passage,
  has	dry_land;

Object  -> n_s_passage "North-South Passage"
  with	description "This is a high north-south passage, which forks to the   
          northeast.",
	ne_to deep_canyon,
	n_to chasm,
	s_to round_room,
  has	dry_land;

Object  -> loud_room "Loud Room"
  with	action [ rarg v ;
	     if( rarg ~= M_LOOK ) ?label1;
	     print "This is a large room with a ceiling which cannot be detected from the ground. There is a narrow passage from east to west and a stone stairway leading upward.";
	     if( Echo_flag ) ?label2;
	     if( Dam_open || ~~Low_tide ) ?label3;
	  .label2;
	     print " The room is eerie in its quietness.";
	     jump label4;
	  .label3;
	     print " The room is deafeningly loud with an undetermined rushing sound. The sound seems to reverberate from all of the walls, making it difficult even to think.";
	  .label4;
	     new_line;
	     rtrue;
	  .label1;
	     if( rarg ~= M_BEFORE || ~~Dam_open || Low_tide ) ?label5;
	     print "It is unbearably loud here, with an ear-splitting roar seeming to come from all around you. There is a pounding in your head which won't stop. With a tremendous effort, you scramble out of the room.";
	     new_line;
	     new_line;
	     Goto(ComplexPickOne(Near_loudroom));
	     rfalse;
	  .label5;
	     if( rarg ~= M_ENTER ) rfalse;
	     if( Echo_flag ) rfalse;
	     if( Dam_open ) ?label6;
	     if( Low_tide ) rfalse;
	  .label6;
	     if( ~~Dam_open ) ?label7;
	     if( ~~Low_tide ) rfalse;
	  .label7;
	     FirstLook();
	     if( ~~P_cont ) ?label8;
	     print "The rest of your commands have been lost in the noise.";
	     new_line;
	     P_cont = 0;
	  .label8;
	     new_line;
	     print ">";
	     read P_inbuf P_lexv;
	     if( (P_lexv->1) ) ?label9;
	     print "I beg your pardon?";
	     new_line;
	     jump label8;
	  .label9;
	     v = P_lexv-->1;
	     if( v ~= 'go' and 'walk' and 'run' ) ?label10;
	     v = P_lexv-->3;
	     jump label11;
	  .label10;
	     if( v ~= 'say' ) ?label11;
	     v = P_lexv-->5;
	  .label11;
	     if( v ~= 'save' ) ?label12;
	     SaveSub();
	     jump label8;
	  .label12;
	     if( v ~= 'restore' ) ?label13;
	     RestoreSub();
	     jump label8;
	  .label13;
	     if( v ~= 'q' and 'quit' ) ?label14;
	     QuitSub();
	     jump label8;
	  .label14;
	     if( v ~= 'w' and 'west' ) ?label15;
	     return Goto(round_room);
	  .label15;
	     if( v ~= 'e' and 'east' ) ?label16;
	     return Goto(damp_cave);
	  .label16;
	     if( v ~= 'u' and 'up' ) ?label17;
	     return Goto(deep_canyon);
	  .label17;
	     if( v ~= 'bug' ) ?label18;
	     print "That's only your opinion.";
	     new_line;
	     jump label8;
	  .label18;
	     if( v ~= 'echo' ) ?label19;
	     Echo_flag = true;
	     give platinum_bar ~sacred;
	     print "The acoustics of the room change subtly.";
	     new_line;
	     new_line;
	     rtrue;
	  .label19;
	     EchoSub();
	     jump label8;
	],
	contains stairs,
	e_to damp_cave,
	u_to deep_canyon,
	w_to round_room,
  has	dry_land;

Object  -> -> platinum_bar "platinum bar"
  with	adjectives 'platinum' 'large',
	description "On the ground is a large platinum bar.",
	name 'bar' 'platinum' 'treasure',
	size 20,
	take_value 10,
	trophy_value 5,
  has	sacred takeable;

Object  -> damp_cave "Damp Cave"
  with	contains crack,
	description "This cave has exits to the west and east, and narrows to 
          a crack toward the south. The earth is particularly damp  
          here.",
	e_to beach2,
	s_to "It is too narrow for most insects.",
	w_to loud_room,
  has	dry_land;

Object  -> deep_canyon "Deep Canyon"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) rfalse;
	     print "You are on the south edge of a deep canyon. Passages lead off to the east, northwest and southwest. A stairway leads down.";
	     if( ~~Dam_open || Low_tide ) ?label1;
	     print " You can hear a loud roaring sound, like that of rushing water, from below.";
	     jump label2;
	  .label1;
	     if( Dam_open || ~~Low_tide ) ?label3;
	     new_line;
	     rtrue;
	  .label3;
	     print " You can hear the sound of flowing water from below.";
	  .label2;
	     new_line;
	     rtrue;
	],
	contains stairs,
	d_to loud_room,
	e_to dam,
	nw_to reservoir_south,
	sw_to n_s_passage,
  has	dry_land;

Object  -> round_room "Round Room"
  with	description "This is a circular stone room with passages in all       
          directions. Several of them have unfortunately been       
          blocked by cave-ins.",
	e_to loud_room,
	n_to n_s_passage,
	se_to engravings_cave,
	s_to narrow_passage,
	w_to e_w_passage,
  has	dry_land;

Object  -> -> thief "thief"
  with	action [ rarg deadflag obj UNUSED ;
	     if( Verb ~= ##TalkTo ) ?label1;
	     print "The thief is a strong, silent type.";
	     new_line;
	     P_cont = 0;
	     return P_cont;
	  .label1;
	     if( rarg ) ?label2;
	     if( Verb ~= ##Hello || (thief.description) ~= Thief_out_desc ) ?label3;
	     print_ret "The thief, being temporarily incapacitated, is unable to acknowledge your greeting with his usual graciousness.";
	  .label3;
	     if( noun ~= nasty_knife || Verb ~= ##Throw || thief has fightbit ) ?label4;
	     if( ~~Probability(10) ) ?label5;
	     print "You evidently frightened the robber, though you didn't hit him. He flees";
	     if( ~~(obj = child(thief)) ) ?label6;
	     EmptyThiefBag(thief, location);
	     print ", but the contents of his bag fall on the floor.";
	     jump label7;
	  .label6;
	     print ".";
	  .label7;
	     new_line;
	     give thief concealed;
	     rtrue;
	  .label5;
	     print "You missed. The thief makes no attempt to take the knife, though it would be a fine addition to the collection in his bag. He does seem angered by your attempt.";
	     new_line;
	     give thief fightbit;
	     rtrue;
	  .label4;
	     if( Verb ~= ##GiveTo and ##Throw || ~~noun || noun == thief || second ~= thief ) ?label8;
	     if( (thief.strength) >= 0 ) ?label9;
	     thief.strength = 0 - thief.strength;
	     QueueInterrupt(ThiefDaemon)-->0 = 1;
	     RetreiveStiletto();
	     thief.description = Thief_desc;
	     print "Your proposed victim suddenly recovers consciousness.";
	     new_line;
	  .label9;
	     move noun to thief;
	     if( (noun.trophy_value) <= 0 ) ?label10;
	     Thief_engrossed = true;
	     print "The thief is taken aback by your unexpected generosity, but accepts the ";
	     print (object) noun;
	     print_ret " and stops to admire its beauty.";
	  .label10;
	     print "The thief places the ";
	     print (object) noun;
	     print_ret " in his bag and thanks you politely.";
	  .label8;
	     if( Verb ~= ##Take ) ?label11;
	     print_ret "Once you got him, what would you do with him?";
	  .label11;
	     if( Verb ~= ##LookIn and ##Examine ) ?label12;
	     print_ret "The thief is a slippery character with beady eyes that flit back and forth. He carries, along with an unmistakable arrogance, a large bag over his shoulder and a vicious stiletto, whose blade is aimed menacingly in your direction. I'd watch out if I were you.";
	  .label12;
	     if( Verb ~= ##Listen ) rfalse;
	     print_ret "The thief says nothing, as you have not been formally introduced.";
	  .label2;
	     if( rarg ~= M_HANDLED ) ?label13;
	     if( stiletto in thief ) rfalse;
	     if( stiletto notin parent(thief) ) rfalse;
	     move stiletto to thief;
	     give stiletto scenery;
	     if( thief notin location ) rtrue;
	     print "The robber, somewhat surprised at this turn of events, nimbly retrieves his stiletto.";
	     new_line;
	     rtrue;
	  .label13;
	     if( rarg ~= M_ENTER ) ?label14;
	     move stiletto to location;
	     give stiletto ~scenery;
	     obj = ThiefDies(location);
	     if( location ~= treasure_room ) ?label15;
	     if( (obj = child(location)) ) ?label16;
	  .label16;
	     if( obj ) ?label17;
	     print "The chalice is now safe to take.";
	     new_line;
	     jump label18;
	  .label17;
	     if( obj == chalice or thief or cretin ) ?label19;
	     give obj ~concealed;
	     if( deadflag ) ?label20;
	     deadflag = 1;
	     print "As the thief dies, the power of his magic decreases, and his treasures reappear:";
	     new_line;
	  .label20;
	     print "  A ";
	     print (object) obj;
	     if( ~~child(obj) || ~~CanSeeContents(obj) ) ?label21;
	     print ", with ";
	     PrintContents(obj);
	  .label21;
	     new_line;
	  .label19;
	     if( (obj = sibling(obj)) ) ?label22;
	  .label22;
	     jump label16;
	  .label15;
	     if( ~~obj ) ?label18;
	     print "His booty remains.";
	     new_line;
	  .label18;
	     QueueInterrupt(ThiefDaemon)-->0 = 0;
	     rtrue;
	  .label14;
	     if( rarg ~= M_FIGHT ) ?label23;
	     if( ~~Thief_here ) rfalse;
	     if( thief has concealed ) rfalse;
	     if( 20 <= random(100) ) rfalse;
	     give thief fightbit;
	     P_cont = 0;
	     rtrue;
	  .label23;
	     if( rarg ~= M_LOOK ) ?label24;
	     QueueInterrupt(ThiefDaemon)-->0 = 0;
	     give thief ~fightbit;
	     move stiletto to location;
	     give stiletto ~scenery;
	     thief.description = Thief_out_desc;
	     rtrue;
	  .label24;
	     if( rarg ~= M_WAKE ) rfalse;
	     if( parent(thief) ~= location ) ?label25;
	     give thief fightbit;
	     print "The robber revives, briefly feigning continued unconsciousness, and, when he sees his moment, scrambles away from you.";
	     new_line;
	  .label25;
	     QueueInterrupt(ThiefDaemon)-->0 = 1;
	     thief.description = Thief_desc;
	     return RetreiveStiletto();
	],
	adjectives 'shady' 'suspicious' 'seedy',
	description "There is a suspicious-looking individual, holding a large
          bag, leaning against one wall. He is armed with a deadly  
          stiletto.",
	name 'thief' 'robber' 'man' 'person',
	strength 5,
  has	animate concealed container open trytakebit;

Object  -> -> -> large_bag "large bag"
  with	action [ ;
	     if( Verb ~= ##Take ) ?label1;
	     if( (thief.description) ~= Thief_out_desc ) ?label2;
	     print_ret "Sadly for you, the robber collapsed on top of the bag. Trying to take it would wake him.";
	  .label2;
	     print_ret "The bag will be taken over his dead body.";
	  .label1;
	     if( Verb ~= ##Insert || second ~= large_bag ) ?label3;
	     print_ret "It would be a good trick.";
	  .label3;
	     if( Verb ~= ##Close and ##Open ) ?label4;
	     print_ret "Getting close enough would be a good trick.";
	  .label4;
	     if( Verb ~= ##LookIn and ##Examine ) rfalse;
	     print_ret "The bag is underneath the thief, so one can't say what, if anything, is inside.";
	],
	adjectives 'large' 'thiefs',
	name 'bag',
  has	scenery trytakebit;

Object  -> -> -> stiletto "stiletto"
  with	action [ ;
	     return TryTakeWeapon(stiletto, thief);
	],
	adjectives 'vicious',
	name 'stiletto',
	size 10,
  has	scenery takeable trytakebit weapon;

Object  -> e_w_passage "East-West Passage"
  with	contains stairs,
	description "This is a narrow east-west passageway. There is a narrow 
          stairway leading down at the north end of the room.",
	d_to chasm,
	e_to round_room,
	n_to chasm,
	take_value 5,
	w_to the_troll_room,
  has	dry_land;

Object  -> atlantis_room "Atlantis Room"
  with	contains stairs,
	description "This is an ancient room, long under water. There is an   
          exit to the south and a staircase leading up.",
	s_to reservoir_north,
	u_to cave2,
  has	dry_land;

Object  -> -> crystal_trident "crystal trident"
  with	adjectives 'poseidon' 'own' 'crystal',
	initial "On the shore lies Poseidon's own crystal trident.",
	name 'trident' 'fork' 'treasure',
	size 20,
	take_value 4,
	trophy_value 11,
  has	takeable;

Object  -> twisting_passage "Twisting Passage"
  with	description "This is a winding passage. It seems that there are only  
          exits on the east and north.",
	e_to cave2,
	n_to mirror_room1,
  has	dry_land;

Object  -> winding_passage "Winding Passage"
  with	description "This is a winding passage. It seems that there are only  
          exits on the east and north.",
	e_to cave1,
	n_to mirror_room2,
  has	dry_land;

Object  -> narrow_passage "Narrow Passage"
  with	description "This is a long and narrow corridor where a long          
          north-south passageway briefly narrows even further.",
	n_to round_room,
	s_to mirror_room2,
  has	dry_land;

Object  -> cold_passage "Cold Passage"
  with	description "This is a cold and damp corridor where a long east-west  
          passageway turns into a southward path.",
	s_to mirror_room1,
	w_to slide_room,
  has	dry_land;

Object  -> cave1 "Cave"
  with	action [ rarg ;
	     if( rarg ~= M_BEFORE ) rfalse;
	     if( pair_of_candles notin player ) rfalse;
	     if( ~~Probability(50) ) rfalse;
	     if( pair_of_candles hasnt light ) rfalse;
	     QueueInterrupt(CandleDaemon)-->0 = 0;
	     give pair_of_candles ~light;
	     print "A gust of wind blows out your candles!";
	     new_line;
	     Lit = QueryLight(location);
	     if( Lit ) rfalse;
	     print_ret "It is now completely dark.";
	],
	contains stairs,
	description "This is a tiny cave with entrances west and north, and a 
          dark, forbidding staircase leading down.",
	d_to entrance_to_hades,
	n_to mirror_room2,
	w_to winding_passage,
  has	dry_land;

Object  -> cave2 "Cave"
  with	contains stairs,
	description "This is a tiny cave with entrances west and north, and a 
          staircase leading down.",
	d_to atlantis_room,
	n_to mirror_room1,
	s_to atlantis_room,
	w_to twisting_passage,
  has	dry_land;

Object  -> mirror_room2 "Mirror Room"
  with	action MirrorRoomAction,
	e_to cave1,
	n_to narrow_passage,
	w_to winding_passage,
  has	dry_land light;

Object  -> -> mirror2 "mirror"
  with	action MirrorAction,
	name 'reflection' 'mirror' 'enormous',
  has	scenery trytakebit;

Object  -> mirror_room1 "Mirror Room"
  with	action MirrorRoomAction,
	e_to cave2,
	n_to cold_passage,
	w_to twisting_passage,
  has	dry_land;

Object  -> -> mirror1 "mirror"
  with	action MirrorAction,
	name 'reflection' 'mirror' 'enormous',
  has	scenery trytakebit;

Object  -> stream "Stream"
  with	contains water,
	description "You are on the gently flowing stream. The upstream route 
          is too narrow to navigate, and the downstream route is    
          invisible due to twisting walls. There is a narrow beach  
          to land on.",
	d_to reservoir,
	e_to reservoir,
	land_to stream_view,
	pseudo [;
	  "stream": return PseudoStreamAction();
	],
	u_to "The channel is too narrow.",
	w_to "The channel is too narrow.",
  has	water_room;

Object  -> stream_view "Stream View"
  with	contains water,
	description "You are standing on a path beside a gently flowing       
          stream. The path follows the stream, which flows from west
          to east.",
	e_to reservoir_south,
	pseudo [;
	  "stream": return PseudoStreamAction();
	],
	w_to "The stream emerges from a spot too small for you to      
          enter.",
  has	dry_land;

Object  -> reservoir_north "Reservoir North"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) rfalse;
	     if( ~~Low_tide || ~~Dam_open ) ?label1;
	     print "You are in a large cavernous room, the south of which was formerly a lake. However, with the water level lowered, there is merely a wide stream running through there.";
	     jump label2;
	  .label1;
	     if( ~~Dam_open ) ?label3;
	     print "You are in a large cavernous area. To the south is a wide lake, whose water level appears to be falling rapidly.";
	     jump label2;
	  .label3;
	     if( ~~Low_tide ) ?label4;
	     print "You are in a cavernous area, to the south of which is a very wide stream. The level of the stream is rising rapidly, and it appears that before long it will be impossible to cross to the other side.";
	     jump label2;
	  .label4;
	     print "You are in a large cavernous room, north of a large lake.";
	  .label2;
	     new_line;
	     print_ret "There is a slimy stairway leaving the room to the north.";
	],
	contains water stairs,
	n_to atlantis_room,
	pseudo [;
	  "lake": return PseudoLakeAction();
	],
	s_to Low_tide reservoir
	  "You would drown.",
  has	dry_land;

Object  -> -> air_pump "hand-held air pump"
  with	adjectives 'small' 'hand-',
	name 'pump' 'air-p' 'tool' 'tools',
  has	takeable toolbit;

Object  -> reservoir "Reservoir"
  with	action [ rarg ;
	     if( rarg ~= M_BEFORE || parent(player) has vehicle || Dam_open || ~~Low_tide ) ?label1;
	     print_ret "You notice that the water level here is rising rapidly. The currents are also becoming stronger. Staying here seems quite perilous!";
	  .label1;
	     if( rarg ~= M_LOOK ) rfalse;
	     if( ~~Low_tide ) ?label2;
	     print "You are on what used to be a large lake, but which is now a large mud pile. There are ~shores~ to the north and south.";
	     jump label3;
	  .label2;
	     print "You are on the lake. Beaches can be seen north and south. Upstream a small stream enters the lake through a narrow cleft in the rocks. The dam can be seen downstream.";
	  .label3;
	     new_line;
	     rtrue;
	],
	contains water,
	d_to "The dam blocks your way.",
	n_to reservoir_north,
	pseudo [;
	  "stream": return PseudoStreamAction();
	],
	s_to reservoir_south,
	u_to stream,
	w_to stream,
  has	water_room;

Object  -> -> trunk_of_jewels "trunk of jewels"
  with	action [ ;
	     return DoNotEmpty(trunk_of_jewels, "jewels");
	],
	adjectives 'old',
	description "There is an old trunk here, bulging with assorted        
          jewels.",
	initial "Lying half buried in the mud is an old trunk, bulging    
          with jewels.",
	name 'trunk' 'chest' 'jewels' 'treasure',
	size 35,
	take_value 15,
	trophy_value 5,
  has	concealed takeable;

Object  -> reservoir_south "Reservoir South"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) rfalse;
	     if( ~~Low_tide || ~~Dam_open ) ?label1;
	     print "You are in a long room, to the north of which was formerly a lake. However, with the water level lowered, there is merely a wide stream running through the center of the room.";
	     jump label2;
	  .label1;
	     if( ~~Dam_open ) ?label3;
	     print "You are in a long room. To the north is a large lake, too deep to cross. You notice, however, that the water level appears to be dropping at a rapid rate. Before long, it might be possible to cross to the other side from here.";
	     jump label2;
	  .label3;
	     if( ~~Low_tide ) ?label4;
	     print "You are in a long room, to the north of which is a wide area which was formerly a reservoir, but now is merely a stream. You notice, however, that the level of the stream is rising quickly and that before long it will be impossible to cross here.";
	     jump label2;
	  .label4;
	     print "You are in a long room on the south shore of a large lake, far too deep and wide for crossing.";
	  .label2;
	     new_line;
	     print_ret "There is a path along the stream to the east or west, a steep pathway climbing southwest along the edge of a chasm, and a path leading into a canyon to the southeast.";
	],
	contains water,
	e_to dam,
	n_to Low_tide reservoir
	  "You would drown.",
	pseudo [;
	  "lake": return PseudoLakeAction();
	  "chasm": return PseudoChasmAction();
	],
	se_to deep_canyon,
	sw_to chasm,
	w_to stream_view,
  has	dry_land;

Object  -> treasure_room "Treasure Room"
  with	action [ rarg thief_here UNUSED ;
	     if( rarg ~= M_ENTER ) rfalse;
	     if( (QueueInterrupt(ThiefDaemon)-->0) ~= 1 ) rfalse;
	     if( Dead ) rfalse;
	     thief_here = ((thief in location ? 0 : 1));
	     if( ~~thief_here ) ?label3;
	     print "You hear a scream of anguish as you violate the robber's hideaway. Using passages unknown to you, he rushes to its defense.";
	     new_line;
	     move thief to location;
	     give thief fightbit;
	     give thief ~concealed;
	     jump label4;
	  .label3;
	     give thief fightbit;
	  .label4;
	     return ThiefInTreasure();
	],
	contains stairs,
	description "This is a large room, whose east wall is solid granite. A
          number of discarded bags, which crumble at your touch, are
          scattered about on the floor. There is an exit down a     
          staircase.",
	d_to cyclops_room,
	take_value 25,
  has	dry_land;

Object  -> -> chalice "chalice"
  with	action [ ;
	     if( Verb ~= ##Take ) ?label1;
	     if( noun notin treasure_room ) rfalse;
	     if( thief notin treasure_room ) rfalse;
	     if( thief hasnt fightbit ) rfalse;
	     if( thief has concealed ) rfalse;
	     if( (thief.description) == Thief_out_desc ) rfalse;
	     print_ret "You'd be stabbed in the back first.";
	  .label1;
	     if( Verb ~= ##Insert || second ~= chalice ) ?label2;
	     print_ret "You can't. It's not a very good chalice, is it?";
	  .label2;
	     return PedestalAction();
	],
	adjectives 'silver' 'engravings',
	capacity 5,
	description "There is a silver chalice, intricately engraved, here.",
	name 'chalic' 'cup' 'silver' 'treasure',
	size 10,
	take_value 10,
	trophy_value 5,
  has	container takeable trytakebit;

Object  -> strange_passage "Strange Passage"
  with	description "This is a long passage. To the west is one entrance. On  
          the east there is an old wooden door, with a large opening
          in it (about cyclops sized).",
	e_to living_room,
	in_to cyclops_room,
	w_to cyclops_room,
  has	dry_land;

Object  -> cyclops_room "Cyclops Room"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) ?label1;
	     print "This room has an exit on the northwest, and a staircase leading up.";
	     new_line;
	     if( ~~Cyclops_flag || Magic_flag ) ?label2;
	     print_ret "The cyclops is sleeping blissfully at the foot of the stairs.";
	  .label2;
	     if( ~~Magic_flag ) ?label3;
	     print_ret "The east wall, previously solid, now has a cyclops-sized opening in it.";
	  .label3;
	     if( Cyclowrath ) ?label4;
	     print_ret "A cyclops, who looks prepared to eat horses (much less mere adventurers), blocks the staircase. From his state of health, and the bloodstains on the walls, you gather that he is not very friendly, though he likes people.";
	  .label4;
	     if( Cyclowrath <= 0 ) ?label5;
	     print_ret "The cyclops is standing in the corner, eyeing you closely. I don't think he likes you very much. He looks extremely hungry, even for a cyclops.";
	  .label5;
	     if( Cyclowrath >= 0 ) rfalse;
	     print_ret "The cyclops, having eaten the hot peppers, appears to be gasping. His enflamed tongue protrudes from his man-sized mouth.";
	  .label1;
	     if( rarg ~= M_ENTER ) rfalse;
	     if( ~~Cyclowrath ) rtrue;
	     QueueInterrupt(CyclopsDaemon)-->0 = 1;
	     rtrue;
	],
	contains stairs,
	e_to Magic_flag strange_passage
	  "The east wall is solid rock.",
	nw_to maze8,
	u_to Cyclops_flag treasure_room
	  "The cyclops doesn't look like he'll let you past.",
  has	dry_land;

Object  -> -> cyclops "cyclops"
  with	action [ wrath ;
	     wrath = Cyclowrath;
	     if( player ~= cyclops ) ?label1;
	     if( ~~Cyclops_flag ) ?label2;
	     print_ret "No use talking to him. He's fast asleep.";
	  .label2;
	     if( Verb ~= ##Odysseus ) ?label3;
	     player = cretin;
	     Perform(Odysseus);
	     rtrue;
	  .label3;
	     print_ret "The cyclops prefers eating to making conversation.";
	  .label1;
	     if( ~~Cyclops_flag ) ?label4;
	     if( Verb ~= ##Examine ) ?label5;
	     print_ret "The cyclops is sleeping like a baby, albeit a very ugly one.";
	  .label5;
	     if( Verb == ##Attack or ##Kick or ##Wake ) ?label6;
	     if( Verb ~= ##Poke and ##Burn ) rfalse;
	  .label6;
	     print "The cyclops yawns and stares at the thing that woke him up.";
	     new_line;
	     Cyclops_flag = false;
	     give cyclops fightbit;
	     if( wrath >= 0 ) ?label7;
	     Cyclowrath = 0 - wrath;
	     return Cyclowrath;
	  .label7;
	     Cyclowrath = wrath;
	     return Cyclowrath;
	  .label4;
	     if( Verb ~= ##Examine ) ?label8;
	     print_ret "A hungry cyclops is standing at the foot of the stairs.";
	  .label8;
	     if( Verb ~= ##GiveTo || second ~= cyclops ) ?label9;
	     if( noun ~= lunch ) ?label10;
	     if( wrath < 0 ) ?label11;
	     Remove(lunch);
	     print "The cyclops says ~Mmm Mmm. I love hot peppers! But oh, could I use a drink. Perhaps I could drink the blood of that thing.~  From the gleam in his eye, it could be surmised that you are ~that thing~.";
	     new_line;
	     Cyclowrath = Least(-1, 0 - wrath);
	  .label11;
	     Queue(CyclopsDaemon, -1)-->0 = 1;
	     rtrue;
	  .label10;
	     if( noun == quantity_of_water ) ?label12;
	     if( noun ~= glass_bottle || quantity_of_water notin glass_bottle ) ?label13;
	  .label12;
	     if( wrath >= 0 ) ?label14;
	     Remove(quantity_of_water);
	     move glass_bottle to location;
	     give glass_bottle open;
	     give cyclops ~fightbit;
	     print "The cyclops takes the bottle, checks that it's open, and drinks the water. A moment later, he lets out a yawn that nearly blows you over, and then falls fast asleep (what did you put in that drink, anyway?).";
	     new_line;
	     Cyclops_flag = true;
	     return Cyclops_flag;
	  .label14;
	     print_ret "The cyclops apparently is not thirsty and refuses your generous offer.";
	  .label13;
	     if( noun ~= clove_of_garlic ) ?label15;
	     print_ret "The cyclops may be hungry, but there is a limit.";
	  .label15;
	     print_ret "The cyclops is not so stupid as to eat THAT!";
	  .label9;
	     if( Verb ~= ##Poke and ##Attack and ##Throw ) ?label16;
	     Queue(CyclopsDaemon, -1)-->0 = 1;
	     if( Verb ~= ##Poke ) ?label17;
	     print_ret "~Do you think I'm as stupid as my father was?~, he says, dodging.";
	  .label17;
	     print "The cyclops shrugs but otherwise ignores your pitiful attempt.";
	     new_line;
	     if( Verb ~= ##Throw ) rtrue;
	     move noun to location;
	     rtrue;
	  .label16;
	     if( Verb ~= ##Take ) ?label18;
	     print_ret "The cyclops doesn't take kindly to being grabbed.";
	  .label18;
	     if( Verb ~= ##TieTo ) ?label19;
	     print_ret "You cannot tie the cyclops, though he is fit to be tied.";
	  .label19;
	     if( Verb ~= ##Listen ) rfalse;
	     print_ret "You can hear his stomach rumbling.";
	],
	adjectives 'hungry' 'giant',
	name 'cyclops' 'monster' 'eye',
	strength 10000,
  has	animate scenery trytakebit;

Object  -> maze8 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	se_to cyclops_room,
	s_to maze7,
	w_to maze9,
  has	dry_land maze_room;

Object  -> maze9 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	ne_to maze7,
	nw_to maze9,
	s_to maze7,
	w_to maze8,
  has	dry_land maze_room;

Object  -> maze10 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	d_to maze12,
	e_to maze15,
	s_to maze14,
	w_to maze13,
  has	dry_land maze_room;

Object  -> maze11 "Dead End"
  with	description "You have come to a dead end in the maze.",
	s_to maze12,
  has	dry_land maze_room;

Object  -> maze12 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	d_to DownMazeAction,
	e_to maze10,
	n_to maze11,
	sw_to maze13,
	u_to maze15,
  has	dry_land maze_room;

Object  -> grating_room "Grating Room"
  with	action [ rarg ;
	     if( rarg ~= M_ENTER ) ?label1;
	     give grating ~concealed;
	     rtrue;
	  .label1;
	     if( rarg ~= M_LOOK ) rfalse;
	     print "You are in a small room near the maze. There are twisty passages in the immediate vicinity.";
	     new_line;
	     if( grating hasnt open ) ?label2;
	     print "Above you is an open grating with sunlight pouring in.";
	     jump label3;
	  .label2;
	     if( ~~Grate_unlocked ) ?label4;
	     print "Above you is a grating.";
	     jump label3;
	  .label4;
	     print "Above you is a grating locked with a skull-and-crossbones lock.";
	  .label3;
	     new_line;
	     rtrue;
	],
	contains grating,
	sw_to maze13,
	u_to clearing1 grating "The grating is closed." 0,
  has	dry_land;

Object  -> maze13 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	d_to maze14,
	ne_to grating_room,
	nw_to maze10,
	sw_to maze12,
  has	dry_land maze_room;

Object  -> maze14 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	e_to maze15,
	u_to maze13,
	w_to maze10,
  has	dry_land maze_room;

Object  -> maze15 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	d_to DownMazeAction,
	e_to maze14,
	n_to maze6,
	nw_to maze15,
	s_to maze10,
	w_to maze12,
  has	dry_land maze_room;

Object  -> maze16 "Dead End"
  with	description "You have come to a dead end in the maze.",
	n_to maze17,
  has	dry_land maze_room;

Object  -> maze17 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	ne_to maze7,
	se_to maze16,
	w_to maze17,
  has	dry_land maze_room;

Object  -> maze7 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	d_to DownMazeAction,
	e_to maze17,
	s_to maze8,
	u_to maze9,
	w_to maze6,
  has	dry_land maze_room;

Object  -> maze6 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	d_to maze5,
	e_to maze7,
	u_to maze15,
	w_to maze6,
  has	dry_land maze_room;

Object  -> maze18 "Dead End"
  with	description "You have come to a dead end in the maze.",
	w_to maze5,
  has	dry_land maze_room;

Object  -> maze5 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike. A skeleton, probably the remains of a luckless     
          adventurer, lies here.",
	e_to maze18,
	n_to maze3,
	sw_to maze6,
  has	dry_land maze_room;

Object  -> -> skeleton "skeleton"
  with	action [ ;
	     if( Verb == ##Move or ##Touch or ##Take || Verb == ##Lower or ##Raise or ##Push ) ?label1;
	     if( Verb ~= ##Kiss and ##Kick and ##Attack ) rfalse;
	  .label1;
	     print "A ghost appears in the room and is appalled at your desecration of the remains of a fellow adventurer. He casts a curse on your valuables and banishes them to the Land of the Living Dead. The ghost leaves, muttering obscenities.";
	     new_line;
	     Rob(location, land_of_the_dead, 100);
	     Rob(cretin, land_of_the_dead);
	     rtrue;
	],
	name 'bones' 'skeleton' 'body',
  has	scenery trytakebit;

Object  -> -> skeleton_key "skeleton key"
  with	adjectives 'skeleton',
	name 'key',
	size 10,
  has	takeable toolbit;

Object  -> -> rusty_knife "rusty knife"
  with	action [ ;
	     if( Verb ~= ##Take ) ?label1;
	     if( sword notin player ) rfalse;
	     print "As you touch the rusty knife, your sword gives a single pulse of blinding blue light.";
	     new_line;
	     rfalse;
	  .label1;
	     if( second ~= rusty_knife ) ?label2;
	     if( Verb == ##Attack ) ?label3;
	  .label2;
	     if( Verb ~= ##Swing ) rfalse;
	     if( noun ~= rusty_knife ) rfalse;
	     if( ~~second ) rfalse;
	  .label3;
	     Remove(rusty_knife);
	     return JigsUp("As the knife approaches its victim, your mind is submerged by an overmastering will. Slowly, your hand turns, until the rusty blade is an inch from your neck. The knife seems to sing as it savagely slits your throat.");
	],
	adjectives 'rusty',
	initial "Beside the skeleton is a rusty knife.",
	name 'knives' 'knife',
	size 20,
  has	takeable toolbit trytakebit weapon;

Object  -> -> bag_of_coins "leather bag of coins"
  with	action [ ;
	     return DoNotEmpty(bag_of_coins, "coins");
	],
	adjectives 'old' 'leather',
	description "An old leather bag, bulging with coins, is here.",
	name 'bag' 'coins' 'treasure',
	size 15,
	take_value 10,
	trophy_value 5,
  has	takeable;

Object  -> -> burned_out_lantern "burned-out lantern"
  with	adjectives 'rusty' 'burned' 'dead' 'useless',
	initial "The deceased adventurer's useless lantern is here.",
	name 'lantern' 'lamp',
	size 20,
  has	takeable;

Object  -> maze19 "Dead End"
  with	description "You have come to a dead end in the maze.",
	s_to maze2,
  has	dry_land maze_room;

Object  -> maze2 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	e_to maze19,
	n_to maze1,
	w_to maze3,
  has	dry_land maze_room;

Object  -> maze3 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	n_to maze2,
	u_to maze5,
	w_to maze4,
  has	dry_land maze_room;

Object  -> maze4 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	d_to DownMazeAction,
	e_to maze3,
	s_to maze1,
  has	dry_land maze_room;

Object  -> maze1 "Maze"
  with	description "This is part of a maze of twisty little passages, all    
          alike.",
	e_to the_troll_room,
	n_to maze1,
	s_to maze4,
	w_to maze2,
  has	dry_land maze_room;

Object  -> studio "Studio"
  with	contains chimney,
	description "This appears to have been an artist's studio. The walls  
          and floors are splattered with paints of 69 different     
          colors. Strangely enough, nothing of value is hanging     
          here. At the south end of the room is an open door (also  
          covered with paint). A dark and narrow chimney leads up   
          from a fireplace; although you might be able to get up it,
          it seems unlikely you could get back down.",
	pseudo [;
	  "door": return PseudoDoorAction();
	  "paint": return PseudoPaintAction();
	],
	s_to gallery,
	u_to [ obj ;
	     if( (obj = child(player)) ) ?label1;
	     print "Going up empty-handed is a bad idea.";
	     new_line;
	     rfalse;
	  .label1;
	     if( ~~(obj = sibling(obj)) ) ?label2;
	     if( sibling(obj) || brass_lantern notin player ) ?label3;
	     if( trap_door has open ) ?label4;
	     give trap_door ~visited;
	     return 203;
	  .label4;
	     return 203;
	  .label3;
	     print "You can't get up there with what you're carrying.";
	     new_line;
	     rfalse;
	],
  has	dry_land;

Object  -> -> zork_owners_manual "ZORK owner's manual"
  with	adjectives 'zork' 'owners' 'small',
	initial "Loosely attached to a wall is a small piece of paper.",
	name 'manual' 'piece' 'paper',
	text_string "^Congratulations!^^You are the privileged owner of ZORK  
          I: The Great Underground Empire, a self-contained and     
          self-maintaining universe. If used and maintained in      
          accordance with normal operating practices for small      
          universes, ZORK will provide many months of trouble-free  
          operation.^^",
  has	readable takeable;

Object  -> gallery "Gallery"
  with	description "This is an art gallery. Most of the paintings have been  
          stolen by vandals with exceptional taste. The vandals left
          through either the north or west exits.",
	n_to studio,
	w_to east_of_chasm,
  has	dry_land light;

Object  -> -> painting "painting"
  with	action [ ;
	     if( Verb ~= ##Poke ) rfalse;
	     noun.trophy_value = 0;
	     noun.description = "There is a worthless piece of canvas here.";
	     print_ret "Congratulations! Unlike the other vandals, who merely stole the artist's masterpieces, you have destroyed one.";
	],
	adjectives 'beautiful',
	description "A painting by a neglected genius is here.",
	initial "Fortunately, there is still one chance for you to be a   
          vandal, for on the far wall is a painting of unparalleled 
          beauty.",
	name 'painting' 'art' 'canvas' 'treasure',
	size 15,
	take_value 4,
	trophy_value 6,
  has	flammable takeable;

Object  -> east_of_chasm "East of Chasm"
  with	description "You are on the east edge of a chasm, the bottom of which 
          cannot be seen. A narrow passage goes north, and the path 
          you are on continues to the east.",
	d_to "The chasm probably leads straight to the infernal        
          regions.",
	e_to gallery,
	n_to cellar,
	pseudo [;
	  "chasm": return PseudoChasmAction();
	],
  has	dry_land;

Object  -> the_troll_room "The Troll Room"
  with	action [ rarg ;
	     if( rarg ~= M_ENTER ) rfalse;
	     if( troll notin location ) rfalse;
	     return SetLastObject(troll);
	],
	description "This is a small room with passages to the east and south 
          and a forbidding hole leading west. Bloodstains and deep  
          scratches (perhaps made by an axe) mar the walls.",
	e_to Troll_flag e_w_passage
	  "The troll fends you off with a menacing gesture.",
	s_to cellar,
	w_to Troll_flag maze1
	  "The troll fends you off with a menacing gesture.",
  has	dry_land;

Object  -> -> troll "troll"
  with	action [ rarg ;
	     if( Verb ~= ##TalkTo ) ?label1;
	     print "The troll isn't much of a conversationalist.";
	     new_line;
	     P_cont = 0;
	     return P_cont;
	  .label1;
	     if( rarg ~= M_HANDLED ) ?label2;
	     if( bloody_axe in troll ) rfalse;
	     if( bloody_axe notin location || ~~Probability(75) ) ?label3;
	     give bloody_axe scenery;
	     give bloody_axe ~weapon;
	     move bloody_axe to troll;
	     troll.description = "A nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room.";
	     if( troll notin location ) rtrue;
	     print_ret "The troll, angered and humiliated, recovers his weapon. He appears to have an axe to grind with you.";
	  .label3;
	     if( troll notin location ) rfalse;
	     troll.description = "A pathetically babbling troll is here.";
	     print "The troll, disarmed, cowers in terror, pleading for his life in the guttural tongue of the trolls.";
	     new_line;
	     rtrue;
	  .label2;
	     if( rarg ~= M_ENTER ) ?label4;
	     if( bloody_axe notin troll ) ?label5;
	     move bloody_axe to location;
	     give bloody_axe ~scenery;
	     give bloody_axe weapon;
	  .label5;
	     Troll_flag = true;
	     return Troll_flag;
	  .label4;
	     if( rarg ~= M_LOOK ) ?label6;
	     give troll ~fightbit;
	     if( bloody_axe notin troll ) ?label7;
	     move bloody_axe to location;
	     give bloody_axe ~scenery;
	     give bloody_axe weapon;
	  .label7;
	     troll.description = "An unconscious troll is sprawled on the floor. All passages out of the room are open.";
	     Troll_flag = true;
	     return Troll_flag;
	  .label6;
	     if( rarg ~= M_WAKE ) ?label8;
	     if( troll notin location ) ?label9;
	     give troll fightbit;
	     print "The troll stirs, quickly resuming a fighting stance.";
	     new_line;
	  .label9;
	     if( bloody_axe notin troll ) ?label10;
	     troll.description = "A nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room.";
	     jump label11;
	  .label10;
	     if( bloody_axe notin the_troll_room ) ?label12;
	     give bloody_axe scenery;
	     give bloody_axe ~weapon;
	     move bloody_axe to troll;
	     troll.description = "A nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room.";
	     jump label11;
	  .label12;
	     troll.description = "A troll is here.";
	  .label11;
	     Troll_flag = false;
	     return Troll_flag;
	  .label8;
	     if( rarg ~= M_FIGHT ) ?label13;
	     if( 33 <= random(100) ) rfalse;
	     give troll fightbit;
	     P_cont = 0;
	     rtrue;
	  .label13;
	     if( rarg ) rfalse;
	     if( Verb ~= ##Examine ) ?label14;
	     print (string) (troll.description);
	     new_line;
	     rtrue;
	  .label14;
	     if( Verb ~= ##GiveTo and ##Throw || ~~noun ) ?label15;
	     if( second == troll ) ?label16;
	  .label15;
	     if( Verb ~= ##Poke and ##Move and ##Take ) ?label17;
	  .label16;
	     CheckStrength(troll);
	     if( Verb ~= ##GiveTo and ##Throw ) ?label18;
	     if( noun ~= bloody_axe || bloody_axe notin player ) ?label19;
	     print "The troll scratches his head in confusion, then takes the axe.";
	     new_line;
	     give troll fightbit;
	     move bloody_axe to troll;
	     rtrue;
	  .label19;
	     if( noun ~= troll and bloody_axe ) ?label20;
	     print "You would have to get the ";
	     print (object) noun;
	     print_ret " first, and that seems unlikely.";
	  .label20;
	     if( Verb ~= ##Throw ) ?label21;
	     print "The troll, who is remarkably coordinated, catches the ";
	     print (object) noun;
	     jump label22;
	  .label21;
	     print "The troll, who is not overly proud, graciously accepts the gift";
	  .label22;
	     if( 20 <= random(100) || noun ~= nasty_knife and sword and bloody_axe ) ?label23;
	     Remove(noun);
	     print " and eats it hungrily. Poor troll, he dies from an internal hemorrhage and his carcass disappears in a sinister black fog.";
	     new_line;
	     Remove(troll);
	     (troll.action)(2);
	     Troll_flag = true;
	     return Troll_flag;
	  .label23;
	     if( noun ~= nasty_knife and sword and bloody_axe ) ?label24;
	     move noun to location;
	     print " and, being for the moment sated, throws it back. Fortunately, the troll has poor control, and the ";
	     print (object) noun;
	     print " falls to the floor. He does not look pleased.";
	     new_line;
	     give troll fightbit;
	     rtrue;
	  .label24;
	     print " and not having the most discriminating tastes, gleefully eats it.";
	     new_line;
	     return Remove(noun);
	  .label18;
	     if( Verb ~= ##Move and ##Take ) ?label25;
	     print_ret "The troll spits in your face, grunting ~Better luck next time~ in a rather barbarous accent.";
	  .label25;
	     if( Verb ~= ##Poke ) rfalse;
	     print_ret "The troll laughs at your puny gesture.";
	  .label17;
	     if( Verb ~= ##Listen ) ?label26;
	     print_ret "Every so often the troll says something, probably uncomplimentary, in his guttural tongue.";
	  .label26;
	     if( ~~Troll_flag ) rfalse;
	     if( Verb ~= ##Hello ) rfalse;
	     print_ret "Unfortunately, the troll can't hear you.";
	],
	adjectives 'nasty',
	description "A nasty-looking troll, brandishing a bloody axe, blocks  
          all passages out of the room.",
	name 'troll',
	strength 2,
  has	animate open trytakebit;

Object  -> -> -> bloody_axe "bloody axe"
  with	action [ ;
	     if( Troll_flag ) rfalse;
	     return TryTakeWeapon(bloody_axe, troll);
	],
	adjectives 'bloody',
	name 'axe' 'ax',
	size 25,
  has	scenery takeable trytakebit weapon;

Object  -> cellar "Cellar"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) ?label1;
	     print_ret "You are in a dark and damp cellar with a narrow passageway leading north, and a crawlway to the south. On the west is the bottom of a steep metal ramp which is unclimbable.";
	  .label1;
	     if( rarg ~= M_ENTER ) rfalse;
	     if( trap_door hasnt open ) rfalse;
	     if( trap_door has visited ) rfalse;
	     give trap_door ~open;
	     give trap_door visited;
	     print "The trap door crashes shut, and you hear someone barring it.";
	     new_line;
	     new_line;
	     rtrue;
	],
	contains trap_door chute stairs,
	n_to the_troll_room,
	s_to east_of_chasm,
	take_value 25,
	u_to living_room trap_door 0 0 0,
	w_to "You try to ascend the ramp, but it is impossible, and you
          slide back down.",
  has	dry_land;

Object  -> living_room "Living Room"
  with	action [ rarg rugflag UNUSED ;
	     if( rarg ~= M_LOOK ) ?label1;
	     print "You are in the living room. There is a doorway to the east";
	     if( ~~Magic_flag ) ?label2;
	     print ". To the west is a cyclops-shaped opening in an old wooden door, above which is some strange gothic lettering, ";
	     jump label3;
	  .label2;
	     print ", a wooden door with strange gothic lettering to the west, which appears to be nailed shut, ";
	  .label3;
	     print "a trophy case, ";
	     rugflag = Rug_moved;
	     if( ~~rugflag || trap_door hasnt open ) ?label4;
	     print "and a rug lying beside an open trap door.";
	     jump label5;
	  .label4;
	     if( ~~rugflag ) ?label6;
	     print "and a closed trap door at your feet.";
	     jump label5;
	  .label6;
	     if( trap_door hasnt open ) ?label7;
	     print "and an open trap door at your feet.";
	     jump label5;
	  .label7;
	     print "and a large oriental rug in the center of the room.";
	  .label5;
	     new_line;
	     rtrue;
	  .label1;
	     if( rarg ~= M_BEFORE ) rfalse;
	     if( Verb == ##Take ) ?label8;
	     if( Verb ~= ##Insert ) rfalse;
	     if( second ~= trophy_case ) rfalse;
	  .label8;
	     if( noun notin trophy_case ) ?label9;
	     RecurseTouch(noun);
	  .label9;
	     score = Base_score + TrophyValue();
	     ScoreUPD(0);
	     rfalse;
	],
	contains stairs,
	d_to [ ;
	     if( ~~Rug_moved ) ?label1;
	     if( trap_door hasnt open ) ?label2;
	     return 72;
	  .label2;
	     print "The trap door is closed.";
	     new_line;
	     SetLastObject(trap_door);
	     rfalse;
	  .label1;
	     print "You can't go that way.";
	     new_line;
	     rfalse;
	],
	e_to kitchen,
	pseudo [;
	  "nails": return PseudoNailAction();
	  "nail": return PseudoNailAction();
	],
	w_to Magic_flag strange_passage
	  "The door is nailed shut.",
  has	dry_land light sacred;

Object  -> -> trophy_case "trophy case"
  with	action [ ;
	     if( Verb ~= ##Take ) rfalse;
	     if( noun ~= trophy_case ) rfalse;
	     print_ret "The trophy case is securely fastened to the wall.";
	],
	adjectives 'trophy',
	capacity 10000,
	name 'case',
  has	container magic scenery transparent trytakebit;

Object  -> -> -> ancient_map "ancient map"
  with	adjectives 'antique' 'old' 'ancient',
	initial "In the trophy case is an ancient parchment which appears 
          to be a map.",
	name 'parchm' 'map',
	size 2,
	text_string "The map shows a forest with three clearings. The largest 
          clearing contains a house. Three paths leave the large    
          clearing. One of these paths, leading southwest, is marked
          ~To Stone Barrow~.",
  has	concealed readable takeable;

Object  -> -> sword "sword"
  with	action [ villainnear ;
	     if( Verb ~= ##Take || player ~= cretin ) ?label1;
	     Queue(SwordDaemon, -1)-->0 = 1;
	     rfalse;
	  .label1;
	     if( Verb ~= ##Examine ) rfalse;
	     villainnear = sword.trophy_value;
	     if( villainnear ~= 1 ) ?label2;
	     print_ret "Your sword is glowing with a faint blue glow.";
	  .label2;
	     if( villainnear ~= 2 ) rfalse;
	     print_ret "Your sword is glowing very brightly.";
	],
	adjectives 'elvish' 'old' 'antique',
	initial "Above the trophy case hangs an elvish sword of great     
          antiquity.",
	name 'sword' 'orcrist' 'glamdring' 'blade',
	size 30,
	trophy_value 0,
  has	takeable trytakebit weapon;

Object  -> -> wooden_door "wooden door"
  with	action DoorAction,
	adjectives 'wooden' 'gothic' 'strange' 'west',
	name 'door' 'letter' 'writing',
	text_string "The engravings translate to ~This space intentionally    
          left blank.~",
  has	door readable scenery transparent;

Object  -> -> brass_lantern "brass lantern"
  with	action [ ;
	     if( Verb ~= ##Throw ) ?label1;
	     print "The lamp has smashed into the floor, and the light has gone out.";
	     new_line;
	     QueueInterrupt(LampDaemon)-->0 = 0;
	     Remove(brass_lantern);
	     move broken_lantern to location;
	     rtrue;
	  .label1;
	     if( Verb ~= ##SwitchOn ) ?label2;
	     if( brass_lantern hasnt rmungbit ) ?label3;
	     print_ret "A burned-out lamp won't light.";
	  .label3;
	     QueueInterrupt(LampDaemon)-->0 = 1;
	     rfalse;
	  .label2;
	     if( Verb ~= ##SwitchOff ) ?label4;
	     if( brass_lantern hasnt rmungbit ) ?label5;
	     print_ret "The lamp has already burned out.";
	  .label5;
	     QueueInterrupt(LampDaemon)-->0 = 0;
	     rfalse;
	  .label4;
	     if( Verb ~= ##Examine ) rfalse;
	     print "The lamp ";
	     if( brass_lantern hasnt rmungbit ) ?label6;
	     print "has burned out.";
	     jump label7;
	  .label6;
	     if( brass_lantern hasnt light ) ?label8;
	     print "is on.";
	     jump label7;
	  .label8;
	     print "is turned off.";
	  .label7;
	     new_line;
	     rtrue;
	],
	adjectives 'brass',
	description "There is a brass lantern (battery-powered) here.",
	initial "A battery-powered brass lantern is on the trophy case.",
	name 'lamp' 'lantern' 'light',
	size 15,
  has	on takeable;

Object  -> -> trap_door "trap door"
  with	action [ ;
	     if( Verb ~= ##Raise ) ?label1;
	     Perform(Open, trap_door);
	     rtrue;
	  .label1;
	     if( Verb ~= ##Close and ##Open || location ~= living_room ) ?label2;
	     return OpenOrClose(noun, "The door reluctantly opens to reveal a rickety staircase descending into darkness.", "The door swings shut and closes.");
	  .label2;
	     if( Verb ~= ##LookUnder || location ~= living_room ) ?label3;
	     if( trap_door hasnt open ) ?label4;
	     print_ret "You see a rickety staircase descending into darkness.";
	  .label4;
	     print_ret "It's closed.";
	  .label3;
	     if( location ~= cellar ) rfalse;
	     if( Verb ~= ##Unlock and ##Open || trap_door has open ) ?label5;
	     print_ret "The door is locked from above.";
	  .label5;
	     if( Verb ~= ##Close || trap_door has open ) ?label6;
	     give trap_door ~visited;
	     give trap_door ~open;
	     print_ret "The door closes and locks.";
	  .label6;
	     if( Verb ~= ##Close and ##Open ) rfalse;
	     print (string) ComplexPickOne(Dummy_table);
	     new_line;
	     rtrue;
	],
	adjectives 'trap' 'dusty',
	name 'door' 'trapdoor' 'trap-' 'cover',
  has	concealed door scenery;

Object  -> -> carpet "carpet"
  with	action [ ;
	     if( Verb ~= ##Raise ) ?label1;
	     print "The rug is too heavy to lift";
	     if( ~~Rug_moved ) ?label2;
	     print_ret ".";
	  .label2;
	     print_ret ", but in trying to take it you have noticed an irregularity beneath it.";
	  .label1;
	     if( Verb ~= ##Push and ##Move ) ?label3;
	     if( ~~Rug_moved ) ?label4;
	     print_ret "Having moved the carpet previously, you find it impossible to move it again.";
	  .label4;
	     print "With a great effort, the rug is moved to one side of the room, revealing the dusty cover of a closed trap door.";
	     new_line;
	     give trap_door ~concealed;
	     SetLastObject(trap_door);
	     Rug_moved = true;
	     return Rug_moved;
	  .label3;
	     if( Verb ~= ##Take ) ?label5;
	     print_ret "The rug is extremely heavy and cannot be carried.";
	  .label5;
	     if( Verb ~= ##LookUnder || Rug_moved || trap_door has open ) ?label6;
	     print_ret "Underneath the rug is a closed trap door. As you drop the corner of the rug, the trap door is once again concealed from view.";
	  .label6;
	     if( Verb ~= ##ClimbOn ) rfalse;
	     if( Rug_moved || trap_door has open ) ?label7;
	     print_ret "As you sit, you notice an irregularity underneath it. Rather than be uncomfortable, you stand up again.";
	  .label7;
	     print_ret "I suppose you think it's a magic carpet?";
	],
	adjectives 'large' 'oriental',
	name 'rug' 'carpet',
  has	scenery trytakebit;

Object  -> attic "Attic"
  with	contains stairs,
	description "This is the attic. The only exit is a stairway leading   
          down.",
	d_to kitchen,
  has	dry_land sacred;

Object  -> -> table "table"
  with	capacity 40,
	name 'table',
  has	container open scenery supporter;

Object  -> -> -> nasty_knife "nasty knife"
  with	action [ ;
	     if( Verb ~= ##Take ) rfalse;
	     give table ~scenery;
	     rfalse;
	],
	adjectives 'nasty' 'unrusted',
	initial "On a table is a nasty-looking knife.",
	name 'knives' 'knife' 'blade',
  has	takeable trytakebit weapon;

Object  -> -> rope "rope"
  with	action [ env ;
	     if( location == dome_room ) ?label1;
	     Dome_flag = false;
	     if( Verb ~= ##TieTo ) rfalse;
	     print_ret "You can't tie the rope to that.";
	  .label1;
	     if( Verb ~= ##TieTo ) ?label2;
	     if( second ~= wooden_railing ) rfalse;
	     if( ~~Dome_flag ) ?label3;
	     print_ret "The rope is already tied to it.";
	  .label3;
	     print "The rope drops over the side and comes within ten feet of the floor.";
	     new_line;
	     Dome_flag = true;
	     give rope scenery;
	     env = parent(rope);
	     if( ~~env ) ?label4;
	     if( env in rooms ) rtrue;
	  .label4;
	     move rope to location;
	     rtrue;
	  .label2;
	     if( Verb ~= ##ClimbDown || noun ~= rope || ~~Dome_flag ) ?label5;
	     return PlayerToProp(self.d_to);
	  .label5;
	     if( Verb ~= ##TieWith || 129 ~= second ) ?label6;
	     if( noun hasnt animate ) ?label7;
	     if( (noun.strength) >= 0 ) ?label8;
	     print "Your attempt to tie up the ";
	     print (object) noun;
	     print " awakens him.";
	     return CheckStrength(noun);
	  .label8;
	     print "The ";
	     print (object) noun;
	     print_ret " struggles and you cannot tie him up.";
	  .label7;
	     print "Why would you tie up a ";
	     print (object) noun;
	     print_ret "?";
	  .label6;
	     if( Verb ~= ##Untie ) ?label9;
	     if( ~~Dome_flag ) ?label10;
	     Dome_flag = false;
	     give rope ~scenery;
	     print_ret "The rope is now untied.";
	  .label10;
	     print_ret "It is not tied to anything.";
	  .label9;
	     if( Verb ~= ##Drop || location ~= dome_room || Dome_flag ) ?label11;
	     move rope to torch_room;
	     print_ret "The rope drops gently to the floor below.";
	  .label11;
	     if( Verb ~= ##Take ) rfalse;
	     if( ~~Dome_flag ) rfalse;
	     print_ret "The rope is tied to the railing.";
	],
	adjectives 'large',
	initial "A large coil of rope is lying in the corner.",
	name 'rope' 'hemp' 'coil',
	size 10,
  has	sacred takeable trytakebit;

Object  -> kitchen "Kitchen"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) ?label1;
	     print "You are in the kitchen of the white house. A table seems to have been used recently for the preparation of food. A passage leads to the west and a dark staircase can be seen leading upward. A dark chimney leads down and to the east is a small window which is ";
	     if( kitchen_window hasnt open ) ?label2;
	     print_ret "open.";
	  .label2;
	     print_ret "slightly ajar.";
	  .label1;
	     if( rarg ~= M_HANDLED ) rfalse;
	     if( Verb ~= ##ClimbUp || noun ~= stairs ) ?label3;
	     return PlayerToProp(self.u_to);
	  .label3;
	     if( Verb ~= ##ClimbUp ) rfalse;
	     if( noun ~= stairs ) rfalse;
	     print_ret "There are no stairs leading down.";
	],
	contains kitchen_window chimney stairs,
	d_to Chimney_flag studio
	  "Only Santa Claus climbs down chimneys.",
	e_to east_of_house kitchen_window 0 0 0,
	out_to east_of_house kitchen_window 0 0 0,
	take_value 10,
	u_to attic,
	w_to living_room,
  has	dry_land light sacred;

Object  -> -> kitchen_table "kitchen table"
  with	adjectives 'kitchen',
	capacity 50,
	name 'table',
  has	container open scenery supporter;

Object  -> -> -> brown_sack "brown sack"
  with	action [ ;
	     if( Verb ~= ##Smell ) rfalse;
	     if( lunch notin noun ) rfalse;
	     print_ret "It smells of hot peppers.";
	],
	adjectives 'brown' 'elongated' 'smelly',
	capacity 15,
	initial "On the table is an elongated brown sack, smelling of hot 
          peppers.",
	name 'bag' 'sack',
	size 3,
  has	container flammable takeable;

Object  -> -> -> -> lunch "lunch"
  with	adjectives 'hot' 'pepper',
	description "A hot pepper sandwich is here.",
	name 'food' 'sandwich' 'lunch' 'dinner',
  has	edible takeable;

Object  -> -> -> -> clove_of_garlic "clove of garlic"
  with	action [ ;
	     if( Verb ~= ##Eat ) rfalse;
	     Remove(noun);
	     print_ret "What the heck! You won't make friends this way, but nobody around here is too friendly anyhow. Gulp!";
	],
	name 'garlic' 'clove',
  has	edible takeable;

Object  -> -> -> glass_bottle "glass bottle"
  with	action [ filled ;
	     if( Verb ~= ##Throw || noun ~= glass_bottle ) ?label1;
	     Remove(noun);
	     filled = 1;
	     print "The bottle hits the far wall and shatters.";
	     new_line;
	     jump label2;
	  .label1;
	     if( Verb ~= ##Poke ) ?label3;
	     filled = 1;
	     Remove(noun);
	     print "A brilliant maneuver destroys the bottle.";
	     new_line;
	     jump label2;
	  .label3;
	     if( Verb ~= ##Shake || noun hasnt open || quantity_of_water notin noun ) ?label2;
	     filled = 1;
	  .label2;
	     if( ~~filled || quantity_of_water notin noun ) ?label4;
	     print "The water spills to the floor and evaporates.";
	     new_line;
	     Remove(quantity_of_water);
	     rtrue;
	  .label4;
	     if( ~~filled ) rfalse;
	     rtrue;
	],
	adjectives 'clear' 'glass',
	capacity 4,
	initial "A bottle is sitting on the table.",
	name 'bottle' 'container',
  has	container takeable transparent;

Object  -> -> -> -> quantity_of_water "quantity of water"
  with	action WaterFunction,
	name 'water' 'quantity' 'liquid' 'h2o',
	size 4,
  has	drinkable takeable trytakebit;

Object  -> clearing2 "Clearing"
  with	action ForestAction,
	contains tree songbird white_house forest,
	description "You are in a small clearing in a well marked forest path 
          that extends to the east and west.",
	e_to canyon_view,
	n_to forest2,
	s_to forest4,
	u_to "There is no tree here suitable for climbing.",
	w_to east_of_house,
  has	dry_land light sacred;

Object  -> clearing1 "Clearing"
  with	action [ rarg ;
	     if( rarg ~= M_ENTER ) ?label1;
	     if( Leaves_moved ) rfalse;
	     give grating concealed;
	     rtrue;
	  .label1;
	     if( rarg ~= M_LOOK ) rfalse;
	     print "You are in a clearing, with a forest surrounding you on all sides. A path leads south.";
	     if( grating hasnt open ) ?label2;
	     new_line;
	     print "There is an open grating, descending into darkness.";
	     jump label3;
	  .label2;
	     if( ~~Leaves_moved ) ?label3;
	     new_line;
	     print "There is a grating securely fastened into the ground.";
	  .label3;
	     new_line;
	     rtrue;
	],
	contains white_house grating,
	d_to [ ;
	     if( ~~Leaves_moved ) ?label1;
	     if( grating hasnt open ) ?label2;
	     return 57;
	  .label2;
	     print "The grating is closed!";
	     new_line;
	     SetLastObject(grating);
	     rfalse;
	  .label1;
	     print "You can't go that way.";
	     new_line;
	     rfalse;
	],
	e_to forest2,
	n_to "The forest becomes impenetrable to the north.",
	s_to forest_path,
	w_to forest1,
  has	dry_land light sacred;

Object  -> -> pile_of_leaves "pile of leaves"
  with	action [ ;
	     if( Verb ~= ##Count ) ?label1;
	     print_ret "There are 69,105 leaves here.";
	  .label1;
	     if( Verb ~= ##Burn ) ?label2;
	     RevealGrating();
	     Remove(noun);
	     if( noun notin location ) ?label3;
	     print_ret "The leaves burn.";
	  .label3;
	     return JigsUp("The leaves burn, and so do you.");
	  .label2;
	     if( Verb ~= ##Cut ) ?label4;
	     print "You rustle the leaves around, making quite a mess.";
	     new_line;
	     RevealGrating();
	     rtrue;
	  .label4;
	     if( Verb ~= ##Take and ##Move ) ?label5;
	     if( Verb ~= ##Move ) ?label6;
	     print "Done.";
	     new_line;
	  .label6;
	     if( Leaves_moved ) rfalse;
	     RevealGrating();
	     if( Verb ~= ##Take ) rtrue;
	     rfalse;
	  .label5;
	     if( Verb ~= ##LookUnder ) rfalse;
	     if( Leaves_moved ) rfalse;
	     print_ret "Underneath the pile of leaves is a grating. As you release the leaves, the grating is once again concealed from view.";
	],
	description "On the ground is a pile of leaves.",
	name 'leaves' 'leaf' 'pile',
	size 25,
  has	flammable takeable trytakebit;

Object  -> up_a_tree "Up a Tree"
  with	action [ rarg itm ;
	     if( rarg ~= M_LOOK ) ?label1;
	     print "You are about 10 feet above the ground nestled among some large branches. The nearest branch above you is above your reach.";
	     new_line;
	     if( ~~(itm = child(forest_path)) ) rfalse;
	     if( ~~sibling(itm) ) rfalse;
	     print "On the ground below you can see:  ";
	     PrintContents(forest_path);
	     print_ret ".";
	  .label1;
	     if( rarg ~= M_HANDLED ) ?label2;
	     if( Verb ~= ##ClimbDown || noun ~= tree ) ?label3;
	     return PlayerToProp(self.d_to);
	  .label3;
	     if( Verb ~= ##ClimbObj and ##ClimbUp || noun ~= tree ) ?label4;
	     return PlayerToProp(self.u_to);
	  .label4;
	     if( Verb ~= ##Drop ) rfalse;
	     if( ~~Idrop() ) rtrue;
	     if( noun ~= birds_nest || jeweled_egg notin birds_nest ) ?label5;
	     print "The nest falls to the ground, and the egg spills out of it, seriously damaged.";
	     new_line;
	     Remove(jeweled_egg);
	     move broken_egg to forest_path;
	     rtrue;
	  .label5;
	     if( noun ~= jeweled_egg ) ?label6;
	     print "The egg falls to the ground and springs open, seriously damaged.";
	     move jeweled_egg to forest_path;
	     BreakEgg();
	     new_line;
	     rtrue;
	  .label6;
	     if( noun == player or tree ) ?label7;
	     move noun to forest_path;
	     print "The ";
	     print (object) noun;
	     print_ret " falls to the ground.";
	  .label7;
	     if( Verb ~= ##Dive ) rfalse;
	     return JigsUp("That was just a bit too far down.");
	  .label2;
	     if( rarg ~= M_ENTER ) rfalse;
	     Queue(SongbirdDaemon, -1)-->0 = 1;
	     rtrue;
	],
	contains tree forest songbird white_house,
	d_to forest_path,
	u_to "You cannot climb any higher.",
  has	dry_land light sacred;

Object  -> -> birds_nest "bird's nest"
  with	adjectives 'birds',
	capacity 20,
	initial "Beside you on the branch is a small bird's nest.",
	name 'nest',
  has	container flammable magic open takeable;

Object  -> -> -> jeweled_egg "jewel-encrusted egg"
  with	action [ ;
	     if( Verb ~= ##Poke and ##Open || noun ~= jeweled_egg ) ?label1;
	     if( noun hasnt open ) ?label2;
	     print_ret "The egg is already open.";
	  .label2;
	     if( second ) ?label3;
	     print_ret "You have neither the tools nor the expertise.";
	  .label3;
	     if( second ~= pair_of_hands ) ?label4;
	     print_ret "I doubt you could do that without damaging it.";
	  .label4;
	     if( second has weapon || second has toolbit ) ?label5;
	     if( Verb ~= ##Poke ) ?label6;
	  .label5;
	     print "The egg is now open, but the clumsiness of your attempt has seriously compromised its esthetic appeal.";
	     BreakEgg();
	     new_line;
	     rtrue;
	  .label6;
	     if( noun hasnt fightbit ) ?label7;
	     print "Not to say that using the ";
	     print (object) second;
	     print_ret " isn't original too...";
	  .label7;
	     print "The concept of using a ";
	     print (object) second;
	     print " is certainly original.";
	     new_line;
	     give noun fightbit;
	     rtrue;
	  .label1;
	     if( Verb ~= ##Hatch and ##ClimbOn ) ?label8;
	     print "There is a noticeable crunch from beneath you, and inspection reveals that the egg is lying open, badly damaged.";
	     BreakEgg();
	     new_line;
	     rtrue;
	  .label8;
	     if( Verb ~= ##Throw and ##Poke and ##Open ) rfalse;
	     if( Verb ~= ##Throw ) ?label9;
	     move noun to location;
	  .label9;
	     print "Your rather indelicate handling of the egg has caused it some damage, although you have succeeded in opening it.";
	     BreakEgg();
	     new_line;
	     rtrue;
	],
	adjectives 'birds' 'encrusted' 'jeweled',
	capacity 6,
	initial "In the bird's nest is a large egg encrusted with precious
          jewels, apparently scavenged by a childless songbird. The 
          egg is covered with fine gold inlay, and ornamented in    
          lapis lazuli and mother-of-pearl. Unlike most eggs, this  
          one is hinged and closed with a delicate looking clasp.   
          The egg appears extremely fragile.",
	name 'egg' 'treasure',
	take_value 5,
	trophy_value 5,
  has	container magic takeable;

Object  -> -> -> -> golden_canary "golden clockwork canary"
  with	action CanaryAction,
	adjectives 'clockw' 'gold' 'golden',
	initial "There is a golden clockwork canary nestled in the egg. It
          has ruby eyes and a silver beak. Through a crystal window 
          below its left wing you can see intricate machinery       
          inside. It appears to have wound down.",
	name 'canary' 'treasure',
	take_value 6,
	trophy_value 4,
  has	magic takeable;

Object  -> forest_path "Forest Path"
  with	action ForestAction,
	contains tree songbird white_house forest,
	description "This is a path winding through a dimly lit forest. The   
          path heads north-south here. One particularly large tree  
          with some low branches stands at the edge of the path.",
	e_to forest2,
	n_to clearing1,
	s_to north_of_house,
	u_to up_a_tree,
	w_to forest1,
  has	dry_land light sacred;

Object  -> forest4 "Forest"
  with	action ForestAction,
	contains tree songbird white_house forest,
	description "This is a dimly lit forest, with large trees all around.",
	e_to "The rank undergrowth prevents eastward movement.",
	n_to clearing2,
	nw_to south_of_house,
	s_to "Storm-tossed trees block your way.",
	u_to "There is no tree here suitable for climbing.",
	w_to forest1,
  has	dry_land light sacred;

Object  -> forest3 "Forest"
  with	contains tree white_house,
	description "The forest thins out, revealing impassable mountains.",
	e_to "The mountains are impassable.",
	n_to forest2,
	s_to forest2,
	u_to "The mountains are impassable.",
	w_to forest2,
  has	dry_land light sacred;

Object  -> -> mountain_range "mountain range"
  with	action [ ;
	     if( Verb ~= ##ClimbObj and ##ClimbDown and ##ClimbUp ) rfalse;
	     print_ret "Don't you believe me? The mountains are impassable!";
	],
	adjectives 'impassable' 'flathead',
	name 'mountain' 'range',
  has	climbable scenery;

Object  -> forest2 "Forest"
  with	action ForestAction,
	contains tree songbird white_house forest,
	description "This is a dimly lit forest, with large trees all around.",
	e_to forest3,
	n_to "The forest becomes impenetrable to the north.",
	s_to clearing2,
	u_to "There is no tree here suitable for climbing.",
	w_to forest_path,
  has	dry_land light sacred;

Object  -> forest1 "Forest"
  with	action ForestAction,
	contains tree songbird white_house forest,
	description "This is a forest, with trees in all directions. To the   
          east, there appears to be sunlight.",
	e_to forest_path,
	n_to clearing1,
	s_to forest4,
	u_to "There is no tree here suitable for climbing.",
	w_to "You would need a machete to go further west.",
  has	dry_land light sacred;

Object  -> east_of_house "Behind House"
  with	action [ rarg ;
	     if( rarg ~= M_LOOK ) rfalse;
	     print "You are behind the white house. A path leads into the forest to the east. In one corner of the house there is a small window which is ";
	     if( kitchen_window hasnt open ) ?label1;
	     print "open.";
	     jump label2;
	  .label1;
	     print "slightly ajar.";
	  .label2;
	     new_line;
	     rtrue;
	],
	contains white_house kitchen_window,
	e_to clearing2,
	in_to kitchen kitchen_window 0 0 0,
	n_to north_of_house,
	nw_to north_of_house,
	s_to south_of_house,
	sw_to south_of_house,
	w_to kitchen kitchen_window 0 0 0,
  has	dry_land light sacred;

Object  -> south_of_house "South of House"
  with	contains boarded_window board white_house,
	description "You are facing the south side of a white house. There is 
          no door here, and all the windows are boarded.",
	e_to east_of_house,
	ne_to east_of_house,
	n_to "The windows are all boarded.",
	nw_to west_of_house,
	s_to forest4,
	w_to west_of_house,
  has	dry_land light sacred;

Object  -> north_of_house "North of House"
  with	contains boarded_window board white_house,
	description "You are facing the north side of a white house. There is 
          no door here, and all the windows are boarded up. To the  
          north a narrow path winds through the trees.",
	e_to east_of_house,
	n_to forest_path,
	se_to east_of_house,
	s_to "The windows are all boarded.",
	sw_to west_of_house,
	w_to west_of_house,
  has	dry_land light sacred;

Object  -> stone_barrow "Stone Barrow"
  with	action [ rarg ;
	     if( rarg ~= M_HANDLED ) rfalse;
	     if( Verb == ##Enter ) ?label1;
	     if( Verb ~= ##Walk ) ?label2;
	     if( noun == aragain_falls or ladder_top ) ?label1;
	  .label2;
	     if( Verb ~= ##EnterObj ) rfalse;
	     if( noun ~= stone_barrow_ob ) rfalse;
	  .label1;
	     print "Inside the Barrow^As you enter the barrow, the door closes inexorably behind you. Around you it is dark, but ahead is an enormous cavern, brightly lit. Through its center runs a wide stream. Spanning the stream is a small wooden footbridge, and beyond a path leads into a dark tunnel. Above the bridge, floating in the air, is a large sign. It reads:  All ye who stand before this bridge have completed a great and perilous adventure which has tested your wit and courage. You have mastered";
	     if( ($0->1 & 8) ) ?label3;
	     print " the first part of the ZORK trilogy. Those who pass over this bridge must be prepared to undertake an even greater adventure that will severely test your skill and bravery!^^The ZORK trilogy continues with ~ZORK II: The Wizard of Frobozz~ and is completed in ~ZORK III: The Dungeon Master.~";
	     new_line;
	     jump label4;
	  .label3;
	     print " ZORK: The Great Underground Empire.^";
	     new_line;
	  .label4;
	     return QuitSub(0);
	],
	description "You are standing in front of a massive barrow of stone.  
          In the east face is a huge stone door which is open. You  
          cannot see into the dark of the tomb.",
	ne_to west_of_house,
  has	dry_land light sacred;

Object  -> -> stone_door "stone door"
  with	action [ ;
	     if( Verb ~= ##Close and ##Open ) rfalse;
	     print_ret "The door is too heavy.";
	],
	adjectives 'huge' 'stone',
	name 'door',
  has	door scenery;

Object  -> -> stone_barrow_ob "stone barrow"
  with	action [ ;
	     if( Verb ~= ##EnterObj ) rfalse;
	     return PlayerToProp(self.w_to);
	],
	adjectives 'massive' 'stone',
	name 'barrow' 'tomb',
  has	scenery;

Object  brass_bauble "beautiful brass bauble"
  with	adjectives 'brass' 'beautiful',
	name 'bauble' 'treasure',
	take_value 1,
	trophy_value 1,
  has	takeable;

Object  broken_egg "broken jewel-encrusted egg"
  with	adjectives 'broken' 'birds' 'encrusted' 'jewel',
	capacity 6,
	description "There is a somewhat ruined egg here.",
	name 'egg' 'treasure',
	trophy_value 2,
  has	container open takeable;

Object  -> broken_canary "broken clockwork canary"
  with	action CanaryAction,
	adjectives 'broken' 'clockw' 'gold' 'golden',
	initial "There is a golden clockwork canary nestled in the egg. It
          seems to have recently had a bad experience. The mountings
          for its jewel-like eyes are empty, and its silver beak is 
          crumpled. Through a cracked crystal window below its left 
          wing you can see the remains of intricate machinery. It is
          not clear what result winding it would have, as the       
          mainspring seems sprung.",
	name 'canary' 'treasure',
	trophy_value 1,
  has	takeable;

Object  punctured_boat "punctured boat"
  with	action [ ;
	     if( Verb ~= ##PutOn and ##Insert || noun ~= viscous_material ) ?label1;
	     return RepairBoat();
	  .label1;
	     if( Verb ~= ##Fill and ##Inflate ) ?label2;
	     print_ret "No chance. Some moron punctured it.";
	  .label2;
	     if( Verb ~= ##Fix ) rfalse;
	     if( second ~= viscous_material ) ?label3;
	     return RepairBoat();
	  .label3;
	     return WithTell(second);
	],
	adjectives 'plastic' 'punctured' 'large',
	name 'boat' 'pile' 'plastic',
	size 20,
  has	flammable takeable;

Object  vitreous_slag "small piece of vitreous slag"
  with	action [ ;
	     Remove(vitreous_slag);
	     print_ret "The slag was rather insubstantial, and crumbles into dust at your touch.";
	],
	adjectives 'small' 'vitreous',
	name 'gunk' 'piece' 'slag',
	size 10,
  has	takeable trytakebit;

Object  magic_boat "magic boat"
  with	action [ rarg body_of_water ;
	     if( rarg == M_ENTER or M_BEFORE or M_LOOK ) rfalse;
	     if( rarg ~= M_HANDLED ) ?label1;
	     if( Verb ~= ##Walk ) ?label2;
	     if( noun == mine4 or shore or aragain_falls ) rfalse;
	     if( location ~= reservoir ) ?label3;
	     if( noun == river1 or on_the_rainbow ) rfalse;
	  .label3;
	     if( location ~= stream ) ?label4;
	     if( noun == on_the_rainbow ) rfalse;
	  .label4;
	     print_ret "Read the label for the boat's instructions.";
	  .label2;
	     if( Verb ~= ##Launch ) ?label5;
	     if( location == river4 or river3 or river2 ) ?label6;
	     if( location ~= frigid_river and reservoir and stream ) ?label7;
	  .label6;
	     print "You are on the ";
	     if( location ~= reservoir ) ?label8;
	     print "reservoir";
	     jump label9;
	  .label8;
	     if( location ~= stream ) ?label10;
	     print "stream";
	     jump label9;
	  .label10;
	     print "river";
	  .label9;
	     print_ret ", or have you forgotten?";
	  .label7;
	     body_of_water = GoNext(Near_water);
	     if( body_of_water ~= 1 ) ?label11;
	     Queue(RiverDaemon, SearchArray(location, River_speeds))-->0 = 1;
	     rtrue;
	  .label11;
	     if( body_of_water == 2 ) rtrue;
	     print_ret "You can't launch it here.";
	  .label5;
	     if( Verb ~= ##Drop ) ?label12;
	     if( noun has weapon ) ?label13;
	  .label12;
	     if( Verb ~= ##Insert || noun hasnt weapon ) ?label14;
	     if( second == magic_boat ) ?label13;
	  .label14;
	     if( Verb ~= ##Poke and ##Attack || second hasnt weapon ) ?label15;
	  .label13;
	     Remove(magic_boat);
	     move punctured_boat to location;
	     Rob(magic_boat, location);
	     move player to location;
	     print "It seems that the ";
	     if( Verb ~= ##Insert and ##Drop ) ?label16;
	     print (object) noun;
	     jump label17;
	  .label16;
	     print (object) second;
	  .label17;
	     print " didn't agree with the boat, as evidenced by the loud hissing noise issuing therefrom. With a pathetic sputter, the boat deflates, leaving you without.";
	     new_line;
	     if( location hasnt water_room ) rtrue;
	     new_line;
	     if( location ~= reservoir and stream ) ?label18;
	     JigsUp("Another pathetic sputter, this time from you, heralds your drowning.");
	     rtrue;
	  .label18;
	     JigsUp("In other words, fighting the fierce currents of the Frigid River. You manage to hold your own for a bit, but then you are carried over a waterfall and into some nasty rocks. Ouch!");
	     rtrue;
	  .label15;
	     if( Verb ~= ##Launch ) rfalse;
	     print_ret "You're not in the boat!";
	  .label1;
	     if( Verb ~= ##Board ) ?label19;
	     if( sceptre in player || nasty_knife in player || sword in player || rusty_knife in player || bloody_axe in player ) ?label20;
	     if( stiletto notin player ) rfalse;
	  .label20;
	     print "Oops! Something sharp seems to have slipped and punctured the boat. The boat deflates to the sounds of hissing, sputtering, and cursing.";
	     new_line;
	     Remove(magic_boat);
	     move punctured_boat to location;
	     SetLastObject(punctured_boat);
	     rtrue;
	  .label19;
	     if( Verb ~= ##Fill and ##Inflate ) ?label21;
	     print_ret "Inflating it further would probably burst it.";
	  .label21;
	     if( Verb ~= ##Deflate ) rfalse;
	     if( parent(player) ~= 156 ) ?label22;
	     print_ret "You can't deflate the boat while you're in it.";
	  .label22;
	     if( magic_boat in location ) ?label23;
	     print_ret "The boat must be on the ground to be deflated.";
	  .label23;
	     print "The boat deflates.";
	     new_line;
	     Deflated = true;
	     Remove(magic_boat);
	     move pile_of_plastic to location;
	     return SetLastObject(pile_of_plastic);
	],
	adjectives 'inflatable' 'magic' 'plastic' 'seaworthy',
	capacity 100,
	name 'boat' 'raft',
	size 20,
	vtype 4,
  has	flammable magic open takeable vehicle;

Object  -> tan_label "tan label"
  with	adjectives 'tan' 'fine',
	name 'label' 'fineprint' 'print',
	size 2,
	text_string "	  !!!! 	FROBOZZ MAGIC BOAT COMPANY  !!!!^^Hello,        
          Sailor!^^Instructions for use:^^   To get into a body of  
          water, say ~Launch~.^   To get to shore, say ~Land~ or the
          direction in which you want to maneuver the               
          boat.^^Warranty:^^  This boat is guaranteed against all   
          defects for a period of 76 milliseconds from date of      
          purchase or until first used, whichever comes             
          first.^^Warning:^   This boat is made of thin plastic.^   
          Good Luck!^",
  has	flammable readable takeable;

Object  huge_diamond "huge diamond"
  with	adjectives 'huge' 'enormous',
	description "There is an enormous diamond (perfectly cut) here.",
	name 'diamon' 'treasure',
	take_value 10,
	trophy_value 10,
  has	takeable;

Object  broken_lantern "broken lantern"
  with	adjectives 'broken',
	name 'lamp' 'lantern',
  has	takeable;

Object  red_hot_bell "red hot brass bell"
  with	action [ ;
	     if( Verb ~= ##Take ) ?label1;
	     print_ret "The bell is very hot and cannot be taken.";
	  .label1;
	     if( Verb == ##Touch ) ?label2;
	     if( Verb ~= ##Ring || ~~second ) ?label3;
	  .label2;
	     if( second hasnt flammable ) ?label4;
	     print "The ";
	     print (object) second;
	     print " burns and is consumed.";
	     new_line;
	     return Remove(second);
	  .label4;
	     if( second ~= pair_of_hands ) ?label5;
	     print_ret "The bell is too hot to touch.";
	  .label5;
	     print_ret "The heat from the bell is too intense.";
	  .label3;
	     if( Verb ~= ##Pour ) ?label6;
	     Remove(noun);
	     print "The water cools the bell and is evaporated.";
	     new_line;
	     Queue(CoolBell, 0);
	     return CoolBell();
	  .label6;
	     if( Verb ~= ##Ring ) rfalse;
	     print_ret "The bell is too hot to reach.";
	],
	adjectives 'brass' 'hot' 'red' 'small',
	description "On the ground is a red hot bell.",
	name 'bell',
  has	trytakebit;

Object  global_objects ""
  has	clothing concealed dry_land fightbit light magic open rmungbit staggered supporter transparent trytakebit visited;

Object  -> set_of_teeth "set of teeth"
  with	action [ ;
	     if( Verb ~= ##Brush ) rfalse;
	     if( noun ~= set_of_teeth ) rfalse;
	     if( second ~= viscous_material || second notin player ) ?label1;
	     return JigsUp("Well, you seem to have been brushing your teeth with some sort of glue. As a result, your mouth gets glued together (with your nose) and you die of respiratory failure.");
	  .label1;
	     if( second ) ?label2;
	     print_ret "Dental hygiene is highly recommended, but I'm not sure what you want to brush them with.";
	  .label2;
	     print "A nice idea, but with a ";
	     print (object) second;
	     print_ret "?";
	],
	name 'overboard' 'teeth',
  has	scenery;

Object  -> pair_of_hands "pair of hands"
  with	adjectives 'bare',
	name 'pair' 'hands' 'hand',
  has	scenery toolbit;

Object  -> zorkmid "zorkmid"
  with	action [ ;
	     if( Verb ~= ##Examine ) ?label1;
	     print_ret "The zorkmid is the unit of currency of the Great Underground Empire.";
	  .label1;
	     if( Verb ~= ##Find ) rfalse;
	     print_ret "The best way to find zorkmids is to go out and look for them.";
	],
	name 'zorkmid',
;

Object  -> way "way"
  with	action WayAction,
	adjectives 'forest' 'narrow' 'long' 'winding',
	name 'passage' 'crawlway' 'trail' 'path',
  has	scenery;

Object  -> you "you"
  with	action [ in_mirror_room ;
	     if( Verb ~= ##TalkTo ) ?label1;
	     P_cont = 0;
	     P_unknown1 = 0;
	     print_ret "Talking to yourself is said to be a sign of impending mental collapse.";
	  .label1;
	     if( Verb ~= ##GiveTo || second ~= you ) ?label2;
	     Perform(Take, noun);
	     rtrue;
	  .label2;
	     if( Verb ~= ##Make ) ?label3;
	     print_ret "Only you can do that.";
	  .label3;
	     if( Verb ~= ##Disembark ) ?label4;
	     print_ret "You'll have to do that on your own.";
	  .label4;
	     if( Verb ~= ##Eat ) ?label5;
	     print_ret "Auto-cannibalism is not the answer.";
	  .label5;
	     if( Verb ~= ##Poke and ##Attack ) ?label6;
	     if( ~~second || second hasnt weapon ) ?label7;
	     return JigsUp("If you insist.... Poof, you're dead!");
	  .label7;
	     print_ret "Suicide is not the answer.";
	  .label6;
	     if( Verb ~= ##Take ) ?label8;
	     print_ret "How romantic!";
	  .label8;
	     if( Verb ~= ##Examine ) rfalse;
	     in_mirror_room = parent(mirror1);
	     if( location ~= in_mirror_room and parent(mirror2) ) ?label9;
	     print_ret "Your image in the mirror looks tired.";
	  .label9;
	     print_ret "That's difficult unless your eyes are prehensile.";
	],
	name 'me' 'myself' 'self' 'cretin',
  has	animate;

Object  -> blast_of_air "blast of air"
  with	name 'lungs' 'air' 'mouth' 'breath',
  has	scenery;

Object  -> lurking_grue "lurking grue"
  with	action [ ;
	     if( Verb ~= ##Examine ) ?label1;
	     print_ret "The grue is a sinister, lurking presence in the dark places of the earth. Its favorite diet is adventurers, but its insatiable appetite is tempered by its fear of light. No grue has ever been seen by the light of day, and few have survived its fearsome jaws to tell the tale.";
	  .label1;
	     if( Verb ~= ##Find ) ?label2;
	     print_ret "There is no grue here, but I'm sure there is at least one lurking in the darkness nearby. I wouldn't let my light go out if I were you!";
	  .label2;
	     if( Verb ~= ##Listen ) rfalse;
	     print_ret "It makes no sound but is always lurking in the darkness nearby.";
	],
	adjectives 'lurking' 'sinister' 'hungry' 'silent',
	name 'grue',
;

Object  -> ground "ground"
  with	action [ ;
	     if( Verb ~= ##PutOn and ##Insert || second ~= ground ) ?label1;
	     Perform(Drop, noun);
	     rtrue;
	  .label1;
	     if( location ~= sandy_cave ) ?label2;
	     return SandFunction();
	  .label2;
	     if( Verb ~= ##Dig ) rfalse;
	     print_ret "The ground is too hard for digging here.";
	],
	name 'ground' 'sand' 'dirt' 'floor',
;

Object  -> sailor "sailor"
  with	action [ ;
	     if( Verb ~= ##Hello ) rfalse;
	     HS_count++;
	     Zork2_deletion();
	     if( (HS_count % 20) ) ?label1;
	     print_ret "You seem to be repeating yourself.";
	  .label1;
	     if( (HS_count % 10) ) ?label2;
	     print_ret "I think that phrase is getting a bit worn out.";
	  .label2;
	     print_ret "Nothing happens here.";
	],
	name 'sailor' 'footpad' 'aviator',
  has	scenery;

Object  -> blessings "blessings"
  with	name 'blessings' 'graces',
  has	scenery;

Object  -> it_object "random object"
  with	name 'it' 'them' 'her' 'him',
  has	scenery visited;

Object  -> number_ob "number"
  with	name 'intnum',
  has	toolbit;

Object  -> local_globals ""
  with	capacity 0,
	contains global_objects,
	description "F",
	initial "F",
	initial2 WayAction,
	name 'zzmgck',
	property2 0,
	property3 0,
	pseudo [;
	  "foobar": return WalkSub();
	],
	size 0,
	vtype 1,
;

Object  -> -> board "board"
  with	action [ ;
	     if( Verb ~= ##Examine and ##Take ) rfalse;
	     print_ret "The boards are securely fastened.";
	],
	name 'boards' 'board',
  has	scenery;

Object  -> -> stairs "stairs"
  with	action [ ;
	     if( Verb ~= ##EnterObj ) rfalse;
	     print_ret "You should say whether you want to go up or down.";
	],
	adjectives 'stone' 'dark' 'marble' 'forbidding' 'steep',
	name 'stairs' 'steps' 'staircase' 'stairway',
  has	climbable scenery;

Object  -> -> pseudo "pseudo"
  with	action PseudoAction,
;

Object  -> -> white_cliffs "white cliffs"
  with	action [ ;
	     if( Verb ~= ##ClimbObj and ##ClimbDown and ##ClimbUp ) rfalse;
	     print_ret "The cliff is too steep for climbing.";
	],
	adjectives 'white',
	name 'cliff' 'cliffs',
  has	climbable scenery;

Object  -> -> cliff "cliff"
  with	action [ ;
	     if( Verb == ##Dive ) ?label1;
	     if( Verb ~= ##Insert || noun ~= you ) ?label2;
	  .label1;
	     print_ret "That would be very unwise. Perhaps even fatal.";
	  .label2;
	     if( second ~= cliff ) rfalse;
	     if( Verb ~= ##ThrowOver and ##Insert ) rfalse;
	     print "The ";
	     print (object) noun;
	     print " tumbles into the river and is seen no more.";
	     new_line;
	     return Remove(noun);
	],
	adjectives 'rocky' 'sheer',
	name 'wall' 'cliff' 'walls' 'ledge',
  has	climbable scenery;

Object  -> -> wooden_ladder "wooden ladder"
  with	adjectives 'wooden' 'ricketty' 'narrow',
	name 'ladder',
  has	climbable scenery;

Object  -> -> river "river"
  with	action [ ;
	     if( Verb ~= ##Insert ) ?label1;
	     if( second ~= river ) rfalse;
	     if( noun ~= you ) ?label2;
	     return JigsUp("You splash around for a while, fighting the current, then you drown.");
	  .label2;
	     if( noun ~= magic_boat ) ?label3;
	     print_ret "You should get in the boat then launch it.";
	  .label3;
	     if( noun hasnt flammable ) ?label4;
	     Remove(noun);
	     print "The ";
	     print (object) noun;
	     print_ret " floats for a moment, then sinks.";
	  .label4;
	     Remove(noun);
	     print "The ";
	     print (object) noun;
	     print_ret " splashes into the water and is gone forever.";
	  .label1;
	     if( Verb ~= ##EnterObj and ##Dive ) rfalse;
	     print_ret "A look before leaping reveals that the river is wide and dangerous, with swift currents and large, half-hidden rocks. You decide to forgo your swim.";
	],
	adjectives 'frigid',
	name 'river',
  has	scenery;

Object  -> -> rainbow "rainbow"
  with	action [ ;
	     if( Verb ~= ##EnterObj and ##Cross ) ?label1;
	     if( location ~= canyon_view ) ?label2;
	     print_ret "From here?!?";
	  .label2;
	     if( ~~Rainbow_flag ) ?label3;
	     if( location ~= aragain_falls ) ?label4;
	     return Goto(end_of_rainbow);
	  .label4;
	     if( location ~= end_of_rainbow ) ?label5;
	     return Goto(aragain_falls);
	  .label5;
	     print_ret "You'll have to say which way...";
	  .label3;
	     print_ret "Can you walk on water vapor?";
	  .label1;
	     if( Verb ~= ##LookUnder ) rfalse;
	     print_ret "The Frigid River flows under the rainbow.";
	],
	name 'rainbow',
  has	climbable scenery;

Object  -> -> pile_of_bodies "pile of bodies"
  with	action [ ;
	     if( Verb ~= ##Take ) ?label1;
	     print_ret "A force keeps you from taking the bodies.";
	  .label1;
	     if( Verb ~= ##Burn and ##Poke ) rfalse;
	     return JigsUp("The voice of the guardian of the dungeon booms out from the darkness, ~Your disrespect costs you your life!~ and places your head on a sharp pole.");
	],
	adjectives 'mangled',
	name 'bodies' 'body' 'remains' 'pile',
  has	scenery trytakebit;

Object  -> -> grating "grating"
  with	action [ ;
	     if( Verb ~= ##Open || second ~= skeleton_key ) ?label1;
	     Perform(Unlock, grating, skeleton_key);
	     rtrue;
	  .label1;
	     if( Verb ~= ##Lock ) ?label2;
	     if( location ~= grating_room ) ?label3;
	     Grate_unlocked = false;
	     print_ret "The grate is locked.";
	  .label3;
	     if( location ~= clearing1 ) rfalse;
	     print_ret "You can't lock it from this side.";
	  .label2;
	     if( Verb ~= ##Unlock || noun ~= grating ) ?label4;
	     if( location ~= grating_room || second ~= skeleton_key ) ?label5;
	     Grate_unlocked = true;
	     print_ret "The grate is unlocked.";
	  .label5;
	     if( location ~= clearing1 || second ~= skeleton_key ) ?label6;
	     print_ret "You can't reach the lock from here.";
	  .label6;
	     print "Can you unlock a grating with a ";
	     print (object) second;
	     print_ret "?";
	  .label4;
	     if( Verb ~= ##Pick ) ?label7;
	     print_ret "You can't pick the lock.";
	  .label7;
	     if( Verb ~= ##Close and ##Open ) ?label8;
	     if( ~~Grate_unlocked ) ?label9;
	     OpenOrClose(grating, (location ~= clearing2 ? "The grating opens." : "The grating opens to reveal trees above you."), "The grating is closed.");
	     if( grating hasnt open ) ?label12;
	     if( location == clearing2 || Leaves_moved ) ?label13;
	     print "A pile of leaves falls onto your head and to the ground.";
	     new_line;
	     Leaves_moved = true;
	     move pile_of_leaves to location;
	  .label13;
	     give grating_room light;
	     rtrue;
	  .label12;
	     give grating_room ~light;
	     rtrue;
	  .label9;
	     print_ret "The grating is locked.";
	  .label8;
	     if( Verb ~= ##Insert ) rfalse;
	     if( second ~= grating ) rfalse;
	     if( (noun.size) <= 20 ) ?label14;
	     print_ret "It won't fit through the grating.";
	  .label14;
	     move noun to grating_room;
	     print "The ";
	     print (object) noun;
	     print_ret " goes through the grating into the darkness below.";
	],
	name 'grate' 'grating',
  has	concealed door scenery;

Object  -> -> crack "crack"
  with	action [ ;
	     if( Verb ~= ##EnterObj ) rfalse;
	     print_ret "You can't fit through the crack.";
	],
	adjectives 'narrow',
	name 'crack',
  has	scenery;

Object  -> -> boarded_window "boarded window"
  with	action [ ;
	     if( Verb ~= ##Open ) ?label1;
	     print_ret "The windows are boarded and can't be opened.";
	  .label1;
	     if( Verb ~= ##Poke ) rfalse;
	     print_ret "You can't break the windows open.";
	],
	adjectives 'boarded',
	name 'window',
  has	scenery;

Object  -> -> chute "chute"
  with	action [ ;
	     if( Verb == ##ClimbDown or ##ClimbUp or ##EnterObj ) ?label1;
	     if( Verb == ##ClimbObj ) ?label2;
	  .label1;
	     if( Verb ~= ##Insert || noun ~= you ) ?label3;
	  .label2;
	     if( location ~= cellar ) ?label4;
	     PlayerToProp(self.w_to);
	     rtrue;
	  .label4;
	     print "You tumble down the slide....";
	     new_line;
	     return Goto(cellar);
	  .label3;
	     if( Verb ~= ##Insert ) rfalse;
	     return SlideFunction(noun);
	],
	adjectives 'steep' 'metal' 'twisting',
	name 'chute' 'ramp' 'slide',
  has	climbable;

Object  -> -> chimney "chimney"
  with	action [ ;
	     if( Verb ~= ##Examine ) rfalse;
	     print "The chimney leads ";
	     if( location ~= kitchen ) ?label1;
	     print "down";
	     jump label2;
	  .label1;
	     print "up";
	  .label2;
	     print_ret "ward, and looks climbable.";
	],
	adjectives 'dark' 'narrow',
	name 'chimney',
  has	climbable scenery;

Object  -> -> kitchen_window "kitchen window"
  with	action [ ;
	     if( Verb ~= ##Close and ##Open ) ?label1;
	     Window_munged = true;
	     return OpenOrClose(kitchen_window, "With great effort, you open the window far enough to allow entry.", "The window closes (more easily than it opened).");
	  .label1;
	     if( Verb ~= ##Examine || Window_munged ) ?label2;
	     print_ret "The window is slightly ajar, but not enough to allow entry.";
	  .label2;
	     if( Verb ~= ##EnterObj and ##Board and ##Walk ) ?label3;
	     if( location ~= kitchen ) ?label4;
	     PlayerToProp(self.e_to);
	     rtrue;
	  .label4;
	     PlayerToProp(self.w_to);
	     rtrue;
	  .label3;
	     if( Verb ~= ##LookIn ) rfalse;
	     print "You can see ";
	     if( location ~= kitchen ) ?label5;
	     print_ret "a clear area leading towards a forest.";
	  .label5;
	     print_ret "what appears to be a kitchen.";
	],
	adjectives 'kitchen' 'small',
	name 'window',
  has	door scenery;

Object  -> -> water "water"
  with	action WaterFunction,
	name 'water' 'quantity',
  has	drinkable;

Object  -> -> tree "tree"
  with	adjectives 'large' 'storm',
	name 'tree' 'branch',
  has	climbable scenery;

Object  -> -> forest "forest"
  with	action [ ;
	     if( Verb ~= ##WalkAround ) ?label1;
	     return GoNext(Forest_around);
	  .label1;
	     if( Verb ~= ##Disembark ) ?label2;
	     print_ret "You will have to specify a direction.";
	  .label2;
	     if( Verb ~= ##Find ) ?label3;
	     print_ret "You cannot see the forest for the trees.";
	  .label3;
	     if( Verb ~= ##Listen ) rfalse;
	     print_ret "The pines and the hemlocks seem to be murmuring.";
	],
	name 'forest' 'trees' 'pines' 'hemlocks',
  has	scenery;

Object  -> -> white_house "white house"
  with	action [ ;
	     if( location ~= kitchen and living_room and attic ) ?label1;
	     if( Verb ~= ##Find ) ?label2;
	     print_ret "Why not find your brains?";
	  .label2;
	     if( Verb ~= ##WalkAround ) rfalse;
	     GoNext(In_house);
	     rtrue;
	  .label1;
	     if( location == east_of_house or west_of_house || location == north_of_house or south_of_house ) ?label3;
	     if( Verb ~= ##Find ) ?label4;
	     if( location ~= clearing2 ) ?label5;
	     print_ret "It seems to be to the west.";
	  .label5;
	     print_ret "It was here just a minute ago....";
	  .label4;
	     print_ret "You're not at the house.";
	  .label3;
	     if( Verb ~= ##Find ) ?label6;
	     print_ret "It's right here! Are you blind or something?";
	  .label6;
	     if( Verb ~= ##WalkAround ) ?label7;
	     GoNext(House_around);
	     rtrue;
	  .label7;
	     if( Verb ~= ##Examine ) ?label8;
	     print_ret "The house is a beautiful colonial house which is painted white. It is clear that the owners must have been extremely wealthy.";
	  .label8;
	     if( Verb ~= ##Open and ##EnterObj ) ?label9;
	     if( location ~= east_of_house ) ?label10;
	     if( kitchen_window hasnt open ) ?label11;
	     return Goto(kitchen);
	  .label11;
	     print "The window is closed.";
	     new_line;
	     return SetLastObject(kitchen_window);
	  .label10;
	     print_ret "I can't see how to get in from here.";
	  .label9;
	     if( Verb ~= ##Burn ) rfalse;
	     print_ret "You must be joking.";
	],
	adjectives 'white' 'beautiful' 'colonial',
	name 'house',
  has	scenery;

Object  -> -> songbird "songbird"
  with	action [ ;
	     if( Verb ~= ##Take and ##Find ) ?label1;
	     print_ret "The songbird is not here but is probably nearby.";
	  .label1;
	     if( Verb ~= ##Listen ) ?label2;
	     print_ret "You can't hear the songbird now.";
	  .label2;
	     if( Verb ~= ##Follow ) ?label3;
	     print_ret "It can't be followed.";
	  .label3;
	     print_ret "You can't see any songbird here.";
	],
	adjectives 'song',
	name 'bird' 'songbird',
  has	scenery;

Object  -> granite_wall "granite wall"
  with	action [ ;
	     if( location ~= temple ) ?label1;
	     if( Verb ~= ##Find ) rfalse;
	     print_ret "The west wall is solid granite here.";
	  .label1;
	     if( location ~= treasure_room ) ?label2;
	     if( Verb ~= ##Find ) rfalse;
	     print_ret "The east wall is solid granite here.";
	  .label2;
	     if( location ~= slide_room ) ?label3;
	     if( Verb ~= ##Read and ##Find ) ?label4;
	     print_ret "It only SAYS ~Granite Wall~.";
	  .label4;
	     print_ret "The wall isn't granite.";
	  .label3;
	     print_ret "There is no granite wall here.";
	],
	adjectives 'granite',
	name 'wall',
;

Object  -> surrounding_wall "surrounding wall"
  with	adjectives 'surrounding',
	name 'wall' 'walls',
;

[ FindParsedObject lv0 obj lv2 lv3 ;
     lv2 = UNKNOWN_R6(lv0);
     if( lv2 <= 1 ) ?label1;
     lv3 = (lv0-->1).contains;
     if( ~~lv3 ) ?label1;
     lv2 = 1;
     P_object = lv3;
  .label1;
     if( 1 ~= lv2 ) ?label2;
     if( ~~obj ) ?label3;
     noun = P_object;
     rfalse;
  .label3;
     second = P_object;
     rfalse;
  .label2;
     if( obj ) ?label4;
     print "You wouldn't find any";
     Print_no_see(obj);
     print_ret " there.";
  .label4;
     return 11;
];

[ NoSeeAny obj ;
     P_cont = 0;
     P_unknown1 = 0;
     print "You can't see any";
     if( obj ~= noun ) ?label1;
     ReplaceIt2();
     jump label2;
  .label1;
     ReplaceIt();
  .label2;
     print_ret " here.";
];

[ WayAction ;
     if( Verb ~= ##Follow and ##Take ) ?label1;
     print_ret "You must specify a direction to go.";
  .label1;
     if( Verb ~= ##Find ) ?label2;
     print_ret "I can't help you there....";
  .label2;
     if( Verb ~= ##Dig ) rfalse;
     print_ret "Not a chance.";
];

[ Queue2 rtn ticks cint ;
     cint = QueueInterrupt(rtn, 1);
     cint-->1 = ticks;
     return cint;
];

[ UNKNOWN_R4 lv0 lv1 ;
     print (char) (P_inbuf->lv0->3 - 32);
     lv1 = lv0->2 - 1;
     return WordPrint(lv1, lv0->3 + 1);
];

[ UNKNOWN_R6 lv0 lv1 cnt ;
     P_slocbits = -1;
     P_name = Tmp_p_name;
     P_adj = Tmp_p_adj;
     lv0-->P_matchlen = 0;
     if( (lv1 = child(rooms)) ) ?label1;
  .label1;
     if( lv1 ) ?label2;
     jump label3;
  .label2;
     SearchList(lv1, lv0, 1);
     if( (lv1 = sibling(lv1)) ) ?label4;
  .label4;
     jump label1;
  .label3;
     cnt = lv0-->P_matchlen;
     if( cnt ) ?label5;
     DoSL(local_globals, 1, 1);
  .label5;
     cnt = lv0-->P_matchlen;
     if( cnt ) ?label6;
     DoSL(rooms, 1, 1);
  .label6;
     cnt = lv0-->P_matchlen;
     if( cnt ~= 1 ) ?label7;
     P_object = lv0-->1;
  .label7;
     P_name = 0;
     P_adj = 0;
     return cnt;
];

[ ReplaceIt2 word ;
     if( g68 ) ?label1;
     word = P_itbl-->6;
     if( (word-->0) ~= 'it' ) ?label2;
  .label1;
     print " ";
     print (object) noun;
     rtrue;
  .label2;
     return UNKNOWN_R3(word, P_itbl-->7, 0);
];

[ ReplaceIt word ;
     if( g68 ) ?label1;
     word = P_itbl-->8;
     if( (word-->0) ~= 'it' ) ?label2;
  .label1;
     print " ";
     print (object) noun;
     rtrue;
  .label2;
     return UNKNOWN_R3(word, P_itbl-->9, 0);
];

[ VerboseSub ;
     verbose = true;
     superbrief = false;
     print_ret "Maximum verbosity.";
];

[ BriefSub ;
     verbose = false;
     superbrief = false;
     print_ret "Brief descriptions.";
];

[ SuperbriefSub ;
     superbrief = true;
     print_ret "Super-brief descriptions.";
];

[ InventorySub ;
     if( ~~child(player) ) ?label1;
     return PrintCont(player);
  .label1;
     print_ret "You are empty-handed.";
];

[ QuitSub askfirst=1 UNUSED ;
     ScoreSub();
     if( ~~askfirst ) ?label1;
     print "Do you wish to leave the game? (Y is affirmative): ";
     if( Ask() ) ?label2;
  .label1;
     if( askfirst ) ?label3;
  .label2;
     quit;
     rtrue;
  .label3;
     print_ret "Ok.";
];

[ RestartSub ;
     ScoreSub(1);
     print "Do you wish to restart? (Y is affirmative): ";
     if( ~~Ask() ) rfalse;
     print "Restarting.";
     new_line;
     restart;
     print_ret "Failed.";
];

[ RestoreSub ;
     restore ?label1;
     print "Ok.";
     new_line;
     return FirstLook();
  .label1;
     print_ret "Failed.";
];

[ SaveSub ;
     save ?label1;
     print_ret "Ok.";
  .label1;
     print_ret "Failed.";
];

[ ScriptSub ;
     $0-->8 = ($0-->8 | 1);
     print "Here begins a transcript of interaction with";
     new_line;
     VersionSub();
     rtrue;
];

[ UnscriptSub ;
     print "Here ends a transcript of interaction with";
     new_line;
     VersionSub();
     $0-->8 = ($0-->8 & -2);
     rtrue;
];

[ VerifySub ;
     print "Verifying disk...";
     new_line;
     verify ?label1;
     print_ret "The disk is correct.";
  .label1;
     new_line;
     print_ret "** Disk Failure **";
];

[ PlughSub ;
     print_ret "A hollow voice says ~Fool.~";
];

[ AgainSub obj ;
     if( prev_verb ~= 137 ) ?label1;
     return Perform(prev_verb, prev_direct);
  .label1;
     if( ~~prev_direct ) ?label2;
     if( ~~parent(prev_direct) ) ?label3;
     if( prev_direct hasnt concealed ) ?label2;
  .label3;
     obj = prev_direct;
  .label2;
     if( ~~prev_indirect ) ?label4;
     if( ~~parent(prev_indirect) ) ?label5;
     if( prev_indirect hasnt concealed ) ?label4;
  .label5;
     obj = prev_indirect;
  .label4;
     if( ~~obj ) ?label6;
     if( obj == pseudo or rooms ) ?label6;
     print "You can't see the ";
     print (object) obj;
     print " anymore.";
     new_line;
     return 2;
  .label6;
     return Perform(prev_verb, prev_direct, prev_indirect);
];

[ WakeSub ;
     if( noun hasnt animate ) ?label1;
     if( (noun.strength) >= 0 ) ?label2;
     print "The ";
     print (object) noun;
     print " is rudely awakened.";
     new_line;
     return CheckStrength(noun);
  .label2;
     print_ret "He's wide awake, or haven't you noticed...";
  .label1;
     print "The ";
     print (object) noun;
     print_ret " isn't sleeping.";
];

[ AnswerSub ;
     print "Nobody seems to be awaiting your answer.";
     new_line;
     P_cont = 0;
     P_unknown1 = 0;
     rtrue;
];

[ AttackSub ;
     if( noun has animate ) ?label1;
     print "I've known strange people, but fighting a ";
     print (object) noun;
     print_ret "?";
  .label1;
     if( ~~second ) ?label2;
     if( second ~= pair_of_hands ) ?label3;
  .label2;
     print "Trying to attack a ";
     print (object) noun;
     print_ret " with your bare hands is suicidal.";
  .label3;
     if( second in player ) ?label4;
     print "You aren't even holding the ";
     print (object) second;
     print_ret ".";
  .label4;
     if( second has weapon ) ?label5;
     print "Trying to attack the ";
     print (object) noun;
     print " with a ";
     print (object) second;
     print_ret " is suicidal.";
  .label5;
     return HeroBlow();
];

[ BackSub ;
     print_ret "Sorry, my memory is poor. Please give a direction.";
];

[ BlowUpSub ;
     print_ret "You can't blast anything by using words.";
];

[ PreBoardSub env ;
     env = parent(player);
     if( Zork2_deletion() ) rtrue;
     if( noun hasnt vehicle ) ?label1;
     if( noun in location ) ?label2;
     print "The ";
     print (object) noun;
     print " must be on the ground to be boarded.";
     new_line;
     return 2;
  .label2;
     if( env hasnt vehicle ) rfalse;
     print "You are already in the ";
     print (object) env;
     print "!";
     new_line;
     return 2;
  .label1;
     print "You have a theory on how to board a ";
     print (object) noun;
     print ", perhaps?";
     new_line;
     return 2;
];

[ BoardSub UNUSED ;
     print "You are now in the ";
     print (object) noun;
     print ".";
     new_line;
     move player to noun;
     (noun.action)(2);
     rtrue;
];

[ BlowInSub ;
     return Perform(Inflate, noun, blast_of_air);
];

[ BrushSub ;
     print_ret "If you wish, but heaven only knows why.";
];

[ BugSub ;
     print_ret "Bug? Not in a flawless program like this! (Cough, cough).";
];

[ PreBurnSub ;
     if( second hasnt flame ) ?label1;
     if( second has light ) rfalse;
  .label1;
     print "With a ";
     print (object) second;
     print_ret "??!?";
];

[ BurnSub ;
     if( Zork2_deletion() ) rfalse;
     if( noun hasnt flammable ) ?label1;
     if( noun in player ) ?label2;
     if( player notin noun ) ?label3;
  .label2;
     Remove(noun);
     print "The ";
     print (object) noun;
     print " catches fire. Unfortunately, you were ";
     if( player notin noun ) ?label4;
     print "in";
     jump label5;
  .label4;
     print "holding";
  .label5;
     return JigsUp(" it at the time.");
  .label3;
     Remove(noun);
     print "The ";
     print (object) noun;
     print_ret " catches fire and is consumed.";
  .label1;
     print "You can't burn a ";
     print (object) noun;
     print_ret ".";
];

[ VomitSub ;
     print_ret "Preposterous!";
];

[ ClimbDownSub ;
     return ClimbUpSub(d_to, noun);
];

[ ClimbObjSub ;
     return ClimbUpSub(u_to, noun);
];

[ ClimbOnSub ;
     if( noun hasnt vehicle ) ?label1;
     Perform(Board, noun);
     rtrue;
  .label1;
     print "You can't climb onto the ";
     print (object) noun;
     print_ret ".";
];

[ ClimbUpSub dir=23 obj pnum paddr UNUSED ;
     if( obj ) ?label1;
     if( ~~noun ) ?label1;
     obj = noun;
  .label1;
     paddr = location.dir.&;
     if( ~~paddr ) ?label2;
     if( ~~obj ) ?label3;
     pnum = paddr.#;
     if( pnum == 2 ) ?label4;
     if( pnum ~= 4 and 5 and 1 ) ?label3;
     if( InRoomContains(noun, paddr->0) ) ?label3;
  .label4;
     print "The ";
     print (object) obj;
     print " do";
     if( obj == stairs ) ?label5;
     print "es";
  .label5;
     print "n't lead ";
     if( dir ~= 23 ) ?label6;
     print "up";
     jump label7;
  .label6;
     print "down";
  .label7;
     print_ret "ward.";
  .label3;
     PlayerToProp(dir);
     rtrue;
  .label2;
     if( obj ) ?label8;
     print_ret "You can't go that way.";
  .label8;
     if( ~~obj ) ?label9;
     pnum = noun.name.&;
     if( ~~ZMemQ('wall', pnum, pnum.#) ) ?label9;
     print_ret "Climbing the walls is to no avail.";
  .label9;
     print_ret "You can't do that!";
];

[ CloseSub ;
     if( noun has container ) ?label1;
     if( noun has door ) ?label1;
     print "You must tell me how to do that to a ";
     print (object) noun;
     print_ret ".";
  .label1;
     if( noun has supporter ) ?label2;
     if( ~~(noun.capacity) ) ?label2;
     if( noun hasnt open ) ?label3;
     give noun ~open;
     print "Closed.";
     new_line;
     if( ~~Lit ) rtrue;
     Lit = QueryLight(location);
     if( Lit ) rtrue;
     print_ret "It is now pitch black.";
  .label3;
     print_ret "It is already closed.";
  .label2;
     if( noun hasnt door ) ?label4;
     if( noun hasnt open ) ?label5;
     give noun ~open;
     print "The ";
     print (object) noun;
     print_ret " is now closed.";
  .label5;
     print_ret "It is already closed.";
  .label4;
     print_ret "You cannot close that.";
];

[ CommandSub ;
     if( noun hasnt animate ) ?label1;
     print "The ";
     print (object) noun;
     print_ret " pays no attention.";
  .label1;
     print_ret "You cannot talk to that!";
];

[ CountSub ;
     if( noun ~= blessings ) ?label1;
     print_ret "Well, for one, you are playing Zork...";
  .label1;
     print_ret "You have lost your mind.";
];

[ CrossSub ;
     print_ret "You can't cross that!";
];

[ CurseSub ;
     if( ~~noun ) ?label1;
     if( noun hasnt animate ) ?label2;
     print_ret "Insults of this nature won't help you.";
  .label2;
     print_ret "What a loony!";
  .label1;
     print_ret "Such language in a high-class establishment like this!";
];

[ CutSub ;
     if( noun hasnt animate ) ?label1;
     return Perform(Attack, noun, second);
  .label1;
     if( noun hasnt flammable ) ?label2;
     if( second hasnt weapon ) ?label2;
     if( player notin noun ) ?label3;
     print_ret "Not a bright idea, especially since you're in it.";
  .label3;
     Remove(noun);
     print "Your skillful ";
     print (object) second;
     print "smanship slices the ";
     print (object) noun;
     print_ret " into innumerable slivers which blow away.";
  .label2;
     if( second has weapon ) ?label4;
     print "The ~cutting edge~ of a ";
     print (object) second;
     print_ret " is hardly adequate.";
  .label4;
     print "Strange concept, cutting the ";
     print (object) noun;
     print_ret "....";
];

[ DeflateSub ;
     print_ret "Come on, now!";
];

[ DigSub ;
     if( second ) ?label1;
     second = pair_of_hands;
  .label1;
     if( second ~= shovel ) ?label2;
     print_ret "There's no reason to be digging here.";
  .label2;
     if( second hasnt toolbit ) ?label3;
     print "Digging with the ";
     print (object) second;
     print_ret " is slow and tedious.";
  .label3;
     print "Digging with a ";
     print (object) second;
     print_ret " is silly.";
];

[ DisembarkSub ;
     if( parent(player) == noun ) ?label1;
     print "You're not in that!";
     new_line;
     return 2;
  .label1;
     if( location hasnt dry_land ) ?label2;
     print "You are on your own feet again.";
     new_line;
     move player to location;
     rtrue;
  .label2;
     print "You realize that getting out here would be fatal.";
     new_line;
     return 2;
];

[ DisenchantSub ;
     print_ret "Nothing happens.";
];

[ DrinkSub ;
     return EatSub();
];

[ DrinkFromSub ;
     print_ret "How peculiar!";
];

[ PreDropSub ;
     if( noun ~= parent(player) ) rfalse;
     Perform(Disembark, noun);
     rtrue;
];

[ DropSub ;
     if( ~~Idrop() ) rfalse;
     print_ret "Dropped.";
];

[ EatSub can_eat can_drink env ;
  .label2;
     can_eat = ((noun has edible ? 0 : 1));
     if( ~~can_eat ) ?label3;
     if( noun in player ) ?label4;
     if( parent(noun) in player ) ?label4;
     print "You're not holding that.";
     new_line;
     jump label5;
  .label4;
     if( Verb ~= ##Drink ) ?label6;
     print "How can you drink that?";
     jump label5;
  .label6;
     print "Thank you very much. It really hit the spot.";
     Remove(noun);
  .label5;
     new_line;
     rtrue;
  .label3;
     if( noun hasnt drinkable ) ?label7;
     can_drink = 1;
     env = parent(noun);
     if( noun in global_objects ) ?label8;
     if( noun in local_globals ) ?label8;
     if( noun ~= pseudo ) ?label9;
  .label8;
     return QuenchThirst();
  .label9;
     if( env ) ?label10;
     print_ret "You don't have any to drink.";
  .label10;
     if( env in player ) ?label11;
     print "You have to be holding the ";
     print (object) env;
     print_ret " first.";
  .label11;
     if( env has open ) ?label12;
     print "You'll have to open the ";
     print (object) env;
     print_ret " first.";
  .label12;
     return QuenchThirst();
  .label7;
     if( can_eat ) rfalse;
     if( can_drink ) rfalse;
     print "I don't think that the ";
     print (object) noun;
     print_ret " would agree with you.";
];

[ QuenchThirst ;
     print "Thank you very much. I was rather thirsty (from all this talking, probably).";
     new_line;
     return Remove(noun);
];

[ EchoSub ptr len echocnt char_cnt end ;
     if( (P_lexv->1) <= 0 ) ?label1;
     ptr = P_lexv + P_lexv->1 * 4;
     end = ptr->0;
     len = end + ptr->1 - 1;
  .label6;
     if( ++echocnt <= 2 ) ?label2;
     print_ret "...";
  .label2;
     char_cnt = ptr->1 - 1;
  .label5;
     if( ++char_cnt <= len ) ?label3;
     jump label4;
  .label3;
     print (char) (P_inbuf->char_cnt);
     jump label5;
  .label4;
     print " ";
     jump label6;
  .label1;
     print_ret "echo echo ...";
];

[ EnchantSub ;
     Zork2_deletion();
     return DisenchantSub();
];

[ Remove obj old_lit ;
     if( obj ~= LastNoun ) ?label1;
     LastNoun = 0;
     LastNounPlace = 0;
  .label1;
     old_lit = Lit;
     remove obj;
     Lit = QueryLight(location);
     if( ~~old_lit ) rtrue;
     if( old_lit == Lit ) rtrue;
     print_ret "You are left in the dark...";
];

[ EnterSub ;
     return PlayerToProp(self.in_to);
];

[ ExamineSub ;
     if( ~~(noun.text_string) ) ?label1;
     print (string) (noun.text_string);
     new_line;
     rtrue;
  .label1;
     if( noun has container ) ?label2;
     if( noun hasnt door ) ?label3;
  .label2;
     return LookInSub();
  .label3;
     print "There's nothing special about the ";
     print (object) noun;
     print_ret ".";
];

[ ExitSub ;
     return PlayerToProp(self.out_to);
];

[ BanishSub ;
     print_ret "What a bizarre concept!";
];

[ PreFillSub paddr ;
     if( second ) ?label1;
     paddr = location.contains.&;
     if( ~~paddr ) ?label1;
     if( ~~ZMemQB(238, paddr, paddr.# - 1) ) ?label2;
     second = water;
     rfalse;
  .label2;
     print_ret "There is nothing to fill it with.";
  .label1;
     if( second == water ) rfalse;
     Perform(Insert, second, noun);
     rtrue;
];

[ FillSub ;
     if( second ) ?label1;
     if( ~~InRoomContains(238, location) ) ?label2;
     Perform(Fill, noun, water);
     rtrue;
  .label2;
     if( quantity_of_water notin parent(player) ) ?label3;
     Perform(Fill, noun, quantity_of_water);
     rtrue;
  .label3;
     print_ret "There's nothing to fill it with.";
  .label1;
     print_ret "You may know how to do that, but I don't.";
];

[ FindSub env ;
     env = parent(noun);
     if( noun ~= pair_of_hands and blast_of_air ) ?label1;
     print_ret "Within six feet of your head, assuming you haven't left that somewhere.";
  .label1;
     if( noun ~= you ) ?label2;
     print_ret "You're around here somewhere...";
  .label2;
     if( env ~= 247 ) ?label3;
     print_ret "You find it.";
  .label3;
     if( noun notin player ) ?label4;
     print_ret "You have it.";
  .label4;
     if( noun in location ) ?label5;
     if( InRoomContains(noun, location) ) ?label5;
     if( noun ~= pseudo ) ?label6;
  .label5;
     print_ret "It's right here.";
  .label6;
     if( env hasnt animate ) ?label7;
     print "The ";
     print (object) env;
     print_ret " has it.";
  .label7;
     if( env hasnt supporter ) ?label8;
     print "It's on the ";
     print (object) env;
     print_ret ".";
  .label8;
     if( env hasnt container ) ?label9;
     print "It's in the ";
     print (object) env;
     print_ret ".";
  .label9;
     print_ret "Beats me.";
];

[ FollowSub ;
     print_ret "You're nuts!";
];

[ FrobozzSub ;
     print_ret "The FROBOZZ Corporation created, owns, and operates this dungeon.";
];

[ PreGiveToSub ;
     if( InPlayer(noun) ) rfalse;
     print "That's easy for you to say since you don't even have the ";
     print (object) noun;
     print_ret ".";
];

[ GiveToSub ;
     if( second has animate ) ?label1;
     print "You can't give a ";
     print (object) noun;
     print " to a ";
     print (object) second;
     print_ret "!";
  .label1;
     print "The ";
     print (object) second;
     print_ret " refuses it politely.";
];

[ HatchSub ;
     print_ret "Bizarre!";
];

[ HelloSub ;
     if( ~~noun ) ?label1;
     if( noun hasnt animate ) ?label2;
     print "The ";
     print (object) noun;
     print_ret " bows his head to you in greeting.";
  .label2;
     print "It's a well known fact that only schizophrenics say ~Hello~ to a ";
     print (object) noun;
     print_ret ".";
  .label1;
     print (string) ComplexPickOne(Hello_table);
     new_line;
     rtrue;
];

[ ChantSub ;
     print "The incantation echoes back faintly, but nothing else happens.";
     new_line;
     P_unknown1 = 0;
     P_cont = 0;
     rtrue;
];

[ InflateSub ;
     print_ret "How can you inflate that?";
];

[ IsOnSub ;
     if( noun notin second ) ?label1;
     print "Yes, it is ";
     if( second hasnt supporter ) ?label2;
     print "on";
     jump label3;
  .label2;
     print "in";
  .label3;
     print " the ";
     print (object) second;
     print_ret ".";
  .label1;
     print_ret "No, it isn't.";
];

[ KickSub ;
     return HackHack("Kicking the ");
];

[ KissSub ;
     print_ret "I'd sooner kiss a pig.";
];

[ KnockSub ;
     if( noun hasnt door ) ?label1;
     print_ret "Nobody's home.";
  .label1;
     print "Why knock on a ";
     print (object) noun;
     print_ret "?";
];

[ SwitchOffSub ;
     if( noun hasnt on ) ?label1;
     if( noun has light ) ?label2;
     print_ret "It is already off.";
  .label2;
     give noun ~light;
     if( ~~Lit ) ?label3;
     Lit = QueryLight(location);
  .label3;
     print "The ";
     print (object) noun;
     print " is now off.";
     new_line;
     if( Lit ) rtrue;
     print "It is now pitch black.";
     new_line;
     rtrue;
  .label1;
     print_ret "You can't turn that off.";
];

[ SwitchOnSub ;
     if( noun hasnt on ) ?label1;
     if( noun hasnt light ) ?label2;
     print_ret "It is already on.";
  .label2;
     give noun light;
     print "The ";
     print (object) noun;
     print " is now on.";
     new_line;
     if( Lit ) rtrue;
     Lit = QueryLight(location);
     new_line;
     LookSub();
     rtrue;
  .label1;
     print_ret "You can't turn that on.";
];

[ LaunchSub ;
     if( noun hasnt vehicle ) ?label1;
     print_ret "You can't launch that by saying ~launch~!";
  .label1;
     print_ret "That's pretty weird.";
];

[ LeanOnSub ;
     print_ret "Getting tired?";
];

[ DiveSub prop propsize ;
     if( ~~noun ) ?label1;
     if( noun notin location ) ?label2;
     if( noun hasnt animate ) ?label3;
     print "The ";
     print (object) noun;
     print_ret " is too big to jump over.";
  .label3;
     return JumpSub();
  .label2;
     print_ret "That would be a good trick.";
  .label1;
     prop = location.d_to.&;
     if( ~~prop ) ?label4;
     propsize = prop.#;
     if( propsize == 2 ) ?label5;
     if( propsize ~= 4 ) ?label6;
     if( prop->1 ) ?label6;
  .label5;
     print "This was not a very safe place to try jumping.";
     new_line;
     return JigsUp(ComplexPickOne(Dive_msg));
  .label6;
     if( location ~= up_a_tree ) ?label7;
     print "In a feat of unaccustomed daring, you manage to land on your feet without killing yourself.";
     new_line;
     new_line;
     PlayerToProp(self.d_to);
     rtrue;
  .label7;
     return JumpSub();
  .label4;
     return JumpSub();
];

[ LeaveSub ;
     return PlayerToProp(self.out_to);
];

[ ListenSub ;
     print "The ";
     print (object) noun;
     print_ret " makes no sound.";
];

[ LockSub ;
     print_ret "It doesn't seem to work.";
];

[ LookBehindSub ;
     print "There is nothing behind the ";
     print (object) noun;
     print_ret ".";
];

[ LookInSub ;
     if( noun hasnt door ) ?label1;
     if( noun hasnt open ) ?label2;
     print "The ";
     print (object) noun;
     print " is open, but I can't tell what's beyond it.";
     jump label3;
  .label2;
     print "The ";
     print (object) noun;
     print " is closed.";
  .label3;
     new_line;
     rtrue;
  .label1;
     if( noun hasnt container ) ?label4;
     if( noun hasnt animate ) ?label5;
     print_ret "There is nothing special to be seen.";
  .label5;
     if( ~~CanSeeContents(noun) ) ?label6;
     if( ~~child(noun) ) ?label7;
     if( PrintCont(noun) ) rtrue;
  .label7;
     print "The ";
     print (object) noun;
     print_ret " is empty.";
  .label6;
     print "The ";
     print (object) noun;
     print_ret " is closed.";
  .label4;
     print "You can't look inside a ";
     print (object) noun;
     print_ret ".";
];

[ LookOnSub ;
     if( noun hasnt supporter ) ?label1;
     Perform(LookIn, noun);
     rtrue;
  .label1;
     print "Look on a ";
     print (object) noun;
     print_ret "???";
];

[ LookUnderSub ;
     print_ret "There is nothing but dust there.";
];

[ LowerSub ;
     return HackHack("Playing in this way with the ");
];

[ MakeSub ;
     print_ret "You can't do that.";
];

[ MeltSub ;
     print "It's not clear that a ";
     print (object) noun;
     print_ret " can be melted.";
];

[ PreMoveSub ;
     if( ~~InPlayer(noun) ) rfalse;
     print_ret "You aren't an accomplished enough juggler.";
];

[ MoveSub ;
     if( noun hasnt takeable ) ?label1;
     print "Moving the ";
     print (object) noun;
     print_ret " reveals nothing.";
  .label1;
     print "You can't move the ";
     print (object) noun;
     print_ret ".";
];

[ MumbleSub ;
     print_ret "You'll have to speak up if you expect me to hear you!";
];

[ PrePokeSub ;
     if( Zork2_deletion() ) rtrue;
     if( ~~second ) ?label1;
     if( second has weapon ) rfalse;
  .label1;
     print "Trying to destroy the ";
     print (object) noun;
     print " with ";
     if( second ) ?label2;
     print "your bare hands";
     jump label3;
  .label2;
     print "a ";
     print (object) second;
  .label3;
     print_ret " is futile.";
];

[ PokeSub ;
     if( noun hasnt animate ) ?label1;
     Perform(Attack, noun);
     rtrue;
  .label1;
     print_ret "Nice try.";
];

[ OdysseusSub ;
     if( location ~= cyclops_room ) ?label1;
     if( cyclops notin location ) ?label1;
     if( Cyclops_flag ) ?label1;
     QueueInterrupt(CyclopsDaemon)-->0 = 0;
     Cyclops_flag = true;
     print "The cyclops, hearing the name of his father's deadly nemesis, flees the room by knocking down the wall on the east of the room.";
     new_line;
     Magic_flag = true;
     give cyclops ~fightbit;
     return Remove(cyclops);
  .label1;
     print_ret "Wasn't he a sailor?";
];

[ GreaseSub ;
     print_ret "You probably put spinach in your gas tank, too.";
];

[ OpenSub obj revealmsg ;
     if( noun hasnt container ) ?label1;
     if( ~~(noun.capacity) ) ?label1;
     if( noun hasnt open ) ?label2;
     print_ret "It is already open.";
  .label2;
     give noun open;
     give noun visited;
     if( ~~child(noun) ) ?label3;
     if( noun hasnt transparent ) ?label4;
  .label3;
     print_ret "Opened.";
  .label4;
     if( ~~(obj = child(noun)) ) ?label5;
     if( sibling(obj) ) ?label5;
     if( obj has visited ) ?label5;
     revealmsg = obj.initial;
     if( ~~revealmsg ) ?label5;
     print "The ";
     print (object) noun;
     print " opens.";
     new_line;
     print (string) revealmsg;
     new_line;
     rtrue;
  .label5;
     print "Opening the ";
     print (object) noun;
     print " reveals ";
     PrintContents(noun);
     print_ret ".";
  .label1;
     if( noun hasnt door ) ?label6;
     if( noun hasnt open ) ?label7;
     print_ret "It is already open.";
  .label7;
     print "The ";
     print (object) noun;
     print " opens.";
     new_line;
     give noun open;
     rtrue;
  .label6;
     print "You must tell me how to do that to a ";
     print (object) noun;
     print_ret ".";
];

[ ThrowToSub env ;
     if( second ~= set_of_teeth ) ?label1;
     env = parent(player);
     if( env hasnt vehicle ) ?label2;
     move noun to parent(env);
     print "Ahoy -- ";
     print (object) noun;
     print_ret " overboard!";
  .label2;
     print_ret "You're not in anything!";
  .label1;
     print_ret "Huh?";
];

[ PickSub ;
     print_ret "You can't pick that.";
];

[ PlaySub ;
     print_ret "That's silly!";
];

[ FixSub ;
     print_ret "This has no effect.";
];

[ PourSub ;
     if( noun ~= quantity_of_water ) ?label1;
     Remove(noun);
     if( second hasnt flame ) ?label2;
     if( second hasnt light ) ?label2;
     print "The ";
     print (object) second;
     print " is extinguished.";
     new_line;
     give second ~light;
     give second ~flame;
     rtrue;
  .label2;
     print "The water spills over the ";
     print (object) second;
     print_ret ", to the floor, and evaporates.";
  .label1;
     if( noun ~= viscous_material ) ?label3;
     return Perform(Insert, viscous_material, second);
  .label3;
     print_ret "You can't pour that.";
];

[ PraySub ;
     if( location ~= altar ) ?label1;
     return Goto(forest1);
  .label1;
     print_ret "If you pray enough, your prayers may be answered.";
];

[ PumpUpSub ;
     if( ~~second ) ?label1;
     if( second == air_pump ) ?label1;
     print "Pump it up with a ";
     print (object) second;
     print_ret "?";
  .label1;
     if( air_pump notin player ) ?label2;
     return Perform(Inflate, noun, air_pump);
  .label2;
     print_ret "It's really not clear how.";
];

[ PushSub ;
     return HackHack("Pushing the ");
];

[ SlideSub ;
     print_ret "You can't push things to that.";
];

[ PutOnSub ;
     if( Zork2_deletion() ) rfalse;
     return PreGiveToSub();
];

[ InsertSub weight ;
     if( second has open ) ?label1;
     if( second has door ) ?label2;
     if( second has container ) ?label1;
  .label2;
     if( second hasnt vehicle ) ?label3;
     jump label1;
  .label3;
     print_ret "You can't do that.";
  .label1;
     if( second has open ) ?label4;
     print "The ";
     print (object) second;
     print " isn't open.";
     new_line;
     return SetLastObject(second);
  .label4;
     if( second ~= noun ) ?label5;
     print_ret "How can you do that?";
  .label5;
     if( noun notin second ) ?label6;
     print "The ";
     print (object) noun;
     print " is already in the ";
     print (object) second;
     print_ret ".";
  .label6;
     weight = QueryWeight(second);
     weight = weight + QueryWeight(noun);
     weight = weight - second.size;
     if( weight <= (second.capacity) ) ?label7;
     print_ret "There's no room.";
  .label7;
     if( InPlayer(noun) ) ?label8;
     if( noun hasnt trytakebit ) ?label8;
     print "You don't have the ";
     print (object) noun;
     print_ret ".";
  .label8;
     if( InPlayer(noun) ) ?label9;
     if( ~~ITake() ) rtrue;
  .label9;
     move noun to second;
     give noun visited;
     ScoreObj(noun);
     print_ret "Done.";
];

[ PutBehindSub ;
     print_ret "That hiding place is too obvious.";
];

[ PutOnSub ;
     if( second ~= ground ) ?label1;
     Perform(Drop, noun);
     rtrue;
  .label1;
     if( second hasnt supporter ) ?label2;
     return InsertSub();
  .label2;
     print "There's no good surface on the ";
     print (object) second;
     print_ret ".";
];

[ PutUnderSub ;
     print_ret "You can't do that.";
];

[ RaiseSub ;
     return LowerSub();
];

[ MolestSub ;
     print_ret "What a (ahem!) strange idea.";
];

[ PreReadSub ;
     if( Lit ) ?label1;
     print_ret "It is impossible to read in the dark.";
  .label1;
     if( ~~second ) rfalse;
     if( second has transparent ) rfalse;
     print "How does one look through a ";
     print (object) second;
     print_ret "?";
];

[ ReadSub ;
     if( noun has readable ) ?label1;
     print "How does one read a ";
     print (object) noun;
     print_ret "?";
  .label1;
     print (string) (noun.text_string);
     new_line;
     rtrue;
];

[ ReadObjObjSub ;
     Perform(Read, noun);
     rtrue;
];

[ RepentSub ;
     print_ret "It could very well be too late!";
];

[ AnswerSub ;
     print "It is hardly likely that the ";
     print (object) noun;
     print " is interested.";
     new_line;
     P_cont = 0;
     P_unknown1 = 0;
     rtrue;
];

[ RingSub ;
     print_ret "How, exactly, can you ring that?";
];

[ TouchSub ;
     return HackHack("Fiddling with the ");
];


! Zork 1 orphan code fragment:

[ SaySub who ;
     if( P_cont ) ?label1;
     print_ret "Say what?";
  .label1;
     P_unknown1 = 0;
     rtrue;
     who = FindItemWithAttr(location, animate);
     if( ~~who ) ?label2;
     print "You must address the ";
     print (object) who;
     print " directly.";
     new_line;
     P_unknown1 = 0;
     P_cont = 0;
     return P_cont;
  .label2;
     if( (P_lexv-->P_cont) ~= 'hello' ) ?label3;
     P_unknown1 = 0;
     rtrue;
  .label3;
     P_unknown1 = 0;
     P_cont = 0;
     print_ret "Talking to yourself is a sign of impending mental collapse.";
];

[ SearchSub ;
     print_ret "You find nothing unusual.";
];

[ SendForSub ;
     if( noun hasnt animate ) ?label1;
     print "Why would you send for the ";
     print (object) noun;
     print_ret "?";
  .label1;
     print_ret "That doesn't make sends.";
];

[ PreGiveSub ;
     Perform(GiveTo, second, noun);
     rtrue;
];

[ GiveSub ;
     print_ret "Foo!";
];

[ ShakeSub ;
     if( noun hasnt animate ) ?label1;
     print_ret "This seems to have no effect.";
  .label1;
     if( noun has takeable ) ?label2;
     print_ret "You can't take it; thus, you can't shake it!";
  .label2;
     if( noun hasnt container ) ?label3;
     if( noun hasnt open ) ?label4;
     if( ~~child(noun) ) ?label5;
     EmptyNoun();
     print "The contents of the ";
     print (object) noun;
     print " spills ";
     if( location has dry_land ) ?label6;
     print "out and disappears";
     jump label7;
  .label6;
     print "to the ground";
  .label7;
     print_ret ".";
  .label5;
     print_ret "Shaken.";
  .label4;
     if( ~~child(noun) ) ?label8;
     print "It sounds like there is something inside the ";
     print (object) noun;
     print_ret ".";
  .label8;
     print "The ";
     print (object) noun;
     print_ret " sounds empty.";
  .label3;
     print_ret "Shaken.";
];

[ EmptyNoun obj ;
  .label4;
     if( ~~(obj = child(noun)) ) rtrue;
     give obj visited;
     if( location ~= up_a_tree ) ?label1;
    @push            75
     jump label2;
  .label2;
     move obj to ((location has dry_land ? 13 : location));
     jump label4;
];

[ JumpSub ;
     print (string) ComplexPickOne(Hop_msg);
     new_line;
     rtrue;
];

[ SmellSub ;
     print "It smells like a ";
     print (object) noun;
     print_ret ".";
];

[ SpinSub ;
     print_ret "You can't spin that!";
];

[ SprayOnSub ;
     return SqueezeSub();
];

[ SqueezeSub ;
     if( noun hasnt animate ) ?label1;
     print "The ";
     print (object) noun;
     print " does not understand this.";
     jump label2;
  .label1;
     print "How singularly useless.";
  .label2;
     new_line;
     rtrue;
];

[ SprayWithSub ;
     return Perform(SprayOn, second, noun);
];

[ StabSub weap ;
     weap = HasWeapon(player);
     if( ~~weap ) ?label1;
     Perform(Attack, noun, weap);
     rtrue;
  .label1;
     print "No doubt you propose to stab the ";
     print (object) noun;
     print_ret " with your pinky?";
];

[ StandSub ;
     if( parent(player) hasnt vehicle ) ?label1;
     Perform(Disembark, parent(player));
     rtrue;
  .label1;
     print_ret "You are already standing, I think.";
];

[ StaySub ;
     print_ret "You will be lost without me!";
];

[ StrikeSub ;
     if( noun hasnt animate ) ?label1;
     print "Since you aren't versed in hand-to-hand combat, you'd better attack the ";
     print (object) noun;
     print_ret " with a weapon.";
  .label1;
     Perform(SwitchOn, noun);
     rtrue;
];

[ SwimSub ;
     if( ~~InRoomContains(238, location) ) ?label1;
     print "Swimming isn't usually allowed in the ";
     if( ~~noun ) ?label2;
     print (object) noun;
     print ".";
     jump label3;
  .label2;
     print "dungeon.";
  .label3;
     new_line;
     rtrue;
  .label1;
     if( Zork2_deletion() ) rfalse;
     print_ret "Go jump in a lake!";
];

[ SwingSub ;
     if( second ) ?label1;
     print_ret "Whoosh!";
  .label1;
     return Perform(Attack, second, noun);
];

[ PreTakeSub ;
     if( noun notin player ) ?label1;
     if( noun hasnt clothing ) ?label2;
     print_ret "You are already wearing it.";
  .label2;
     print_ret "You already have that!";
  .label1;
     if( parent(noun) hasnt container ) ?label3;
     if( parent(noun) has open ) ?label3;
     print_ret "You can't reach something that's inside a closed container.";
  .label3;
     if( ~~second ) ?label4;
     if( second ~= ground ) ?label5;
     second = 0;
     rfalse;
  .label5;
     if( second == parent(noun) ) ?label6;
     print "The ";
     print (object) noun;
     print " isn't in the ";
     print (object) second;
     print_ret ".";
  .label6;
     second = 0;
     rfalse;
  .label4;
     if( noun ~= parent(player) ) rfalse;
     print_ret "You're inside of it!";
];

[ TakeSub ;
     if( ITake() ~= 1 ) rfalse;
     if( noun hasnt clothing ) ?label1;
     print "You are now wearing the ";
     print (object) noun;
     print_ret ".";
  .label1;
     print_ret "Taken.";
];

[ TalkToSub ;
     if( noun hasnt animate ) ?label1;
     if( ~~P_cont ) ?label2;
     player = noun;
     location = parent(player);
     return location;
  .label2;
     print "The ";
     print (object) noun;
     print_ret " pauses for a moment, perhaps thinking that you should re-read the manual.";
  .label1;
     print "You can't talk to the ";
     print (object) noun;
     print "!";
     new_line;
     P_unknown1 = 0;
     P_cont = 0;
     return 2;
];

[ EnterObjSub obj UNUSED ;
     if( noun hasnt door ) ?label1;
     PlayerToProp(FindDoor(noun));
     rtrue;
  .label1;
     if( obj ) ?label2;
     if( noun hasnt vehicle ) ?label2;
     Perform(Board, noun);
     rtrue;
  .label2;
     if( obj ) ?label3;
     if( noun has takeable ) ?label3;
     if( Zork2_deletion() ) rtrue;
     if( Zork2_deletion() ) rtrue;
     if( Zork2_deletion() ) rtrue;
     if( Zork2_deletion() ) rtrue;
     print "You hit your head against the ";
     print (object) noun;
     print_ret " as you attempt this feat.";
  .label3;
     if( ~~obj ) ?label4;
     print_ret "You can't do that!";
  .label4;
     if( noun notin player ) ?label5;
     print_ret "That would involve quite a contortion!";
  .label5;
     print (string) ComplexPickOne(Yuks_table);
     new_line;
     rtrue;
];

[ ThrowSub ;
     if( ~~Idrop() ) rfalse;
     if( second ~= you ) ?label1;
     print "A terrific throw! The ";
     print (object) noun;
     return JigsUp(" hits you squarely in the head. Normally, this wouldn't do much damage, but by incredible mischance, you fall over backwards trying to duck, and break your neck, justice being swift and merciful in the Great Underground Empire.");
  .label1;
     if( second hasnt animate ) ?label2;
     print "The ";
     print (object) second;
     print " ducks as the ";
     print (object) noun;
     print_ret " flies by and crashes to the ground.";
  .label2;
     print_ret "Thrown.";
];

[ ThrowOverSub ;
     print_ret "You can't throw anything off of that!";
];

[ TieToSub ;
     if( second ~= player ) ?label1;
     print_ret "You can't tie anything to yourself.";
  .label1;
     print "You can't tie the ";
     print (object) noun;
     print_ret " to that.";
];

[ TieWithSub ;
     print_ret "You could certainly never tie it with that!";
];

[ TempleWordSub ;
     if( location ~= temple ) ?label1;
     return Goto(treasure_room);
  .label1;
     if( location ~= treasure_room ) ?label2;
     return Goto(temple);
  .label2;
     print_ret "Nothing happens.";
];

[ PreMoveWithSub ;
     if( noun has turnable ) rfalse;
     print_ret "You can't turn that!";
];

[ MoveWithSub ;
     print_ret "This has no effect.";
];

[ UnlockSub ;
     return LockSub();
];

[ UntieSub ;
     print_ret "This cannot be tied, so it cannot be untied!";
];

[ WaitSub turns=3 ;
     print "Time passes...";
     new_line;
  .label3;
     if( --turns >= 0 ) ?label1;
     jump label2;
  .label1;
     if( ~~Clocker() ) ?label3;
  .label2;
     Clock_wait = 1;
     return Clock_wait;
];

[ WalkSub prop propsize str obj room ;
     if( Direction ) ?label1;
     Perform(WalkTo, noun);
     rtrue;
  .label1;
     prop = location.noun.&;
     if( ~~prop ) ?label2;
     propsize = prop.#;
     if( propsize ~= 1 ) ?label3;
     return Goto(prop->0);
  .label3;
     if( propsize ~= 2 ) ?label4;
     print (string) (prop-->0);
     new_line;
     return 2;
  .label4;
     if( propsize ~= 3 ) ?label5;
     room = (prop-->0)();
     if( ~~room ) ?label6;
     return Goto(room);
  .label6;
     if( Zork2_deletion() ) rfalse;
     return 2;
  .label5;
     if( propsize ~= 4 ) ?label7;
     if( ~~prop->1 ) ?label8;
     return Goto(prop->0);
  .label8;
     str = prop-->1;
     if( ~~str ) ?label9;
     print (string) str;
     new_line;
     return 2;
  .label9;
     print "You can't go that way.";
     new_line;
     return 2;
  .label7;
     if( propsize ~= 5 ) rfalse;
     obj = prop->1;
     if( obj hasnt open ) ?label10;
     return Goto(prop->0);
  .label10;
     str = prop-->1;
     if( ~~str ) ?label11;
     print (string) str;
     new_line;
     return 2;
  .label11;
     print "The ";
     print (object) obj;
     print " is closed.";
     new_line;
     SetLastObject(obj);
     return 2;
  .label2;
     if( Lit ) ?label12;
     if( 80 <= random(100) ) ?label12;
     if( location has water_room ) ?label12;
     if( ~~Grue_Repellent ) ?label13;
     print "There are odd noises in the darkness, and there is no exit in that direction.";
     new_line;
     return 2;
  .label13;
     if( Zork2_deletion() ) rfalse;
     return JigsUp("Oh, no! You have walked into the slavering fangs of a lurking grue!");
  .label12;
     print "You can't go that way.";
     new_line;
     return 2;
];

[ WalkAroundSub ;
     print_ret "Use compass directions for movement.";
];

[ WalkToSub ;
     if( noun in location ) ?label1;
     if( ~~InRoomContains(noun, location) ) ?label2;
  .label1;
     print_ret "It's here!";
  .label2;
     print_ret "You should supply a direction!";
];

[ WieldSub ;
     return HackHack("Waving the ");
];

[ WearSub ;
     if( noun has clothing ) ?label1;
     print "You can't wear the ";
     print (object) noun;
     print_ret ".";
  .label1;
     Perform(Take, noun);
     rtrue;
];

[ WinSub ;
     print_ret "Naturally!";
];

[ WindUpSub ;
     print "You cannot wind up a ";
     print (object) noun;
     print_ret ".";
];

[ WishSub ;
     print_ret "With luck, your wish will come true.";
];

[ YellSub ;
     print_ret "Aaaarrrrgggghhhh!";
];

[ ZorkSub ;
     print_ret "At your service!";
];

[ FirstLook ;
     if( ~~DescribeRoom() ) rfalse;
     if( superbrief ) rfalse;
     return DescribeObjects();
];

[ PrintContents obj itm nextitem first=1 last it_flag ;
     if( ~~(itm = child(obj)) ) rfalse;
  .label6;
     if( (nextitem = sibling(itm)) ) ?label1;
  .label1;
     if( ~~first ) ?label2;
     first = 0;
     jump label3;
  .label2;
     print ", ";
     if( nextitem ) ?label3;
     print "and ";
  .label3;
     print "a ";
     print (object) itm;
     if( last ) ?label4;
     if( it_flag ) ?label4;
     last = itm;
     jump label5;
  .label4;
     it_flag = 1;
     last = 0;
  .label5;
     itm = nextitem;
     if( itm ) ?label6;
     if( ~~last ) rtrue;
     if( it_flag ) rtrue;
     SetLastObject(last);
     rtrue;
];

[ LeaveGame ;
     ScoreSub();
     quit;
     rtrue;
];

[ Ask ;
     print ">";
     read P_inbuf P_lexv;
     if( (P_lexv-->1) ~= 'yes' and 'y' ) rfalse;
     rtrue;
];

[ Idrop ;
     if( noun in player ) ?label1;
     if( parent(noun) in player ) ?label1;
     print "You're not carrying the ";
     print (object) noun;
     print ".";
     new_line;
     rfalse;
  .label1;
     if( noun in player ) ?label2;
     if( parent(noun) has open ) ?label2;
     print "The ";
     print (object) noun;
     print " is closed.";
     new_line;
     rfalse;
  .label2;
     move noun to parent(player);
     rtrue;
];

[ HackHack str ;
     if( noun notin global_objects ) ?label1;
     if( Verb ~= ##Lower and ##Raise and ##Wield ) ?label1;
     print "The ";
     print (object) noun;
     print_ret " isn't here!";
  .label1;
     print (string) str;
     print (object) noun;
     print (string) ComplexPickOne(Ho_hum_table);
     new_line;
     rtrue;
];

[ BadVehicle need_vehicle veh ;
     if( ~~need_vehicle ) ?label1;
     print "You can't go there in a ";
     print (object) veh;
     print ".";
     jump label2;
  .label1;
     print "You can't go there without a vehicle.";
  .label2;
     new_line;
     rtrue;
];

[ Goto room v=1 lb environment av old_lit ;
  .label2;
     lb = ((room has dry_land ? 0 : 1));
     environment = parent(player);
     old_lit = Lit;
     if( environment hasnt vehicle ) ?label3;
     av = environment.vtype;
  .label3;
     if( lb ) ?label4;
     if( av ) ?label4;
     BadVehicle(av, environment);
     rfalse;
  .label4;
     if( lb ) ?label5;
     if( room has av ) ?label5;
     BadVehicle(av, environment);
     rfalse;
  .label5;
     if( location hasnt dry_land ) ?label6;
     if( ~~lb ) ?label6;
     if( ~~av ) ?label6;
     if( av == 6 ) ?label6;
     if( room has av ) ?label6;
     BadVehicle(av, environment);
     rfalse;
  .label6;
     if( room hasnt rmungbit ) ?label7;
     print (string) (room.description);
     new_line;
     rfalse;
  .label7;
     if( ~~lb ) ?label8;
     if( location has dry_land ) ?label8;
     if( Dead ) ?label8;
     if( environment hasnt vehicle ) ?label8;
     print "The ";
     print (object) environment;
     print " comes to a rest on the shore.";
     new_line;
     new_line;
  .label8;
     if( ~~av ) ?label9;
     move environment to room;
     jump label10;
  .label9;
     move player to room;
  .label10;
     location = room;
     Lit = QueryLight(location);
     if( old_lit ) ?label11;
     if( Lit ) ?label11;
     if( 80 <= random(100) ) ?label11;
     if( ~~Grue_Repellent ) ?label12;
     print "There are sinister gurgling noises in the darkness all around you!";
     new_line;
     jump label11;
  .label12;
     if( Zork2_deletion() ) rfalse;
     print "Oh, no! A lurking grue slithered into the ";
     if( parent(player) hasnt vehicle ) ?label13;
     print (object) parent(player);
     jump label14;
  .label13;
     print "room";
  .label14;
     JigsUp(" and devoured you!");
     rtrue;
  .label11;
     if( Lit ) ?label15;
     if( player ~= cretin ) ?label15;
     print "You have moved into a dark place.";
     new_line;
     P_cont = 0;
  .label15;
     (location.action)(2);
     ScoreObj(room);
     if( location ~= room ) rtrue;
     if( 4 == player ) ?label16;
     print "The ";
     print (object) player;
     print_ret " leaves the room.";
  .label16;
     if( ~~v ) rtrue;
     FirstLook();
     rtrue;
];

[ GoNext tbl room ;
     room = SearchArray(location, tbl);
     if( ~~room ) rfalse;
     if( Goto(room) ) rtrue;
     return 2;
];

[ SearchArray itm tbl cnt len ;
     len = tbl-->0;
  .label1;
     if( ++cnt > len ) rfalse;
     if( (tbl-->cnt) ~= itm ) ?label1;
     if( cnt == len ) rfalse;
     return (tbl-->(cnt + 1));
];

[ PlayerToProp dir ;
     Direction = dir;
     return Perform(Walk, dir);
];

[ WordType obj word addr UNUSED ;
     addr = obj.name.&;
     return ZMemQ(word, addr, addr.# / 2 - 1);
];

[ InRoomContains itm room addr ;
     addr = room.contains.&;
     if( ~~addr ) rfalse;
     return ZMemQB(itm, addr, addr.# - 1);
];

[ FindItemWithAttr rm attr obj ;
     if( (obj = child(rm)) ) ?label1;
  .label1;
     if( ~~obj ) rfalse;
  .label3;
     if( obj hasnt attr ) ?label2;
     if( obj == cretin ) ?label2;
     return obj;
  .label2;
     if( (obj = sibling(obj)) ) ?label3;
     rfalse;
];

[ InRoom obj ;
     if( obj in location ) rtrue;
     return InRoomContains(obj, location);
];

[ FindDoor door prop addr ;
  .label1;
     prop = location.prop.NEXT;
     if( prop < Low_direction ) rfalse;
     addr = location.prop.&;
     if( (addr.#) ~= 5 ) ?label1;
     if( (addr->1) ~= door ) ?label1;
     return prop;
];

[ MungeRoom room str ;
     give room rmungbit;
     room.description = str;
     rtrue;
];

[ OpenOrClose itm open_msg close_msg ;
     if( Verb ~= ##Open ) ?label1;
     if( itm hasnt open ) ?label2;
     print (string) ComplexPickOne(Dummy_table);
     jump label3;
  .label2;
     print (string) open_msg;
     give itm open;
  .label3;
     new_line;
     rtrue;
  .label1;
     if( Verb ~= ##Close ) rfalse;
     if( itm hasnt open ) ?label4;
     print (string) close_msg;
     give itm ~open;
     jump label5;
  .label4;
     print (string) ComplexPickOne(Dummy_table);
  .label5;
     new_line;
     rtrue;
];

[ WaterFunction av w pi ;
     if( Verb == ##Give ) rfalse;
     if( Verb ~= ##EnterObj ) ?label1;
     print (string) ComplexPickOne(Noswim_table);
     new_line;
     rtrue;
  .label1;
     if( Verb ~= ##Fill ) ?label2;
     w = second;
     Verb = 18;
     second = noun;
     noun = w;
     pi = 0;
     jump label3;
  .label2;
     if( noun == water ) ?label4;
     if( noun ~= quantity_of_water ) ?label5;
  .label4;
     w = noun;
     pi = 0;
     jump label3;
  .label5;
     w = second;
     if( ~~w ) ?label3;
     pi = 1;
  .label3;
     if( w ~= 238 ) ?label6;
     w = 237;
     if( Verb ~= ##Insert and ##Take ) ?label6;
     Remove(w);
  .label6;
     if( ~~pi ) ?label7;
     second = w;
     jump label8;
  .label7;
     noun = w;
  .label8;
     av = parent(player);
     if( av has vehicle ) ?label9;
     av = 0;
  .label9;
     if( Verb ~= ##Insert and ##Take ) ?label10;
     if( pi ) ?label10;
     if( ~~av ) ?label11;
     if( av == second ) ?label12;
     if( second ) ?label11;
     if( w in av ) ?label11;
  .label12;
     print "There is now a puddle in the bottom of the ";
     print (object) av;
     print ".";
     new_line;
     Remove(noun);
     move noun to av;
     rtrue;
  .label11;
     if( ~~second ) ?label13;
     if( second == glass_bottle ) ?label13;
     print "The water leaks out of the ";
     print (object) second;
     print " and evaporates immediately.";
     new_line;
     return Remove(w);
  .label13;
     if( glass_bottle notin player ) ?label14;
     if( glass_bottle has open ) ?label15;
     print "The bottle is closed.";
     new_line;
     return SetLastObject(glass_bottle);
  .label15;
     if( child(glass_bottle) ) ?label16;
     move quantity_of_water to glass_bottle;
     print_ret "The bottle is now full of water.";
  .label16;
     print_ret "The water slips through your fingers.";
  .label14;
     if( noun notin glass_bottle ) ?label17;
     if( Verb ~= ##Take ) ?label17;
     if( second ) ?label17;
     print_ret "It's in the bottle. Perhaps you should take that instead.";
  .label17;
     print_ret "The water slips through your fingers.";
  .label10;
     if( ~~pi ) ?label18;
     print_ret "Nice try.";
  .label18;
     if( Verb ~= ##GiveTo and ##Drop ) ?label19;
     Remove(quantity_of_water);
     if( ~~av ) ?label20;
     print "There is now a puddle in the bottom of the ";
     print (object) av;
     print ".";
     new_line;
     move quantity_of_water to av;
     rtrue;
  .label20;
     print "The water spills to the floor and evaporates immediately.";
     new_line;
     return Remove(quantity_of_water);
  .label19;
     if( Verb ~= ##Throw ) rfalse;
     print "The water splashes on the walls and evaporates immediately.";
     new_line;
     return Remove(quantity_of_water);
];

[ BasketAction ;
     if( Verb ~= ##Raise ) ?label1;
     if( ~~Basket_up ) ?label2;
     print (string) ComplexPickOne(Dummy_table);
     new_line;
     rtrue;
  .label2;
     move basket1 to shaft_room;
     move basket2 to drafty_room;
     Basket_up = true;
     SetLastObject(basket1);
     print_ret "The basket is raised to the top of the shaft.";
  .label1;
     if( Verb ~= ##Lower ) ?label3;
     if( Basket_up ) ?label4;
     print (string) ComplexPickOne(Dummy_table);
     new_line;
     rtrue;
  .label4;
     move basket1 to drafty_room;
     move basket2 to shaft_room;
     SetLastObject(basket2);
     print "The basket is lowered to the bottom of the shaft.";
     new_line;
     Basket_up = false;
     if( ~~Lit ) rtrue;
     Lit = QueryLight(location);
     if( Lit ) rtrue;
     print "It is now pitch black.";
     new_line;
     rtrue;
  .label3;
     if( noun == basket2 ) ?label5;
     if( second ~= basket2 ) ?label6;
  .label5;
     print_ret "The basket is at the other end of the chain.";
  .label6;
     if( Verb ~= ##Take ) rfalse;
     if( noun ~= basket1 and basket2 ) rfalse;
     print_ret "The cage is securely fastened to the iron chain.";
];

[ BatMovesPlayer ;
     FweepFunc(4);
     new_line;
     print "The bat grabs you by the scruff of your neck and lifts you away....";
     new_line;
     new_line;
     Goto(ComplexPickOne(coalmine_rooms), 0);
     FirstLook();
     rtrue;
];

[ FweepFunc cnt ;
  .label3;
     if( --cnt >= 1 ) ?label1;
     jump label2;
  .label1;
     print "    Fweep!";
     new_line;
     jump label3;
  .label2;
     new_line;
     rtrue;
];

[ PseudoNailAction ;
     if( Verb ~= ##Take ) rfalse;
     print_ret "The nails, deeply imbedded in the door, cannot be removed.";
];

[ RecurseTouch cont obj ;
     if( (obj = child(cont)) ) ?label1;
  .label1;
     if( ~~obj ) rtrue;
     give obj visited;
     if( ~~child(obj) ) ?label2;
     RecurseTouch(obj);
  .label2;
     if( (obj = sibling(obj)) ) ?label3;
  .label3;
     jump label1;
];

[ TrophyValue case=194 obj tscore ;
     if( (obj = child(case)) ) ?label1;
  .label1;
     if( obj ) ?label2;
     return tscore;
  .label2;
     tscore = tscore + obj.trophy_value;
     if( ~~child(obj) ) ?label3;
     TrophyValue(obj);
  .label3;
     if( (obj = sibling(obj)) ) ?label4;
  .label4;
     jump label1;
];

[ TryTakeWeapon obj villain ;
     if( villain notin location ) rfalse;
     if( Verb ~= ##Take ) rfalse;
     if( obj notin villain ) ?label1;
     print "The ";
     print (object) villain;
     print_ret " swings it out of your reach.";
  .label1;
     print "The ";
     print (object) obj;
     print " seems white-hot. You can't hold on to it.";
     new_line;
     rtrue;
];

[ RevealGrating ;
     if( grating has open ) rfalse;
     if( Leaves_moved ) rfalse;
     if( Verb ~= ##Take and ##Move ) ?label1;
     print "In disturbing the pile of leaves, a grating is revealed.";
     new_line;
     jump label2;
  .label1;
     print "With the leaves moved, a grating is revealed.";
     new_line;
  .label2;
     give grating ~concealed;
     Leaves_moved = true;
     rfalse;
];

[ DownMazeAction ;
     print "You won't be able to get back up to the tunnel you are going through when it gets to the next room.";
     new_line;
     new_line;
     if( location ~= maze4 ) ?label1;
     return 67;
  .label1;
     if( location ~= maze7 ) ?label2;
     return 66;
  .label2;
     if( location ~= maze15 ) ?label3;
     return 58;
  .label3;
     if( location ~= maze12 ) rfalse;
     return 167;
];

[ MirrorRoomAction rarg ;
     if( rarg ~= M_LOOK ) rfalse;
     print "You are in a large square room with tall ceilings. On the south wall is an enormous mirror which fills the entire wall. There are exits on the other three sides of the room.";
     new_line;
     if( ~~Mirror_flag ) rfalse;
     print_ret "Unfortunately, the mirror has been destroyed by your recklessness.";
];

[ MirrorAction opposite_room=152 item_here item_there nextitem ;
     if( Mirror_flag ) ?label1;
     if( Verb ~= ##Touch ) ?label1;
     if( ~~second ) ?label2;
     if( second == pair_of_hands ) ?label2;
     print "You feel a faint tingling transmitted through the ";
     print (object) second;
     print_ret ".";
  .label2;
     if( location ~= opposite_room ) ?label3;
     opposite_room = 150;
  .label3;
     if( (item_here = child(location)) ) ?label4;
  .label4;
     if( (item_there = child(opposite_room)) ) ?label5;
  .label5;
     if( item_here ) ?label6;
     jump label7;
  .label6;
     if( (nextitem = sibling(item_here)) ) ?label8;
  .label8;
     move item_here to opposite_room;
     item_here = nextitem;
     jump label5;
  .label7;
     if( item_there ) ?label9;
     jump label10;
  .label9;
     if( (nextitem = sibling(item_there)) ) ?label11;
  .label11;
     move item_there to location;
     item_there = nextitem;
     jump label7;
  .label10;
     Goto(opposite_room, 0);
     print_ret "There is a rumble from deep within the earth and the room shakes.";
  .label1;
     if( Verb ~= ##Examine and ##LookIn ) ?label12;
     if( ~~Mirror_flag ) ?label13;
     print "The mirror is broken into many pieces.";
     jump label14;
  .label13;
     print "There is an ugly person staring back at you.";
  .label14;
     new_line;
     rtrue;
  .label12;
     if( Verb ~= ##Take ) ?label15;
     print_ret "The mirror is many times your size. Give up.";
  .label15;
     if( Verb ~= ##Attack and ##Throw and ##Poke ) rfalse;
     if( ~~Mirror_flag ) ?label16;
     print_ret "Haven't you done enough damage already?";
  .label16;
     Mirror_flag = true;
     Goodluck_Flag = false;
     print_ret "You have broken the mirror. I hope you have a seven years' supply of good luck handy.";
];

[ ExorcismDaemon ;
     if( Exorcism_candle ) ?label1;
     if( location ~= entrance_to_hades ) ?label1;
     print "The tension of this ceremony is broken, and the wraiths, amused but shaken at your clumsy attempt, resume their hideous jeering.";
     new_line;
  .label1;
     Exorcism_bell = false;
     return Exorcism_bell;
];

[ Exorcism2Daemon ;
     Exorcism_candle = false;
     return ExorcismDaemon();
];

[ CoolBell ;
     Remove(red_hot_bell);
     move brass_bell to entrance_to_hades;
     if( location ~= entrance_to_hades ) rfalse;
     print_ret "The bell appears to have cooled down.";
];

[ IntegralMsg ;
     print_ret "It is an integral part of the control panel.";
];

[ RisingWaterDaemon ;
     give reservoir water_room;
     give reservoir ~dry_land;
     give deep_canyon ~visited;
     give loud_room ~visited;
     if( trunk_of_jewels notin reservoir ) ?label1;
     give trunk_of_jewels concealed;
  .label1;
     Low_tide = false;
     if( location ~= reservoir ) ?label2;
     if( parent(player) hasnt vehicle ) ?label3;
     print_ret "The boat lifts gently out of the mud and is now floating on the reservoir.";
  .label3;
     JigsUp("You are lifted up by the rising river! You try to swim, but the currents are too strong. You come closer, closer to the awesome structure of Flood Control Dam #3. The dam beckons to you. The roar of the water nearly deafens you, but you remain conscious as you tumble over the dam toward your certain doom among the rocks at its base.");
     rtrue;
  .label2;
     if( location ~= deep_canyon ) ?label4;
     print_ret "A sound, like that of flowing water, starts to come from below.";
  .label4;
     if( location ~= loud_room ) ?label5;
     print "All of a sudden, an alarmingly loud roaring sound fills the room. Filled with fear, you scramble away.";
     new_line;
     Goto(ComplexPickOne(Near_loudroom));
     rtrue;
  .label5;
     if( location ~= reservoir_north and reservoir_south ) rtrue;
     print_ret "You notice that the water level has risen to the point that it is impossible to cross.";
];

[ LowerWaterDaemon ;
     give reservoir dry_land;
     give reservoir ~water_room;
     give deep_canyon ~visited;
     give loud_room ~visited;
     give trunk_of_jewels ~concealed;
     Low_tide = true;
     if( location ~= reservoir ) ?label1;
     if( parent(player) hasnt vehicle ) ?label1;
     print_ret "The water level has dropped to the point at which the boat can no longer stay afloat. It sinks into the mud.";
  .label1;
     if( location ~= deep_canyon ) ?label2;
     print_ret "The roar of rushing water is quieter now.";
  .label2;
     if( location ~= reservoir_north and reservoir_south ) rtrue;
     print_ret "The water level is now quite low here and you could easily cross over to the other side.";
];

[ ButtonAction ;
     if( Verb ~= ##Read ) ?label1;
     print_ret "They're greek to you.";
  .label1;
     if( Verb ~= ##Push ) rfalse;
     if( noun ~= blue_button ) ?label2;
     if( Leak_sprung ) ?label3;
     give leak ~concealed;
     print "There is a rumbling sound and a stream of water appears to burst from the east wall of the room (apparently, a leak has occurred in a pipe).";
     new_line;
     Leak_sprung = true;
     Queue(LeakDaemon, -1)-->0 = 1;
     rtrue;
  .label3;
     print_ret "The blue button appears to be jammed.";
  .label2;
     if( noun ~= red_button ) ?label4;
     print "The lights within the room ";
     if( location hasnt light ) ?label5;
     give location ~light;
     print_ret "shut off.";
  .label5;
     give location light;
     print_ret "come on.";
  .label4;
     if( noun ~= brown_button ) ?label6;
     give dam ~visited;
     Gate_flag = false;
     print_ret "Click.";
  .label6;
     if( noun ~= yellow_button ) rfalse;
     give dam ~visited;
     Gate_flag = true;
     print_ret "Click.";
];

[ LeakDaemon in_danger ;
  .label2;
     in_danger = ((location == maintenance_room ? 0 : 1));
     if( ~~in_danger ) ?label3;
     print "The water level here is now ";
     print (string) (LeakLevel-->(Leak_sprung / 2));
     new_line;
  .label3;
     Leak_sprung++;
     if( Leak_sprung < 14 ) ?label4;
     MungeRoom(maintenance_room, "The room is full of water and cannot be entered.");
     Queue(LeakDaemon, 0);
     if( ~~in_danger ) rtrue;
     JigsUp("I'm afraid you have done drowned yourself.");
     rtrue;
  .label4;
     if( player notin magic_boat ) rtrue;
     if( location ~= maintenance_room and dam and dam_lobby ) rtrue;
     JigsUp("The rising water carries the boat over the dam, down the river, and over the falls. Tsk, tsk.");
     rtrue;
];

[ FixLeak ;
     Leak_sprung = true;
     Queue(LeakDaemon, 0);
     print_ret "By some miracle of Zorkian technology, you have managed to stop the leak in the dam.";
];

[ WithTell obj ;
     print "With a ";
     print (object) obj;
     print_ret "?";
];

[ CyclopsDaemon ;
     if( Cyclops_flag ) rtrue;
     if( Dead ) rtrue;
     if( location == cyclops_room ) ?label1;
     QueueInterrupt(CyclopsDaemon)-->0 = 0;
     rtrue;
  .label1;
     if( Cyclowrath >= 0 ) ?label2;
     jump label3;
  .label2;
    @push            Cyclowrath
  .label3;
     if( (0 - Cyclowrath) <= 5 ) ?label4;
     QueueInterrupt(CyclopsDaemon)-->0 = 0;
     return JigsUp("The cyclops, tired of all of your games and trickery, grabs you firmly. As he licks his chops, he says ~Mmm. Just like Mom used to make 'em.~ It's nice to be appreciated.");
  .label4;
     if( Cyclowrath >= 0 ) ?label5;
     Cyclowrath--;
     jump label6;
  .label5;
     Cyclowrath++;
  .label6;
     if( Cyclops_flag ) rfalse;
     if( Cyclowrath >= 0 ) ?label7;
     jump label8;
  .label7;
    @push            Cyclowrath
  .label8;
     print (string) (Cyclo_messages-->(0 - Cyclowrath - 1));
     new_line;
     rtrue;
];

[ Thief_vs_Adventurer here robbed robbed_player found_anything ;
     if( Dead ) ?label1;
     if( location == treasure_room ) rfalse;
  .label1;
     if( Thief_here ) ?label2;
     if( Dead ) ?label3;
     if( here ) ?label3;
     if( 30 <= random(100) ) ?label3;
     if( stiletto notin thief ) ?label4;
     give thief ~concealed;
     print "Someone carrying a large bag is casually leaning against one of the walls here. He does not speak, but it is clear from his aspect that the bag will be taken only over his dead body.";
     new_line;
     Thief_here = true;
     rtrue;
  .label4;
     if( stiletto notin player ) rfalse;
     move stiletto to thief;
     give stiletto scenery;
     give thief ~concealed;
     print "You feel a light finger-touch, and turning, notice a grinning figure holding a large bag in one hand and a stiletto in the other.";
     Thief_here = true;
     rtrue;
  .label3;
     if( ~~here ) ?label5;
     if( thief hasnt fightbit ) ?label5;
     if( TimeToRetreat(114) ) ?label5;
     print "Your opponent, determining discretion to be the better part of valor, decides to terminate this little contretemps. With a rueful nod of his head, he steps backward into the gloom and disappears.";
     new_line;
     give thief concealed;
     give thief ~fightbit;
     RetreiveStiletto();
     rtrue;
  .label5;
     if( ~~here ) ?label6;
     if( thief hasnt fightbit ) ?label6;
     if( 90 > random(100) ) rfalse;
  .label6;
     if( ~~here ) ?label7;
     if( 30 <= random(100) ) ?label7;
     print "The holder of the large bag just left, looking disgusted. Fortunately, he took nothing.";
     new_line;
     give thief concealed;
     RetreiveStiletto();
     rtrue;
  .label7;
     if( 70 > random(100) ) rfalse;
     if( Dead ) rfalse;
     if( ~~Rob(location, thief, 100) ) ?label8;
     robbed = 1;
     jump label9;
  .label8;
     if( ~~Rob(player, thief) ) ?label9;
     robbed = 1;
     robbed_player = 1;
  .label9;
     Thief_here = true;
     if( ~~robbed ) ?label10;
     if( here ) ?label10;
     print "A seedy-looking individual with a large bag just wandered through the room. On the way through, he quietly abstracted some valuables from the room and from your possession, mumbling something about ~Doing unto others before...~";
     new_line;
     RobYouBlind();
     rfalse;
  .label10;
     if( ~~here ) ?label11;
     RetreiveStiletto();
     if( ~~robbed ) ?label12;
     print "The thief just left, still carrying his large bag. You may not have noticed that he ";
     if( ~~robbed_player ) ?label13;
     print "robbed you blind first.";
     jump label14;
  .label13;
     print "appropriated the valuables in the room.";
  .label14;
     new_line;
     RobYouBlind();
     jump label15;
  .label12;
     print "The thief, finding nothing of value, left disgusted.";
     new_line;
  .label15;
     give thief concealed;
     here = 0;
     rtrue;
  .label11;
     print_ret "A ~lean and hungry~ gentleman just wandered through, carrying a large bag. Finding nothing of value, he left disgruntled.";
  .label2;
     if( ~~here ) rfalse;
     if( 30 <= random(100) ) rfalse;
     found_anything = Rob(location, thief, 100);
     if( ~~found_anything ) ?label16;
    @push            found_anything
     jump label17;
  .label16;
  .label17;
     robbed = Rob(player, thief);
     if( ~~robbed ) ?label18;
     print "The thief just left, still carrying his large bag. You may not have noticed that he robbed you blind first.";
     new_line;
     RobYouBlind();
     jump label19;
  .label18;
     print "The thief, finding nothing of value, left disgusted.";
     new_line;
  .label19;
     give thief concealed;
     here = 0;
     RetreiveStiletto();
     rfalse;
];

[ RobYouBlind old_lit ;
     old_lit = Lit;
     Lit = QueryLight(location);
     if( Lit ) rtrue;
     if( ~~old_lit ) rtrue;
     print_ret "The thief seems to have left you in the dark.";
];

[ HackTreasures itm ;
     RetreiveStiletto();
     give thief concealed;
     if( (itm = child(treasure_room)) ) ?label1;
  .label1;
     if( ~~itm ) rtrue;
     give itm ~concealed;
     if( (itm = sibling(itm)) ) ?label2;
  .label2;
     jump label1;
];

[ ThiefDies room obj nextitem dropped ;
     if( (obj = child(thief)) ) ?label1;
  .label1;
     if( obj ) ?label2;
     return dropped;
  .label2;
     if( (nextitem = sibling(obj)) ) ?label3;
  .label3;
     if( obj ~= stiletto and large_bag ) ?label4;
     jump label5;
  .label4;
     if( (obj.trophy_value) <= 0 ) ?label5;
     move obj to room;
     dropped = 1;
     if( obj ~= jeweled_egg ) ?label5;
     Egg_solve = true;
     give jeweled_egg open;
  .label5;
     obj = nextitem;
     jump label1;
];

[ RobMaze room itm nextitem ;
     if( (itm = child(room)) ) ?label1;
  .label1;
     if( ~~itm ) rfalse;
     if( (nextitem = sibling(itm)) ) ?label2;
  .label2;
     if( itm hasnt takeable ) ?label3;
     if( itm has concealed ) ?label3;
     if( 40 <= random(100) ) ?label3;
     print "You hear, off in the distance, someone saying ~My, I wonder what this fine ";
     print (object) itm;
     print " is doing here.~";
     new_line;
     if( ~~Probability(60) ) rtrue;
     move itm to thief;
     give itm visited;
     give itm concealed;
     rtrue;
  .label3;
     itm = nextitem;
     jump label1;
];

[ EmptyThiefBag thief room itm nextitem ;
     if( ~~(itm = child(thief)) ) rfalse;
  .label2;
     if( ~~itm ) rtrue;
     if( (nextitem = sibling(itm)) ) ?label1;
  .label1;
     give itm ~concealed;
     move itm to room;
     itm = nextitem;
     jump label2;
];

[ ThiefInTreasure obj nextitem ;
     if( (obj = child(location)) ) ?label1;
  .label1;
     if( ~~obj ) ?label2;
     if( ~~sibling(obj) ) ?label2;
     print "The thief gestures mysteriously, and the treasures in the room suddenly vanish.";
     new_line;
     new_line;
  .label2;
     if( ~~obj ) rtrue;
     if( obj == chalice ) ?label3;
     if( obj == thief ) ?label3;
     give obj concealed;
  .label3;
     if( (obj = sibling(obj)) ) ?label4;
  .label4;
     jump label2;
];

[ DoorAction ;
     if( Verb ~= ##Open ) ?label1;
     print_ret "The door cannot be opened.";
  .label1;
     if( Verb ~= ##Burn ) ?label2;
     print_ret "You cannot burn this door.";
  .label2;
     if( Verb ~= ##Poke ) ?label3;
     print_ret "You can't seem to damage the door.";
  .label3;
     if( Verb ~= ##LookBehind ) rfalse;
     print_ret "It won't open.";
];

[ MatchDaemon ;
     print "The match has gone out.";
     new_line;
     give matchbook ~flame;
     give matchbook ~light;
     Lit = QueryLight(location);
     rtrue;
];

[ LampDaemon len msg_table ;
     msg_table = Lamp_table;
     len = msg_table-->0;
     Queue(LampDaemon, len)-->0 = 1;
     GoDark(brass_lantern, msg_table, len);
     if( ~~len ) rfalse;
     Lamp_table = msg_table + 4;
     return Lamp_table;
];

[ CandleDaemon len msg_table ;
     msg_table = Candle_table;
     give pair_of_candles visited;
     len = msg_table-->0;
     Queue(CandleDaemon, len)-->0 = 1;
     GoDark(pair_of_candles, msg_table, len);
     if( ~~len ) rfalse;
     Candle_table = msg_table + 4;
     return Candle_table;
];

[ GoDark light_src msg_table time_left ;
     if( time_left ) ?label1;
     give light_src ~light;
     give light_src rmungbit;
  .label1;
     if( InPlayer(light_src) ) ?label2;
     if( light_src notin location ) rfalse;
  .label2;
     if( time_left ) ?label3;
     print "You'd better have more light than from the ";
     print (object) light_src;
     print_ret ".";
  .label3;
     print (string) (msg_table-->1);
     new_line;
     rtrue;
];

[ Least x y ;
     if( x >= y ) ?label1;
     return x;
  .label1;
     return y;
];

[ DraftyRoomAction rarg itm ;
     if( rarg ~= M_HANDLED ) rfalse;
     if( (itm = child(player)) ) ?label1;
  .label1;
     Empty_handed = true;
  .label6;
     if( itm ) ?label2;
     jump label3;
  .label2;
     if( QueryWeight(itm) <= 4 ) ?label4;
     Empty_handed = false;
     jump label3;
  .label4;
     if( (itm = sibling(itm)) ) ?label5;
  .label5;
     jump label6;
  .label3;
     if( location ~= drafty_room ) rfalse;
     if( ~~Lit ) rfalse;
     ScoreUPD(Light_shaft);
     Light_shaft = 0;
     rfalse;
];

[ RepairBoat ;
     print "Well done. The boat is repaired.";
     new_line;
     move pile_of_plastic to parent(punctured_boat);
     return Remove(punctured_boat);
];

[ RiverDaemon room ;
     if( location == river4 or river3 or river2 ) ?label1;
     if( location == frigid_river or river1 ) ?label1;
     QueueInterrupt(RiverDaemon)-->0 = 0;
     rtrue;
  .label1;
     room = SearchArray(location, River_next);
     if( ~~room ) ?label2;
     print "The flow of the river carries you downstream.";
     new_line;
     new_line;
     Goto(room);
     Queue(RiverDaemon, SearchArray(location, River_speeds))-->0 = 1;
     rtrue;
  .label2;
     return JigsUp("Unfortunately, the magic boat doesn't provide protection from the rocks and boulders one meets at the bottom of waterfalls. Including this one.");
];

[ BlowUpRaft ;
     return Perform(Inflate, noun, blast_of_air);
];

[ BreakEgg UNUSED ;
     if( golden_canary notin jeweled_egg ) ?label1;
     print " ";
     print (string) (broken_canary.initial);
     jump label2;
  .label1;
     Remove(broken_canary);
  .label2;
     move broken_egg to parent(jeweled_egg);
     Remove(jeweled_egg);
     rtrue;
];

[ CanaryAction ;
     if( Verb ~= ##WindUp ) rfalse;
     if( noun ~= golden_canary ) ?label1;
     if( Sing_song ) ?label2;
     if( ~~ForestRoom() ) ?label2;
     print "The canary chirps, slightly off-key, an aria from a forgotten opera. From out of the greenery flies a lovely songbird. It perches on a limb just over your head and opens its beak to sing. As it does so a beautiful brass bauble drops from its mouth, bounces off the top of your head, and lands glimmering in the grass. As the canary winds down, the songbird flies away.";
     new_line;
     Sing_song = true;
  .label4;
     move brass_bauble to ((location ~= up_a_tree ? location : 75));
     rtrue;
  .label2;
     print_ret "The canary chirps blithely, if somewhat tinnily, for a short time.";
  .label1;
     print_ret "There is an unpleasant grinding noise from inside the canary.";
];

[ ForestRoom ;
     if( location == forest1 or forest2 or forest4 ) rtrue;
     if( location == forest_path or up_a_tree ) rtrue;
     rfalse;
];

[ SongbirdDaemon ;
     if( ForestRoom() ) ?label1;
     QueueInterrupt(SongbirdDaemon)-->0 = 0;
     rfalse;
  .label1;
     if( 15 <= random(100) ) rfalse;
     print_ret "You hear in the distance the chirping of a song bird.";
];

[ ForestAction rarg ;
     if( rarg ~= M_ENTER ) ?label1;
     Queue(SongbirdDaemon, -1)-->0 = 1;
     rtrue;
  .label1;
     if( rarg ~= M_HANDLED ) rfalse;
     if( Verb ~= ##ClimbUp and ##ClimbObj ) rfalse;
     if( noun ~= tree ) rfalse;
     return PlayerToProp(self.u_to);
];

[ UntieFrom ;
     if( noun ~= rope ) ?label1;
     if( ~~Dome_flag ) ?label1;
     if( second ~= wooden_railing ) ?label1;
     return Perform(Untie, noun);
  .label1;
     print_ret "It's not attached to that!";
];

[ SlideFunction obj ;
     if( obj hasnt takeable ) ?label1;
     print "The ";
     print (object) obj;
     print " falls into the slide and is gone.";
     new_line;
     if( obj ~= quantity_of_water ) ?label2;
     return Remove(obj);
  .label2;
     move obj to cellar;
     rtrue;
  .label1;
     print (string) ComplexPickOne(Yuks_table);
     new_line;
     rtrue;
];

[ SpiritActions rarg UNUSED ;
     if( Verb ~= ##Walk ) ?label1;
     if( location ~= timber_room ) rfalse;
     if( noun ~= aragain_falls ) rfalse;
     print_ret "You cannot enter in your condition.";
  .label1;
     if( Verb == ##Superbrief or ##Verbose or ##Brief ) rfalse;
     if( Verb == ##Save or ##Again or ##Version ) rfalse;
     if( Verb == ##Restart or ##Quit or ##Restore ) rfalse;
     if( Verb == ##Wake or ##Poke or ##Attack ) ?label2;
     if( Verb ~= ##Swing ) ?label3;
  .label2;
     print_ret "All such attacks are vain in your condition.";
  .label3;
     if( Verb == ##Eat or ##Close or ##Open ) ?label4;
     if( Verb == ##Deflate or ##Inflate or ##Drink ) ?label4;
     if( Verb == ##TieTo or ##Burn or ##MoveWith ) ?label4;
     if( Verb ~= ##Touch and ##Untie ) ?label5;
  .label4;
     print_ret "Even such an action is beyond your capabilities.";
  .label5;
     if( Verb ~= ##Wait ) ?label6;
     print_ret "Might as well. You've got an eternity.";
  .label6;
     if( Verb ~= ##SwitchOn ) ?label7;
     print_ret "You need no light to guide you.";
  .label7;
     if( Verb ~= ##Score ) ?label8;
     print_ret "You're dead! How can you think of your score?";
  .label8;
     if( Verb ~= ##Take ) ?label9;
     print_ret "Your hand passes through its object.";
  .label9;
     if( Verb ~= ##Inventory and ##Throw and ##Drop ) ?label10;
     print_ret "You have no possessions.";
  .label10;
     if( Verb ~= ##Diagnose ) ?label11;
     print_ret "You are dead.";
  .label11;
     if( Verb ~= ##Look ) ?label12;
     print "The room looks strange and unearthly";
     if( child(location) ) ?label13;
     print ".";
     jump label14;
  .label13;
     print " and objects appear indistinct.";
  .label14;
     new_line;
     if( location has light ) ?label15;
     print "Although there is no light, the room seems dimly illuminated.";
     new_line;
  .label15;
     new_line;
     rfalse;
  .label12;
     if( Verb ~= ##Pray ) ?label16;
     if( location ~= altar ) ?label17;
     give brass_lantern ~concealed;
     player.action = 0;
     g79 = 0;
     Always_lit = false;
     Dead = false;
     if( troll notin the_troll_room ) ?label18;
     Troll_flag = false;
  .label18;
     print "From the distance the sound of a lone trumpet is heard. The room becomes very bright and you feel disembodied. In a moment, the brightness fades and you find yourself rising as if from a long sleep, deep in the woods. In the distance you can faintly hear a songbird and the sounds of the forest.";
     new_line;
     new_line;
     return Goto(forest1);
  .label17;
     print_ret "Your prayers are not heard.";
  .label16;
     print "You can't even do that.";
     new_line;
     P_cont = 0;
     return 2;
];

[ PseudoLakeAction ;
     if( ~~Low_tide ) ?label1;
     print_ret "There's not much lake left....";
  .label1;
     if( Verb ~= ##Cross ) ?label2;
     print_ret "It's too wide to cross.";
  .label2;
     if( Verb ~= ##EnterObj ) rfalse;
     print_ret "You can't swim in this lake.";
];

[ PseudoStreamAction ;
     if( Verb ~= ##EnterObj and ##Swim ) ?label1;
     print_ret "You can't swim in the stream.";
  .label1;
     if( Verb ~= ##Cross ) rfalse;
     print_ret "The other side is a sheer rock cliff.";
];

[ PseudoChasmAction ;
     if( Verb == ##Dive ) ?label1;
     if( Verb ~= ##Insert ) ?label2;
     if( noun ~= you ) ?label2;
  .label1;
     print_ret "You look before leaping, and realize that you would never survive.";
  .label2;
     if( Verb ~= ##Cross ) ?label3;
     print_ret "It's too far to jump, and there's no bridge.";
  .label3;
     if( Verb ~= ##ThrowOver and ##Insert ) rfalse;
     if( second ~= pseudo ) rfalse;
     print "The ";
     print (object) noun;
     print " drops out of sight into the chasm.";
     new_line;
     return Remove(noun);
];

[ PseudoDomeAction ;
     if( Verb ~= ##Kiss ) rfalse;
     print_ret "No.";
];

[ PseudoGateAction ;
     if( Verb ~= ##EnterObj ) ?label1;
     PlayerToProp(self.in_to);
     rtrue;
  .label1;
     print_ret "The gate is protected by an invisible force. It makes your teeth ache to touch it.";
];

[ PseudoDoorAction ;
     if( Verb ~= ##Close and ##Open ) ?label1;
     print_ret "The door won't budge.";
  .label1;
     if( Verb ~= ##EnterObj ) rfalse;
     return PlayerToProp(self.s_to);
];

[ PseudoPaintAction ;
     if( Verb ~= ##Poke ) rfalse;
     print_ret "Some paint chips away, revealing more paint.";
];

[ PseudoGasAction ;
     if( Verb ~= ##BlowIn ) ?label1;
     print_ret "There is too much gas to blow away.";
  .label1;
     if( Verb ~= ##Smell ) rfalse;
     print_ret "It smells like coal gas in here.";
];

[ DoFight len cnt res o oo out ;
  .label7;
     cnt = 0;
  .label4;
     cnt++;
     if( cnt ~= len ) ?label1;
     res = 1;
     jump label2;
  .label1;
     oo = Villains-->cnt;
     o = oo-->0;
     if( o has fightbit ) ?label3;
     jump label4;
  .label3;
     if( ~~(o.action)(1) ) ?label5;
     jump label4;
  .label5;
     res = VillainBlow(oo, out);
     if( res ) ?label6;
     res = 0;
     jump label2;
  .label6;
     if( res ~= 2 ) ?label4;
     out = 1 + random(3);
     jump label4;
  .label2;
     if( ~~res ) rtrue;
     if( ~~out ) rtrue;
     out--;
     if( out ) ?label7;
     rtrue;
];

[ Remark remark_tbl defender weap len cnt text ;
     len = remark_tbl-->0;
  .label4;
     if( ++cnt <= len ) ?label1;
     jump label2;
  .label1;
     text = remark_tbl-->cnt;
     if( text ~= 0 ) ?label3;
     print (object) weap;
     jump label4;
  .label3;
     if( text ~= 1 ) ?label5;
     print (object) defender;
     jump label4;
  .label5;
     print (string) text;
     jump label4;
  .label2;
     new_line;
     rtrue;
];

[ FightStrength adjust=1 str ;
     str = 2 + score / Max_Score / (7 - 2);
     if( ~~adjust ) ?label1;
     return str + player.strength;
  .label1;
     return str;
];

[ VillainStrength oo villain od tmp ;
     villain = oo-->0;
     od = villain.strength;
     if( od < 0 ) ?label1;
     if( villain ~= 114 ) ?label2;
     if( ~~Thief_engrossed ) ?label2;
     if( od <= 2 ) ?label3;
     od = 2;
  .label3;
     Thief_engrossed = false;
  .label2;
     if( ~~second ) ?label1;
     if( second hasnt weapon ) ?label1;
     if( (oo-->1) ~= second ) ?label1;
     tmp = od - oo-->2;
     if( tmp >= 1 ) ?label4;
     tmp = 1;
  .label4;
     od = tmp;
  .label1;
     return od;
];

[ HasWeapon who obj ;
     if( (obj = child(who)) ) ?label1;
  .label1;
     if( ~~obj ) rfalse;
  .label4;
     if( obj == stiletto or bloody_axe or sword ) ?label2;
     if( obj ~= nasty_knife and rusty_knife ) ?label3;
  .label2;
     return obj;
  .label3;
     if( (obj = sibling(obj)) ) ?label4;
     rfalse;
];

[ VillainBlow oo out villain v_msgs p_weapon v_str p_str unused_flag o_p_str tbl result n_weapon ;
     villain = oo-->0;
     v_msgs = oo-->4;
     give player ~staggered;
     if( villain hasnt staggered ) ?label1;
     print "The ";
     print (object) villain;
     print " slowly regains his feet.";
     new_line;
     give villain ~staggered;
     rtrue;
  .label1;
     v_str = VillainStrength(oo);
     unused_flag = 1;
     p_str = FightStrength();
     if( p_str <= 0 ) rtrue;
     o_p_str = FightStrength(0);
     p_weapon = HasWeapon(player);
     if( p_str >= 0 ) ?label2;
     result = 3;
     jump label3;
  .label2;
     if( p_str ~= 1 ) ?label4;
     if( v_str <= 2 ) ?label5;
     v_str = 3;
  .label5;
     tbl = Def1_res-->(v_str - 1);
     jump label6;
  .label4;
     if( p_str ~= 2 ) ?label7;
     if( v_str <= 3 ) ?label8;
     v_str = 4;
  .label8;
     tbl = Def2_res-->(v_str - 1);
     jump label6;
  .label7;
     if( p_str <= 2 ) ?label6;
     v_str = v_str - p_str;
     if( v_str >= -1 ) ?label9;
     v_str = -2;
     jump label10;
  .label9;
     if( v_str <= 1 ) ?label10;
     v_str = 2;
  .label10;
     tbl = Def3_res-->(v_str + 2);
  .label6;
     result = tbl-->(random(9) - 1);
     if( ~~out ) ?label11;
     if( result ~= 6 ) ?label12;
     result = 8;
     jump label11;
  .label12;
     result = 9;
  .label11;
     if( result ~= 6 ) ?label13;
     if( ~~p_weapon ) ?label13;
     if( ~~Probability(25) ) ?label13;
     result = 7;
  .label13;
     Remark(PickOne(v_msgs-->(result - 1)), player, p_weapon);
  .label3;
     if( result == 1 ) ?label14;
     if( result ~= 8 ) ?label15;
     jump label14;
  .label15;
     if( result ~= 2 ) ?label16;
     jump label14;
  .label16;
     if( result == 3 ) ?label17;
     if( result ~= 9 ) ?label18;
  .label17;
     p_str = 0;
     jump label14;
  .label18;
     if( result ~= 4 ) ?label19;
     p_str--;
     if( p_str >= 0 ) ?label20;
     p_str = 0;
  .label20;
     if( Load_max <= 50 ) ?label14;
     Load_max = Load_max - 10;
     jump label14;
  .label19;
     if( result ~= 5 ) ?label21;
     p_str = p_str - 2;
     if( p_str >= 0 ) ?label22;
     p_str = 0;
  .label22;
     if( Load_max <= 50 ) ?label14;
     Load_max = Load_max - 20;
     jump label14;
  .label21;
     if( result ~= 6 ) ?label23;
     give player staggered;
     jump label14;
  .label23;
     if( result ~= 7 ) ?label24;
  .label24;
     move p_weapon to location;
     n_weapon = HasWeapon(player);
     if( ~~n_weapon ) ?label14;
     print "Fortunately, you still have a ";
     print (object) n_weapon;
     print ".";
     new_line;
  .label14;
     return WinnerResult(p_str, result, o_p_str);
];

[ HeroBlow oo villain nohesitate dweapon att def cnt oa od tbl res UNUSED len ;
     len = Villains-->0;
  .label3;
     cnt++;
     if( cnt ~= len ) ?label1;
     jump label2;
  .label1;
     oo = Villains-->cnt;
     if( (oo-->0) ~= noun ) ?label3;
  .label2;
     give noun fightbit;
     if( player hasnt staggered ) ?label4;
     print "You are still recovering from that last blow, so your attack is ineffective.";
     new_line;
     give player ~staggered;
     rtrue;
  .label4;
     att = FightStrength();
     if( att >= 1 ) ?label5;
     att = 1;
  .label5;
     oa = att;
     villain = oo-->0;
     def = VillainStrength(oo);
     od = 1;
     if( od ) ?label6;
     if( noun ~= player ) ?label7;
     return JigsUp("Well, you really did it that time. Is suicide painless?");
  .label7;
     print "Attacking the ";
     print (object) villain;
     print_ret " is pointless.";
  .label6;
     dweapon = HasWeapon(villain);
     if( ~~dweapon ) ?label8;
     if( def >= 0 ) ?label9;
  .label8;
     print "The ";
     if( dweapon ) ?label10;
     print "unarmed";
     jump label11;
  .label10;
     print "unconscious";
  .label11;
     print " ";
     print (object) villain;
     print " cannot defend himself: He dies.";
     new_line;
     res = 3;
     jump label12;
  .label9;
     if( def ~= 1 ) ?label13;
     if( att <= 2 ) ?label14;
     att = 3;
  .label14;
     tbl = Def1_res-->(att - 1);
     jump label15;
  .label13;
     if( def ~= 2 ) ?label16;
     if( att <= 3 ) ?label17;
     att = 4;
  .label17;
     tbl = Def2_res-->(att - 1);
     jump label15;
  .label16;
     if( def <= 2 ) ?label15;
     att = att - def;
     if( att >= -1 ) ?label18;
     att = -2;
     jump label19;
  .label18;
     if( att <= 1 ) ?label19;
     att = 2;
  .label19;
     tbl = Def3_res-->(att + 2);
  .label15;
     res = tbl-->(random(9) - 1);
     if( ~~nohesitate ) ?label20;
     if( res ~= 6 ) ?label21;
     res = 8;
     jump label20;
  .label21;
     res = 9;
  .label20;
     if( res ~= 6 ) ?label22;
     if( ~~dweapon ) ?label22;
     if( 25 <= random(100) ) ?label22;
     res = 7;
  .label22;
     Remark(PickOne(Hero_melee-->(res - 1)), noun, second);
  .label12;
     if( res == 1 ) ?label23;
     if( res ~= 8 ) ?label24;
     jump label23;
  .label24;
     if( res ~= 2 ) ?label25;
     def = 0 - def;
     jump label23;
  .label25;
     if( res == 3 ) ?label26;
     if( res ~= 9 ) ?label27;
  .label26;
     def = 0;
     jump label23;
  .label27;
     if( res ~= 4 ) ?label28;
     def--;
     if( def >= 0 ) ?label23;
     def = 0;
     jump label23;
  .label28;
     if( res ~= 5 ) ?label29;
     def = def - 2;
     if( def >= 0 ) ?label23;
     def = 0;
     jump label23;
  .label29;
     if( res ~= 6 ) ?label30;
     give noun staggered;
     jump label23;
  .label30;
     if( res ~= 7 ) ?label31;
  .label31;
     give dweapon ~scenery;
     give dweapon weapon;
     move dweapon to location;
     SetLastObject(dweapon);
  .label23;
     return VillainResult(noun, def, res);
];

[ WinnerResult def res od ;
     if( def ) ?label1;
    @push            -10000
     jump label2;
  .label1;
  .label2;
     player.strength = def - od;
     if( (def - od) >= 0 ) ?label3;
     Queue(HealFunction, 30)-->0 = 1;
  .label3;
     if( FightStrength() > 0 ) ?label4;
     player.strength = 1 + 0 - FightStrength(0);
     JigsUp("It appears that that last blow was too much for you. I'm afraid you are dead.");
     rfalse;
  .label4;
     return res;
];

[ VillainResult villain def res ;
     villain.strength = def;
     if( def ) ?label1;
     give villain ~fightbit;
     print "Almost as soon as the ";
     print (object) villain;
     print " breathes his last breath, a cloud of sinister black fog envelops him, and when the fog lifts, the carcass has disappeared.";
     new_line;
     Remove(villain);
     (villain.action)(2);
     return res;
  .label1;
     if( res ~= 2 ) ?label2;
     (villain.action)(3);
     return res;
  .label2;
     return res;
];

[ TimeToRetreat villain vill_str play_str ;
     vill_str = villain.strength;
     play_str = vill_str - FightStrength();
     if( play_str <= 3 ) ?label1;
     if( 90 > random(100) ) rtrue;
     rfalse;
  .label1;
     if( play_str <= 0 ) ?label2;
     if( 75 > random(100) ) rtrue;
     rfalse;
  .label2;
     if( play_str ) ?label3;
     if( 50 > random(100) ) rtrue;
     rfalse;
  .label3;
     if( vill_str <= 1 ) ?label4;
     if( 25 > random(100) ) rtrue;
     rfalse;
  .label4;
     if( 10 > random(100) ) rtrue;
     rfalse;
];

[ HealFunction pstr ;
     pstr = player.strength;
     if( pstr <= 0 ) ?label1;
     pstr = 0;
     player.strength = pstr;
     jump label2;
  .label1;
     if( pstr >= 0 ) ?label2;
     pstr++;
     player.strength = pstr;
  .label2;
     if( pstr >= 0 ) ?label3;
     if( Load_max >= Load_allowed ) ?label4;
     Load_max = Load_max + 10;
  .label4;
     Queue(HealFunction, 30)-->0 = 1;
     rtrue;
  .label3;
     Load_max = Load_allowed;
     QueueInterrupt(HealFunction)-->0 = 0;
     rtrue;
];

[ FightDaemon fightp len cnt oo o p ;
     len = Villains-->0;
     if( Dead ) rfalse;
     cnt = 0;
  .label5;
     cnt++;
     if( cnt ~= len ) ?label1;
     jump label2;
  .label1;
     oo = Villains-->cnt;
     o = oo-->0;
     if( o notin location ) ?label3;
     if( o has concealed ) ?label3;
     if( o ~= 114 ) ?label4;
     if( ~~Thief_engrossed ) ?label4;
     Thief_engrossed = false;
     jump label5;
  .label4;
     if( (o.strength) >= 0 ) ?label6;
     p = oo-->3;
     if( ~~p ) ?label7;
     if( p <= random(100) ) ?label7;
     oo-->3 = 0;
     CheckStrength(o);
     jump label5;
  .label7;
     oo-->3 = (p + 25);
     jump label5;
  .label6;
     if( o has fightbit ) ?label8;
     if( ~~(o.action)(5) ) ?label5;
  .label8;
     fightp = 1;
     jump label5;
  .label3;
     if( o hasnt fightbit ) ?label9;
     (o.action)(1);
  .label9;
     if( o ~= 114 ) ?label10;
     Thief_engrossed = false;
  .label10;
     give player ~staggered;
     give o ~staggered;
     give o ~fightbit;
     CheckStrength(o);
     jump label5;
  .label2;
     if( ~~fightp ) rfalse;
     return DoFight(len);
];

[ CheckStrength villain str ;
     str = villain.strength;
     if( str >= 0 ) rtrue;
     villain.strength = 0 - str;
     (villain.action)(4);
     rtrue;
];

[ SwordDaemon dem g ng p t l ;
     dem = QueueInterrupt(SwordDaemon);
     g = sword.trophy_value;
     if( sword notin cretin ) ?label1;
     if( ~~Infested(location) ) ?label2;
     ng = 2;
     jump label3;
  .label2;
     p = 0;
  .label5;
     p = location.p.NEXT;
     if( p ) ?label4;
     jump label3;
  .label4;
     if( p < Low_direction ) ?label5;
     t = location.p.&;
     l = t.#;
     if( l ~= 1 and 4 and 5 ) ?label5;
     if( ~~Infested(t->0) ) ?label5;
     ng = 1;
  .label3;
     if( ng == g ) rfalse;
     if( ng ~= 2 ) ?label6;
     print "Your sword has begun to glow very brightly.";
     new_line;
     jump label7;
  .label6;
     if( ng ~= 1 ) ?label8;
     print "Your sword is glowing with a faint blue glow.";
     new_line;
     jump label7;
  .label8;
     if( ng ) ?label7;
     print "Your sword is no longer glowing.";
     new_line;
  .label7;
     sword.trophy_value = ng;
     rtrue;
  .label1;
     dem-->0 = 0;
     rfalse;
];

[ Infested room obj ;
     if( (obj = child(room)) ) ?label1;
  .label1;
     if( ~~obj ) rfalse;
     if( obj hasnt animate ) ?label2;
     if( obj hasnt concealed ) rtrue;
  .label2;
     if( (obj = sibling(obj)) ) ?label1;
     rfalse;
];

[ ThiefDaemon room robj here once robbed ;
     room = parent(thief);
  .label2;
     here = ((thief has concealed ? 1 : 0));
     if( ~~here ) ?label3;
     room = parent(thief);
  .label3;
     if( room ~= treasure_room ) ?label4;
     if( room == location ) ?label4;
     if( ~~here ) ?label5;
     HackTreasures();
     here = 0;
  .label5;
     ThiefDies(190);
     jump label6;
  .label4;
     if( room ~= location ) ?label7;
     if( room has light ) ?label7;
     if( troll in location ) ?label7;
     if( Thief_vs_Adventurer(here) ) rtrue;
     if( thief hasnt concealed ) ?label6;
     here = 0;
     jump label6;
  .label7;
     if( thief notin room ) ?label8;
     if( thief has concealed ) ?label8;
     give thief concealed;
     here = 0;
  .label8;
     if( room hasnt visited ) ?label6;
     Rob(room, thief, 75);
     if( room hasnt maze_room ) ?label9;
     if( location hasnt maze_room ) ?label9;
     RobMaze(room);
     jump label10;
  .label9;
  .label10;
     robbed = StealJunk(room);
  .label12;
     once = ((once ? 0 : 1));
     if( ~~once ) ?label13;
     if( here ) ?label13;
     RetreiveStiletto();
  .label16;
     if( ~~room ) ?label14;
     if( ~~(room = sibling(room)) ) ?label14;
     jump label15;
  .label14;
     if( (room = child(rooms)) ) ?label15;
  .label15;
     if( room has sacred ) ?label16;
     if( room hasnt dry_land ) ?label16;
     move thief to room;
     give thief ~fightbit;
     give thief concealed;
     Thief_here = false;
     jump label17;
  .label13;
     if( room == treasure_room ) ?label18;
     DropJunk(room);
     return robbed;
  .label18;
     return robbed;
];

[ DropJunk room obj nextitem dropflag ;
     if( (obj = child(thief)) ) ?label1;
  .label1;
     if( obj ) ?label2;
     return dropflag;
  .label2;
     if( (nextitem = sibling(obj)) ) ?label3;
  .label3;
     if( obj ~= stiletto and large_bag ) ?label4;
     jump label5;
  .label4;
     if( (obj.trophy_value) ) ?label5;
     if( ~~Probability(30) ) ?label5;
     give obj ~concealed;
     move obj to room;
     if( dropflag ) ?label5;
     if( room ~= location ) ?label5;
     print "The robber, rummaging through his bag, dropped a few items he found valueless.";
     new_line;
     dropflag = 1;
  .label5;
     obj = nextitem;
     jump label1;
];

[ RetreiveStiletto ;
     if( stiletto notin parent(thief) ) rfalse;
     give stiletto scenery;
     move stiletto to thief;
     rtrue;
];

[ StealJunk room obj nextitem ;
     if( (obj = child(room)) ) ?label1;
  .label1;
     if( ~~obj ) rfalse;
     if( (nextitem = sibling(obj)) ) ?label2;
  .label2;
     if( (obj.trophy_value) ) ?label3;
     if( obj hasnt takeable ) ?label3;
     if( obj has sacred ) ?label3;
     if( obj has concealed ) ?label3;
     if( obj == stiletto ) ?label4;
     if( ~~Probability(10) ) ?label3;
  .label4;
     move obj to thief;
     give obj visited;
     give obj concealed;
     if( obj ~= rope ) ?label5;
     Dome_flag = false;
  .label5;
     if( room ~= location ) rfalse;
     print "You suddenly notice that the ";
     print (object) obj;
     print_ret " vanished.";
  .label3;
     obj = nextitem;
     jump label1;
];

[ Rob what thief prob nextitem itm robbed ;
     if( (itm = child(what)) ) ?label1;
  .label1;
     if( itm ) ?label2;
     return robbed;
  .label2;
     if( (nextitem = sibling(itm)) ) ?label3;
  .label3;
     if( itm has concealed ) ?label4;
     if( itm has sacred ) ?label4;
     if( (itm.trophy_value) <= 0 ) ?label4;
     if( ~~prob ) ?label5;
     if( prob <= random(100) ) ?label4;
  .label5;
     move itm to thief;
     give itm visited;
     if( thief ~= thief ) ?label6;
     give itm concealed;
  .label6;
     robbed = 1;
  .label4;
     itm = nextitem;
     jump label1;
];

[ DiagnoseSub my_str wounds remaining_str curetime ;
     my_str = FightStrength(0);
     wounds = player.strength;
     remaining_str = my_str + wounds;
     if( (QueueInterrupt(HealFunction)-->0) ) ?label1;
     wounds = 0;
     jump label2;
  .label1;
     wounds = 0 - wounds;
  .label2;
     if( wounds ) ?label3;
     print "You are in perfect health.";
     jump label4;
  .label3;
     print "You have ";
     if( wounds ~= 1 ) ?label5;
     print "a light wound,";
     jump label4;
  .label5;
     if( wounds ~= 2 ) ?label6;
     print "a serious wound,";
     jump label4;
  .label6;
     if( wounds ~= 3 ) ?label7;
     print "several wounds,";
     jump label4;
  .label7;
     if( wounds <= 3 ) ?label4;
     print "serious wounds,";
  .label4;
     if( ~~wounds ) ?label8;
     print " which will be cured after ";
     curetime = 30 * (wounds - 1);
     print (number) (curetime + QueueInterrupt(HealFunction)-->1);
     print " moves.";
  .label8;
     new_line;
     print "You can ";
     if( remaining_str ) ?label9;
     print "expect death soon";
     jump label10;
  .label9;
     if( remaining_str ~= 1 ) ?label11;
     print "be killed by one more light wound";
     jump label10;
  .label11;
     if( remaining_str ~= 2 ) ?label12;
     print "be killed by a serious wound";
     jump label10;
  .label12;
     if( remaining_str ~= 3 ) ?label13;
     print "survive one serious wound";
     jump label10;
  .label13;
     if( remaining_str <= 3 ) ?label10;
     print "strong enough to take several wounds.";
  .label10;
     print ".";
     new_line;
     if( ~~Deaths ) rfalse;
     print "You have been killed ";
     if( Deaths ~= 1 ) ?label14;
     print "once";
     jump label15;
  .label14;
     print "twice";
  .label15;
     print_ret ".";
];

[ ScoreSub ask=1 ;
     print "Your score is ";
     print (number) score;
     print " (total of 350 points), in ";
     print (number) turns;
     if( turns ~= 1 ) ?label1;
     print " move.";
     jump label2;
  .label1;
     print " moves.";
  .label2;
     new_line;
     print "This gives you the rank of ";
     if( score ~= 350 ) ?label3;
     print "Master Adventurer";
     jump label4;
  .label3;
     if( score <= 330 ) ?label5;
     print "Wizard";
     jump label4;
  .label5;
     if( score <= 300 ) ?label6;
     print "Master";
     jump label4;
  .label6;
     if( score <= 200 ) ?label7;
     print "Adventurer";
     jump label4;
  .label7;
     if( score <= 100 ) ?label8;
     print "Junior Adventurer";
     jump label4;
  .label8;
     if( score <= 50 ) ?label9;
     print "Novice Adventurer";
     jump label4;
  .label9;
     if( score <= 25 ) ?label10;
     print "Amateur Adventurer";
     jump label4;
  .label10;
     print "Beginner";
  .label4;
     print ".";
     new_line;
     return score;
];

[ JigsUp deathmsg playerp ;
     if( ~~Dead ) ?label1;
     print "^It takes a talented person to be killed while already dead. YOU are such a talent. Unfortunately, it takes a talented person to deal with it. I am not such a talent. Sorry.";
     new_line;
     LeaveGame();
  .label1;
     print (string) deathmsg;
     new_line;
     if( Goodluck_Flag ) ?label2;
     print "Bad luck, huh?";
     new_line;
  .label2;
     ScoreUPD(-10);
     print " ^   ****  You have died  **** ^^";
     if( parent(player) hasnt vehicle ) ?label3;
     move player to location;
  .label3;
     if( Deaths < 2 ) ?label4;
     print "You clearly are a suicidal maniac. We don't allow psychotics in the cave, since they may harm other adventurers. Your remains will be installed in the Land of the Living Dead, where your fellow adventurers may gloat over them.";
     new_line;
     return LeaveGame();
  .label4;
     Deaths++;
     move player to location;
     if( altar hasnt visited ) ?label5;
     print "As you take your last breath, you feel relieved of your burdens. The feeling passes as you find yourself before the gates of Hell, where the spirits jeer at you and deny you entry. Your senses are disturbed. The objects in the dungeon appear indistinct, bleached of color, even unreal.";
     new_line;
     new_line;
     Dead = true;
     Troll_flag = true;
     g79 = 1;
     Always_lit = true;
     player.action = SpiritActions;
     Goto(entrance_to_hades);
     jump label6;
  .label5;
     print "Now, let's take a look here... Well, you probably deserve another chance. I can't quite fix you up completely, but you can't have everything.";
     new_line;
     new_line;
     Goto(forest1);
  .label6;
     give trap_door ~visited;
     P_cont = 0;
     RandomizeObjects();
     return KillInterrupts();
];

[ RandomizeObjects room itm nextitem len ;
     if( brass_lantern notin player ) ?label1;
     move brass_lantern to living_room;
  .label1;
     if( gold_coffin notin player ) ?label2;
     move gold_coffin to egyptian_room;
  .label2;
     sword.trophy_value = 0;
     if( (nextitem = child(player)) ) ?label3;
  .label3;
     len = Above_ground-->0;
  .label8;
     itm = nextitem;
     if( ~~itm ) rtrue;
     if( (nextitem = sibling(itm)) ) ?label4;
  .label4;
     if( (itm.trophy_value) <= 0 ) ?label5;
  .label10;
     if( room ) ?label6;
     if( (room = child(rooms)) ) ?label6;
  .label6;
     if( room hasnt dry_land ) ?label7;
     if( room has light ) ?label7;
     if( 50 <= random(100) ) ?label7;
     move itm to room;
     jump label8;
  .label7;
     if( (room = sibling(room)) ) ?label9;
  .label9;
     jump label10;
  .label5;
     move itm to (Above_ground-->random(len));
     jump label8;
];

[ KillInterrupts ;
     QueueInterrupt(ExorcismDaemon)-->0 = 0;
     QueueInterrupt(Exorcism2Daemon)-->0 = 0;
     QueueInterrupt(CyclopsDaemon)-->0 = 0;
     QueueInterrupt(LampDaemon)-->0 = 0;
     QueueInterrupt(CandleDaemon)-->0 = 0;
     QueueInterrupt(SwordDaemon)-->0 = 0;
     QueueInterrupt(SongbirdDaemon)-->0 = 0;
     QueueInterrupt(MatchDaemon)-->0 = 0;
     give matchbook ~light;
     rtrue;
];

[ DoNotEmpty obj ob_name ;
     if( Verb ~= ##Close and ##Open ) ?label1;
     print "The ";
     print (string) ob_name;
     print_ret " are safely inside; there's no need to do that.";
  .label1;
     if( Verb ~= ##Examine and ##LookIn ) ?label2;
     print "There are lots of ";
     print (string) ob_name;
     print_ret " in there.";
  .label2;
     if( Verb ~= ##Insert ) rfalse;
     if( second ~= obj ) rfalse;
     print "Don't be silly. It wouldn't be a ";
     print (object) obj;
     print_ret " anymore.";
];

[ PseudoChainAction ;
     if( Verb ~= ##Move and ##Take ) ?label1;
     print_ret "The chain is secure.";
  .label1;
     if( Verb ~= ##Lower and ##Raise ) ?label2;
     print_ret "Perhaps you should do that to the basket.";
  .label2;
     if( Verb ~= ##Examine ) rfalse;
     print_ret "The chain secures a basket within the shaft.";
];

[ Probability chance ;
     if( ~~Goodluck_Flag ) ?label1;
     if( chance > random(100) ) rtrue;
     rfalse;
  .label1;
     if( chance > random(300) ) rtrue;
     rfalse;
];

[ PickOne tbl ;
     return tbl-->random((tbl-->0));
];

[ Print_A obj ;
     print "a ";
     print (object) obj;
     rtrue;
];

